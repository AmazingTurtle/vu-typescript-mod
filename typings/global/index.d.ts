declare namespace VUServer {
    class CapturePointEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly name: string;
        readonly playersInside: VUClient.Player[];
        readonly flagPole: VUShared.Entity | undefined;
        readonly isInPreRound: boolean;
        readonly isAttacked: boolean;
        readonly previousOwner: FB.TeamId;
        readonly attackingTeam: FB.TeamId;
        readonly isFlagMoving: boolean;
        team: FB.TeamId;
        flagVelocity: number;
        flagLocation: number;
        flagHome: number;
        isControlled: boolean;
        isCaptureEnabled: boolean;
        cooldownTimer: number;
        team1CooldownPenalty: number;
        team2CooldownPenalty: number;

    }

    class CollisionInfo {

        constructor();

        entity: VUShared.Entity | undefined;
        material: VUShared.DataContainer | undefined;
        ownMaterial: VUShared.DataContainer | undefined;
        position: VUShared.Vec3;
        normal: VUShared.Vec3;
        speed: number;
        part: number;
        isInstantlyDestructible: boolean;

    }

    class ControllableEntity extends VUClient.PhysicsEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);
        constructor(other: VUClient.PhysicsEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly entryCount: number;
        readonly teamId: FB.TeamId;
        readonly defaultTeamId: FB.TeamId;

        GetPlayerInEntry(entryId: number): VUClient.Player | undefined;
        GetDataForEntry(entryId: number): VUShared.DataContainer | undefined;
        GetExternalInput(entryId: number): VUShared.EntryInput | undefined;
        SetExternalInput(entryId: number, input: VUShared.EntryInput | undefined): void;

    }

    class DamageGiverInfo {

        constructor();

        giver: VUClient.Player | undefined;
        assistant: VUClient.Player | undefined;
        weaponUnlock: VUShared.DataContainer | undefined;
        weaponFiring: VUShared.DataContainer | undefined;
        physicsEntity: VUShared.Entity | undefined;
        giverControllable: VUShared.Entity | undefined;
        lockedTarget: VUShared.Entity | undefined;
        giverCharacterCustomization: VUShared.DataContainer | undefined;
        damageType: VUShared.DamageType;

    }

    class DamageInfo {

        constructor();

        position: VUShared.Vec3;
        direction: VUShared.Vec3;
        origin: VUShared.Vec3;
        damagedMaterial: VUShared.DataContainer | undefined;
        collidingMaterial: VUShared.DataContainer | undefined;
        damage: number;
        distributeDamageOverTime: number;
        empTime: number;
        stamina: number;
        collisionSpeed: number;
        boneIndex: number;
        isDemolitionDamage: boolean;
        includeChildren: boolean;
        isExplosionDamage: boolean;
        shouldForceDamage: boolean;
        isBulletDamage: boolean;
        isClientDamage: boolean;

    }

    class ExplosionEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        Detonate(transform: VUShared.LinearTransform, impactNormal: VUShared.Vec3, damageMultiplier: number, shooterPlayer: VUClient.Player | undefined): void;

    }

    class GameEntity extends VUShared.SpatialEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);

        Spawn(transform: VUShared.LinearTransform, fireEnableEvent: boolean): void;
        RegisterSpawnCallback(callback: Function): number;
        RegisterSpawnCallback(context: any, callback: Function): number;
        UnregisterSpawnCallback(handle: number): void;
        RegisterUnspawnCallback(callback: Function): number;
        RegisterUnspawnCallback(context: any, callback: Function): number;
        UnregisterUnspawnCallback(handle: number): void;

    }

    class KillCounterEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly killCount: number;
        readonly maxKillCount: number;

    }

    class NetEvent {

        Unsubscribe(): void;

    }

    class PhysicsEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        internalHealth: number;
        readonly velocity: VUShared.Vec3;
        readonly defaultMaterial: VUShared.DataContainer | undefined;
        readonly belongsInPhysicsWorld: boolean;
        readonly isPredestructible: boolean;
        readonly physicsEntityBase: VUShared.PhysicsEntityBase | undefined;

        GetMaterial(position: VUShared.Vec3): VUShared.DataContainer | undefined;
        SetActiveHealthState(state: number): void;
        ApplyDamage(damageInfo: VUClient.DamageInfo): void;
        ApplyImpulse(impulseData: VUShared.ImpulseData): void;
        RegisterCollisionCallback(callback: Function): number;
        RegisterCollisionCallback(context: any, callback: Function): number;
        UnregisterCollisionCallback(handle: number): void;
        RegisterDamageCallback(callback: Function): number;
        RegisterDamageCallback(context: any, callback: Function): number;
        UnregisterDamageCallback(handle: number): void;
        RegisterInteractCallback(callback: Function): number;
        RegisterInteractCallback(context: any, callback: Function): number;
        UnregisterInteractCallback(handle: number): void;
        RegisterImpulseCallback(callback: Function): number;
        RegisterImpulseCallback(context: any, callback: Function): number;
        UnregisterImpulseCallback(handle: number): void;

    }

    class Player {

        name: string;
        readonly id: number;
        readonly onlineId: number;
        readonly guid: VUShared.Guid;
        readonly accountGuid: VUShared.Guid;
        readonly ip: string;
        readonly ping: number;
        readonly alive: boolean;
        readonly isSquadLeader: boolean;
        readonly isSquadPrivate: boolean;
        readonly hasSoldier: boolean;
        readonly soldier: VUClient.SoldierEntity | undefined;
        readonly corpse: VUClient.SoldierEntity | undefined;
        teamId: FB.TeamId;
        squadId: FB.SquadId;
        isAllowedToSpawn: boolean;
        selectedKit: VUShared.DataContainer | undefined;
        readonly score: number;
        readonly kills: number;
        readonly deaths: number;
        input: VUShared.EntryInput | undefined;
        readonly controlledEntryId: number;
        readonly attachedControllable: VUClient.ControllableEntity | undefined;
        readonly controlledControllable: VUClient.ControllableEntity | undefined;
        /**
         * The CharacterCustomizationAsset currently applied to this player's soldier.
         */
        readonly customization: VUShared.DataContainer | undefined;
        /**
         * A table of specializations (UnlockAssetBase) this player currently has equipped.
         */
        readonly selectedUnlocks: VUShared.DataContainer[];
        /**
         * A table of visual unlocks (UnlockAsset) this player currently has equipped.
         */
        readonly visualUnlocks: VUShared.DataContainer[];
        /**
         * An array of weapons (SoldierWeaponUnlockAsset) this player currently has equipped. This array can be indexed using WeaponSlot `+ 1`. A weapon at a given slot may be `nil` if nothing is equipped.
         */
        readonly weapons: VUShared.DataContainer[];
        /**
         * An array containing tables of equipped unlocks (UnlockAssetBase) for each weapon this player has. This array can be indexed using WeaponSlot `+ 1`. The unlocks may be `nil` if there is no weapon equipped at a given slot.
         */
        readonly weaponUnlocks: VUShared.DataContainer[];

        Kick(): void;
        Kick(reason: string): void;
        Ban(): void;
        Ban(reason: string): void;
        BanTemporarily(seconds: number): void;
        BanTemporarily(seconds: number, reason: string): void;
        BanByName(): void;
        BanByName(reason: string): void;
        BanByNameTemporarily(seconds: number): void;
        BanByNameTemporarily(seconds: number, reason: string): void;
        BanByIp(): void;
        BanByIp(reason: string): void;
        BanByIpTemporarily(seconds: number): void;
        BanByIpTemporarily(seconds: number, reason: string): void;
        Spawn(spawnPoint: VUShared.Entity, checkSpawnArea: boolean): boolean;
        SelectWeapon(slot: FB.WeaponSlot, weaponUnlockAsset: VUShared.DataContainer, unlockAssets: VUShared.DataContainer[]): void;
        SelectUnlockAssets(characterCustomizationAsset: VUShared.DataContainer, visualUnlockAssets: VUShared.DataContainer[]): void;
        CreateSoldier(soldierBlueprint: VUShared.DataContainer, transform: VUShared.LinearTransform): VUClient.SoldierEntity | undefined;
        SpawnSoldierAt(soldier: VUClient.SoldierEntity, transform: VUShared.LinearTransform, pose: FB.CharacterPoseType): void;
        SetSquadLeader(leader: boolean, squadPrivate: boolean): void;
        AttachSoldier(soldier: VUClient.SoldierEntity): void;
        EnableInput(action: FB.EntryInputActionEnum, enable: boolean): void;
        Fade(fadeTime: number, fadeToBlack: boolean): void;
        EnterVehicle(vehicle: VUShared.Entity, entryId: number): void;
        ExitVehicle(force: boolean, exitOnEntry: boolean): void;

    }

    class ServerDoublePlayerEvent extends VUServer.ServerPlayerEvent {

        constructor(eventId: number, player: VUClient.Player, extraPlayer: VUClient.Player, sendToPlayerOnly: boolean, sendToHostOnly: boolean, sendToTeamOnly: boolean, invertPlayerFilter: boolean, invertTeamFilter: boolean, forwardToSpectators: boolean, team: FB.TeamId);
        constructor(eventName: string, player: VUClient.Player, extraPlayer: VUClient.Player, sendToPlayerOnly: boolean, sendToHostOnly: boolean, sendToTeamOnly: boolean, invertPlayerFilter: boolean, invertTeamFilter: boolean, forwardToSpectators: boolean, team: FB.TeamId);

        extraPlayer: VUClient.Player;

    }

    class ServerPlayerEvent extends VUShared.EntityEvent {

        constructor(eventId: number, player: VUClient.Player, sendToPlayerOnly: boolean, sendToHostOnly: boolean, sendToTeamOnly: boolean, invertPlayerFilter: boolean, invertTeamFilter: boolean, forwardToSpectators: boolean, team: FB.TeamId);
        constructor(eventName: string, player: VUClient.Player, sendToPlayerOnly: boolean, sendToHostOnly: boolean, sendToTeamOnly: boolean, invertPlayerFilter: boolean, invertTeamFilter: boolean, forwardToSpectators: boolean, team: FB.TeamId);

        player: VUClient.Player;
        sendToPlayerOnly: boolean;
        sendToHostOnly: boolean;
        sendToTeamOnly: boolean;
        invertPlayerFilter: boolean;
        invertTeamFilter: boolean;
        forwardToSpectators: boolean;
        team: FB.TeamId;

    }

    class SoldierEntity extends VUClient.ControllableEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);
        constructor(other: VUClient.PhysicsEntity);
        constructor(other: VUClient.ControllableEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly worldTransform: VUShared.LinearTransform;
        readonly player: VUClient.Player | undefined;
        detailedCollisionEnabled: boolean;
        physicsEnabled: boolean;
        forceInvisible: boolean;
        aimingEnabled: boolean;
        maxHealth: number;
        waterLevel: number;
        readonly isManDown: boolean;
        readonly isAlive: boolean;
        readonly isDead: boolean;
        readonly isDying: boolean;
        readonly isInteractiveManDown: boolean;
        readonly isFiring: boolean;
        readonly isReloading: boolean;
        health: number;
        readonly weaponsComponent: VUClient.SoldierWeaponsComponent;
        readonly pose: FB.CharacterPoseType;
        pendingPose: FB.CharacterPoseType;

        SetPosition(position: VUShared.Vec3): void;
        Kill(): void;
        ApplyCustomization(customizationData: VUShared.DataContainer): void;
        ForceDead(): void;
        SingleStepEntry(entryId: number): void;
        SetPose(pose: FB.CharacterPoseType, immediately: boolean, overridePending: boolean): void;
        SetTransform(transform: VUShared.LinearTransform): void;

    }

    class SoldierWeapon extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly weaponModifier: FB.WeaponModifier;
        readonly weaponFiring: VUShared.WeaponFiring;
        readonly name: string;
        primaryAmmo: number;
        secondaryAmmo: number;
        fireLogic: FB.FireLogicType;

    }

    class SoldierWeaponsComponent {

        readonly isZooming: boolean;
        readonly currentWeapon: VUClient.SoldierWeapon;
        readonly weapons: VUClient.SoldierWeapon[];
        readonly currentWeaponSlot: FB.WeaponSlot;

    }

    class SQLBlob {

        readonly data: string;

    }

    class ChatManager {

        static SendMessage(message: string): boolean;
        static SendMessage(message: string, toTeam: FB.TeamId): boolean;
        static SendMessage(message: string, toTeam: FB.TeamId, toSquad: FB.SquadId): boolean;
        static SendMessage(message: string, toPlayer: VUClient.Player): boolean;
        static SendMessage(message: string, toPlayers: VUClient.Player[]): boolean;
        static Yell(message: string, duration: number): boolean;
        static Yell(message: string, duration: number, toTeam: FB.TeamId): boolean;
        static Yell(message: string, duration: number, toTeam: FB.TeamId, toSquad: FB.SquadId): boolean;
        static Yell(message: string, duration: number, toPlayer: VUClient.Player): boolean;
        static Yell(message: string, duration: number, toPlayers: VUClient.Player[]): boolean;

    }

    class NetEvents {

        static Subscribe(eventName: string, callback: Function): VUClient.NetEvent;
        static Subscribe(eventName: string, context: any, callback: Function): VUClient.NetEvent;
        static SendTo(eventName: string, player: VUClient.Player, ...args: any[]): void;
        static SendToLocal(eventName: string, player: VUClient.Player, ...args: any[]): void;
        static Broadcast(eventName: string, ...args: any[]): void;
        static BroadcastLocal(eventName: string, ...args: any[]): void;
        static SendUnreliableTo(eventName: string, player: VUClient.Player, ...args: any[]): void;
        static SendUnreliableToLocal(eventName: string, player: VUClient.Player, ...args: any[]): void;
        static BroadcastUnreliable(eventName: string, ...args: any[]): void;
        static BroadcastUnreliableLocal(eventName: string, ...args: any[]): void;
        static SendUnreliableOrderedTo(eventName: string, player: VUClient.Player, ...args: any[]): void;
        static SendUnreliableOrderedToLocal(eventName: string, player: VUClient.Player, ...args: any[]): void;
        static BroadcastUnreliableOrdered(eventName: string, ...args: any[]): void;
        static BroadcastUnreliableOrderedLocal(eventName: string, ...args: any[]): void;
        static Unsubscribe(): void;
        static Unsubscribe(eventName: string): void;

    }

    class PlayerManager {

        static GetPlayers(): VUClient.Player[];
        static GetPlayerById(id: number): VUClient.Player | undefined;
        static GetPlayerByOnlineId(onlineId: number): VUClient.Player | undefined;
        static GetPlayerByGuid(guid: VUShared.Guid): VUClient.Player | undefined;
        static GetPlayerByName(name: string): VUClient.Player | undefined;
        static GetPlayersByName(name: string): VUClient.Player[];
        static GetPlayerCount(): number;
        static GetPlayersByTeam(team: FB.TeamId): VUClient.Player[];
        static GetPlayersBySquad(team: FB.TeamId, squad: FB.SquadId): VUClient.Player[];
        static GetSquadLeader(team: FB.TeamId, squad: FB.SquadId): VUClient.Player | undefined;
        static CreatePlayer(name: string, team: FB.TeamId, squad: FB.SquadId): VUClient.Player | undefined;
        static DeletePlayer(player: VUClient.Player): void;
        /**
         * Spectator mode is disabled by default. A mod can choose to enable it by using this function.
         */
        static SetSpectatorEnabled(enabled: boolean): void;
        static IsSpectatorEnabled(): boolean;
        static FadeInAll(fadeTime: number): void;
        static FadeOutAll(fadeTime: number): void;
        static GetSpectatorCount(): number;

    }

    class RCON {

        static SendCommand(command: string): string[];
        static SendCommand(command: string, args: string[]): string[];
        static RegisterCommand(command: string, flags: VUShared.RemoteCommandFlag, callback: Function): number;
        static RegisterCommand(command: string, flags: VUShared.RemoteCommandFlag, context: any, callback: Function): number;
        static DeregisterCommand(handle: number): void;
        static GetServerGuid(): VUShared.Guid | undefined;
        static TriggerEvent(event: string): void;
        static TriggerEvent(event: string, args: string[]): void;

    }

    class ServerUtils {

        /**
         * Sets a custom map name to show in the server browser.
         */
        static SetCustomMapName(name: string): void;
        /**
         * Gets the custom map name shown in the server browser, or `nil` if one is not set.
         */
        static GetCustomMapName(): string | undefined;
        /**
         * Clears any custom map names and reverts to showing the real map name in the server browser.
         */
        static ClearCustomMapName(): void;
        /**
         * Sets a custom game mode name to show in the server browser.
         */
        static SetCustomGameModeName(name: string): void;
        /**
         * Gets the custom game mode name shown in the server browser, or `nil` if one is not set.
         */
        static GetCustomGameModeName(): string | undefined;
        /**
         * Clears any custom game mode names and reverts to showing the real game mode name in the server browser.
         */
        static ClearCustomGameModeName(): void;

    }

    class SQL {

        static Open(): boolean;
        static Close(): void;
        static Query(query: string, ...args: any[]): {} | undefined;
        static Escape(text: string): string;
        static Blob(data: string): VUServer.SQLBlob;
        static Error(): string;
        static AffectedRows(): number;
        static LastInsertId(): number;

    }

    class TeamSquadManager {

        static GetSquadPlayerCount(team: FB.TeamId, squad: FB.SquadId): number;
        static GetTeamPlayerCount(team: FB.TeamId): number;

    }

    class TicketManager {

        static SetTicketCount(team: FB.TeamId, ticketCount: number): boolean;
        static GetTicketCount(team: FB.TeamId): number;
        static GetCurrentRound(): number;
        static GetRoundCount(): number;

    }


    export enum EventsEnum {
        /**
         * @example
         *    Events.Subscribe(EventsEnum.CapturePoint_Captured, (capturePoint: VUShared.Entity) => {});
         */
        CapturePoint_Captured = 'CapturePoint:Captured',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.CapturePoint_Lost, (capturePoint: VUShared.Entity) => {});
         */
        CapturePoint_Lost = 'CapturePoint:Lost',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Engine_Init, () => {});
         */
        Engine_Init = 'Engine:Init',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_Loaded, (levelName: string, gameMode: string, round: number, roundsPerMap: number) => {});
         */
        Level_Loaded = 'Level:Loaded',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Authenticated, (player: VUClient.Player) => {});
         */
        Player_Authenticated = 'Player:Authenticated',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_ChangingWeapon, (player: VUClient.Player) => {});
         */
        Player_ChangingWeapon = 'Player:ChangingWeapon',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Chat, (player: VUClient.Player, recipientMask: number, message: string) => {});
         */
        Player_Chat = 'Player:Chat',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Created, (player: VUClient.Player) => {});
         */
        Player_Created = 'Player:Created',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Destroyed, (player: VUClient.Player) => {});
         */
        Player_Destroyed = 'Player:Destroyed',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_EnteredCapturePoint, (player: VUClient.Player, capturePoint: VUShared.Entity) => {});
         */
        Player_EnteredCapturePoint = 'Player:EnteredCapturePoint',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_InstantSuicide, (player: VUClient.Player) => {});
         */
        Player_InstantSuicide = 'Player:InstantSuicide',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Joining, (name: string, playerGuid: VUShared.Guid, ipAddress: string, accountGuid: VUShared.Guid) => {});
         */
        Player_Joining = 'Player:Joining',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_KickedFromSquad, (player: VUClient.Player, squad: FB.SquadId) => {});
         */
        Player_KickedFromSquad = 'Player:KickedFromSquad',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Killed, (player: VUClient.Player, inflictor: VUClient.Player | undefined, position: VUShared.Vec3, weapon: string, isRoadKill: boolean, isHeadShot: boolean, wasVictimInReviveState: boolean, info: VUClient.DamageGiverInfo) => {});
         */
        Player_Killed = 'Player:Killed',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_KitPickup, (player: VUClient.Player, newCustomization: VUShared.DataContainer) => {});
         */
        Player_KitPickup = 'Player:KitPickup',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Left, (player: VUClient.Player) => {});
         */
        Player_Left = 'Player:Left',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_ManDownRevived, (player: VUClient.Player, reviver: VUClient.Player | undefined, isAdrenalineRevive: boolean) => {});
         */
        Player_ManDownRevived = 'Player:ManDownRevived',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Reload, (player: VUClient.Player, weaponName: string, position: VUShared.Vec3) => {});
         */
        Player_Reload = 'Player:Reload',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Respawn, (player: VUClient.Player) => {});
         */
        Player_Respawn = 'Player:Respawn',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Resupply, (player: VUClient.Player, givenMagsCount: number, supplier: VUClient.Player | undefined) => {});
         */
        Player_Resupply = 'Player:Resupply',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_ReviveAccepted, (player: VUClient.Player, reviver: VUClient.Player | undefined) => {});
         */
        Player_ReviveAccepted = 'Player:ReviveAccepted',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_ReviveRefused, (player: VUClient.Player) => {});
         */
        Player_ReviveRefused = 'Player:ReviveRefused',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SetSquad, (player: VUClient.Player, squad: FB.SquadId) => {});
         */
        Player_SetSquad = 'Player:SetSquad',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SetSquadLeader, (player: VUClient.Player) => {});
         */
        Player_SetSquadLeader = 'Player:SetSquadLeader',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SpawnAtVehicle, (player: VUClient.Player, vehicle: VUShared.Entity) => {});
         */
        Player_SpawnAtVehicle = 'Player:SpawnAtVehicle',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SpawnOnPlayer, (player: VUClient.Player, playerToSpawnOn: VUClient.Player) => {});
         */
        Player_SpawnOnPlayer = 'Player:SpawnOnPlayer',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SpawnOnSelectedSpawnPoint, (player: VUClient.Player) => {});
         */
        Player_SpawnOnSelectedSpawnPoint = 'Player:SpawnOnSelectedSpawnPoint',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SquadChange, (player: VUClient.Player, squad: FB.SquadId) => {});
         */
        Player_SquadChange = 'Player:SquadChange',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SuppressedEnemy, (player: VUClient.Player, enemy: VUClient.Player) => {});
         */
        Player_SuppressedEnemy = 'Player:SuppressedEnemy',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_TeamChange, (player: VUClient.Player, team: FB.TeamId, squad: FB.SquadId) => {});
         */
        Player_TeamChange = 'Player:TeamChange',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Update, (player: VUClient.Player, deltaTime: number) => {});
         */
        Player_Update = 'Player:Update',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_UpdateInput, (player: VUClient.Player, deltaTime: number) => {});
         */
        Player_UpdateInput = 'Player:UpdateInput',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Server_RoundOver, (roundTime: number, winningTeam: FB.TeamId) => {});
         */
        Server_RoundOver = 'Server:RoundOver',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Server_RoundReset, () => {});
         */
        Server_RoundReset = 'Server:RoundReset',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Soldier_HealthAction, (soldier: VUClient.SoldierEntity, action: VUShared.HealthStateAction) => {});
         */
        Soldier_HealthAction = 'Soldier:HealthAction',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Soldier_ManDown, (soldier: VUClient.SoldierEntity, inflictor: VUClient.Player | undefined) => {});
         */
        Soldier_ManDown = 'Soldier:ManDown',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Soldier_PrePhysicsUpdate, (soldier: VUClient.SoldierEntity, deltaTime: number) => {});
         */
        Soldier_PrePhysicsUpdate = 'Soldier:PrePhysicsUpdate',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_Damage, (vehicle: VUShared.Entity, damage: number, info: VUClient.DamageGiverInfo | undefined) => {});
         */
        Vehicle_Damage = 'Vehicle:Damage',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_Destroyed, (vehicle: VUShared.Entity, vehiclePoints: number, hotTeam: FB.TeamId) => {});
         */
        Vehicle_Destroyed = 'Vehicle:Destroyed',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_Disabled, (vehicle: VUShared.Entity) => {});
         */
        Vehicle_Disabled = 'Vehicle:Disabled',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_Enter, (vehicle: VUShared.Entity, player: VUClient.Player) => {});
         */
        Vehicle_Enter = 'Vehicle:Enter',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_Exit, (vehicle: VUShared.Entity, player: VUClient.Player) => {});
         */
        Vehicle_Exit = 'Vehicle:Exit',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_SpawnDone, (vehicle: VUShared.Entity) => {});
         */
        Vehicle_SpawnDone = 'Vehicle:SpawnDone',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Vehicle_Unspawn, (vehicle: VUShared.Entity) => {});
         */
        Vehicle_Unspawn = 'Vehicle:Unspawn',

    }
    export enum HooksEnum {
        /**
         * @example
         *    Hooks.Install(HooksEnum.BulletEntity_Collision, (entity: VUShared.Entity, hit: VUShared.RayCastHit, giverInfo: VUClient.DamageGiverInfo) => {});
         */
        BulletEntity_Collision = 'BulletEntity:Collision',

        /**
         * @example
         *    Hooks.Install(HooksEnum.EntityFactory_Create, (entityData: VUShared.DataContainer, transform: VUShared.LinearTransform) => {});
         */
        EntityFactory_Create = 'EntityFactory:Create',

        /**
         * @example
         *    Hooks.Install(HooksEnum.EntityFactory_CreateFromBlueprint, (blueprint: VUShared.DataContainer, transform: VUShared.LinearTransform, variation: number, parentRepresentative: VUShared.DataContainer | undefined) => {});
         */
        EntityFactory_CreateFromBlueprint = 'EntityFactory:CreateFromBlueprint',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Player_FindBestSquad, (player: VUClient.Player) => {});
         */
        Player_FindBestSquad = 'Player:FindBestSquad',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Player_RequestJoin, (joinMode: string, accountGuid: VUShared.Guid, playerGuid: VUShared.Guid, playerName: string) => {});
         */
        Player_RequestJoin = 'Player:RequestJoin',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Player_SelectTeam, (player: VUClient.Player, team: FB.TeamId) => {});
         */
        Player_SelectTeam = 'Player:SelectTeam',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Server_SuppressEnemies, (suppressionModifier: number) => {});
         */
        Server_SuppressEnemies = 'Server:SuppressEnemies',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Soldier_Damage, (soldier: VUClient.SoldierEntity, info: VUClient.DamageInfo, giverInfo: VUClient.DamageGiverInfo | undefined) => {});
         */
        Soldier_Damage = 'Soldier:Damage',

    }

} // end declare namespace VUServer

declare namespace VUClient {
    class AimingSimulation {

        readonly aimAssist: VUShared.AimAssist | undefined;
        data: VUShared.DataContainer | undefined;
        sway: VUShared.Vec2;
        yaw: number;
        pitch: number;
        aimYawTimer: number;
        aimPitchTimer: number;
        zoomTransitionTime: number;
        fovMultiplier: number;
        fovTransitionTimer: number;
        fadeTimer: number;
        currentZoomTransitionTime: number;
        currentFovTransitionTime: number;
        zoomLevel: number;
        oldZoomLevel: number;
        switchToZoomLevel: number;
        zoomLevelLocked: boolean;
        zoomDisabled: boolean;
        trySwitchOnNextUpdate: boolean;
        forceZoom: boolean;

    }

    class CameraParamsData {

        constructor();

        viewDistance: number;
        nearPlane: number;
        sunShadowmapViewDistance: number;

        Clone(): VUClient.CameraParamsData;

    }

    class CapturePointEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly contested: boolean;
        readonly team: FB.TeamId;
        readonly attackingTeam: FB.TeamId;
        readonly location: number;
        readonly name: string;
        readonly captureEnabled: boolean;
        readonly attacked: boolean;
        readonly controlled: boolean;

    }

    class CharacterLightingData {

        constructor();

        bottomLight: VUShared.Vec3;
        topLight: VUShared.Vec3;
        characterLightingMode: FB.CharacterLightingMode;
        cameraUpRotation: number;
        topLightDirY: number;
        blendFactor: number;
        topLightDirX: number;
        lockToCameraDirection: boolean;
        firstPersonEnable: boolean;
        characterLightEnable: boolean;

        Clone(): VUClient.CharacterLightingData;

    }

    class ClientDoublePlayerEvent extends VUClient.ClientPlayerEvent {

        constructor(eventId: number, player: VUClient.Player, extraPlayer: VUClient.Player);
        constructor(eventName: string, player: VUClient.Player, extraPlayer: VUClient.Player);

        extraPlayer: VUClient.Player;

    }

    class ClientPlayerEvent extends VUShared.EntityEvent {

        constructor(eventId: number, player: VUClient.Player);
        constructor(eventName: string, player: VUClient.Player);

        player: VUClient.Player;

    }

    class CollisionInfo {

        constructor();

        entity: VUShared.Entity | undefined;
        material: VUShared.DataContainer | undefined;
        ownMaterial: VUShared.DataContainer | undefined;
        position: VUShared.Vec3;
        normal: VUShared.Vec3;
        speed: number;
        part: number;
        isInstantlyDestructible: boolean;

    }

    class ColorCorrectionData {

        constructor();

        contrast: VUShared.Vec3;
        saturation: VUShared.Vec3;
        brightness: VUShared.Vec3;
        hue: number;
        colorGradingTexture: FB.TextureAsset | undefined;
        colorGradingEnable: boolean;
        enable: boolean;

        Clone(): VUClient.ColorCorrectionData;

    }

    class ConceptCache {

        constructor();

        GetLevel(concept: FB.InputConceptIdentifiers): number;
        SetLevel(concept: FB.InputConceptIdentifiers, level: number): void;

    }

    class ConsoleCommand {

        readonly name: string;
        readonly description: string;
        readonly groupName: string;

        Deregister(): void;

    }

    class ControllableEntity extends VUClient.PhysicsEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);
        constructor(other: VUClient.PhysicsEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly entryCount: number;
        readonly teamId: FB.TeamId;
        readonly defaultTeamId: FB.TeamId;

        GetPlayerInEntry(entryId: number): VUClient.Player | undefined;
        GetDataForEntry(entryId: number): VUShared.DataContainer | undefined;

    }

    class DamageEffectData {

        constructor();

        rightDamage: VUShared.Vec4;
        topDamage: VUShared.Vec4;
        leftDamage: VUShared.Vec4;
        bottomDamage: VUShared.Vec4;
        outerFrameOpacity: number;
        innerFrameOpacity: number;
        frameWidth: number;
        shader: FB.SurfaceShaderBaseAsset | undefined;
        startCriticalEffectHealthThreshold: number;
        endCriticalEffectHealthThreshold: number;
        minDamagePercentageThreshold: number;
        fallofTime: number;
        maxOpacityDamagePercentage: number;
        debugDamage: boolean;

        Clone(): VUClient.DamageEffectData;

    }

    class DamageGiverInfo {

        constructor();

        giver: VUClient.Player | undefined;
        weaponUnlock: VUShared.DataContainer | undefined;

    }

    class DamageInfo {

        constructor();

        position: VUShared.Vec3;
        direction: VUShared.Vec3;
        origin: VUShared.Vec3;
        damage: number;
        distributeDamageOverTime: number;
        boneIndex: number;
        hitDirection: number;
        isBulletDamage: boolean;

    }

    class DebugData {

        constructor();

        debugTexture: FB.TextureAsset | undefined;
        fullscreen: boolean;
        enable: boolean;

        Clone(): VUClient.DebugData;

    }

    class DebugVertex {

        constructor();
        constructor(pos: VUShared.Vec3, color: VUShared.Vec4);

        pos: VUShared.Vec3;
        color: VUShared.Vec4;

    }

    class DofData {

        constructor();

        nearDistanceScale: number;
        focusDistance: number;
        blurFilter: FB.BlurFilter;
        blurFilterDeviation: number;
        farDistanceScale: number;
        blurAdd: number;
        scale: number;
        diffusionDofFocalLength: number;
        diffusionDofAperture: number;
        diffusionDofEnable: boolean;
        enable: boolean;

        Clone(): VUClient.DofData;

    }

    class DynamicAOData {

        constructor();

        ssaoMaxDistanceOuter: number;
        ssaoFade: number;
        ssaoRadius: number;
        ssaoMaxDistanceInner: number;
        hbaoRadius: number;
        hbaoAttenuation: number;
        hbaoAngleBias: number;
        hbaoPowerExponent: number;
        hbaoContrast: number;
        hbaoMaxFootprintRadius: number;
        enable: boolean;

        Clone(): VUClient.DynamicAOData;

    }

    class DynamicEnvmapData {

        constructor();

        keyColorEnvmap: VUShared.Vec3;
        groundColorEnvmap: VUShared.Vec3;
        skyColorEnvmap: VUShared.Vec3;
        enable: boolean;

        Clone(): VUClient.DynamicEnvmapData;

    }

    class EffectParams {

        constructor();

        readonly size: number;

        SetBool(name: string, value: boolean): void;
        SetInt(name: string, value: number): void;
        SetFloat(name: string, value: number): void;
        SetVec4(name: string, value: VUShared.Vec4): void;
        GetBool(name: string): boolean;
        GetInt(name: string): number;
        GetFloat(name: string): number;
        GetVec4(name: string): VUShared.Vec4;
        HasBool(name: string): boolean;
        HasInt(name: string): boolean;
        HasFloat(name: string): boolean;
        HasVec4(name: string): boolean;

    }

    class EnlightenData {

        constructor();

        skyBoxSkyColor: VUShared.Vec3;
        skyBoxBackLightColor: VUShared.Vec3;
        skyBoxGroundColor: VUShared.Vec3;
        terrainColor: VUShared.Vec3;
        skyBoxSunLightColor: VUShared.Vec3;
        bounceScale: number;
        cullDistance: number;
        sunScale: number;
        skyBoxBackLightRotationY: number;
        skyBoxSunLightColorSize: number;
        skyBoxBackLightColorSize: number;
        skyBoxBackLightRotationX: number;
        skyBoxEnable: boolean;
        enable: boolean;

        Clone(): VUClient.EnlightenData;

    }

    class ExplosionEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        Detonate(transform: VUShared.LinearTransform, impactNormal: VUShared.Vec3, damageMultiplier: number, shooterPlayer: VUClient.Player | undefined): void;

    }

    class FilmGrainData {

        constructor();

        colorScale: VUShared.Vec3;
        textureScale: VUShared.Vec2;
        texture: FB.TextureAsset | undefined;
        linearFilteringEnable: boolean;
        randomEnable: boolean;
        enable: boolean;

        Clone(): VUClient.FilmGrainData;

    }

    class FogData {

        constructor();

        curve: VUShared.Vec4;
        fogColorCurve: VUShared.Vec4;
        fogColor: VUShared.Vec3;
        fogColorStart: number;
        fogDistanceMultiplier: number;
        endValue: number;
        transparencyFadeStart: number;
        start: number;
        transparencyFadeEnd: number;
        fogColorEnd: number;
        transparencyFadeClamp: number;
        heightFogVisibilityRange: number;
        heightFogAltitude: number;
        heightFogDepth: number;
        heightFogFollowCamera: number;
        fogGradientEnable: boolean;
        enable: boolean;
        heightFogEnable: boolean;
        fogColorEnable: boolean;

        Clone(): VUClient.FogData;

    }

    class GameEntity extends VUShared.SpatialEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);

        Spawn(transform: VUShared.LinearTransform, fireEnableEvent: boolean): void;
        RegisterSpawnCallback(callback: Function): number;
        RegisterSpawnCallback(context: any, callback: Function): number;
        UnregisterSpawnCallback(handle: number): void;
        RegisterUnspawnCallback(callback: Function): number;
        RegisterUnspawnCallback(context: any, callback: Function): number;
        UnregisterUnspawnCallback(handle: number): void;

    }

    class KillCounterEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly killCount: number;
        readonly maxKillCount: number;

    }

    class LensScopeData {

        constructor();

        chromaticAberrationColor1: VUShared.Vec3;
        radialBlendDistanceCoefficients: VUShared.Vec2;
        chromaticAberrationColor2: VUShared.Vec3;
        blurCenter: VUShared.Vec2;
        chromaticAberrationDisplacement2: VUShared.Vec2;
        chromaticAberrationDisplacement1: VUShared.Vec2;
        chromaticAberrationStrengths: VUShared.Vec2;
        blurScale: number;
        enable: boolean;

        Clone(): VUClient.LensScopeData;

    }

    class LifeCounterEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly startingLifeCounter: number;
        readonly lifeCounter: number;
        readonly reinforceCounter: number;
        readonly objectiveAliveCount: number;
        readonly baseAliveCount: number;

    }

    class MotionBlurData {

        constructor();

        cutoffGradientScale: number;
        motionBlurCutoffRadius: number;
        motionBlurEnable: boolean;

        Clone(): VUClient.MotionBlurData;

    }

    class NetEvent {

        Unsubscribe(): void;

    }

    class OutdoorLightData {

        constructor();

        sunColor: VUShared.Vec3;
        cloudShadowSpeed: VUShared.Vec2;
        skyColor: VUShared.Vec3;
        groundColor: VUShared.Vec3;
        sunRotationY: number;
        sunRotationX: number;
        skyLightAngleFactor: number;
        sunSpecularScale: number;
        skyEnvmapShadowScale: number;
        sunShadowHeightScale: number;
        cloudShadowCoverage: number;
        cloudShadowTexture: FB.TextureAsset | undefined;
        translucencyDistortion: number;
        cloudShadowSize: number;
        translucencyAmbient: number;
        cloudShadowExponent: number;
        translucencyScale: number;
        translucencyPower: number;
        enable: boolean;
        cloudShadowEnable: boolean;

        Clone(): VUClient.OutdoorLightData;

    }

    class PhysicsEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        internalHealth: number;
        readonly velocity: VUShared.Vec3;
        readonly defaultMaterial: VUShared.DataContainer | undefined;
        readonly belongsInPhysicsWorld: boolean;
        readonly isAnimatable: boolean;
        readonly physicsEntityBase: VUShared.PhysicsEntityBase | undefined;

        GetMaterial(position: VUShared.Vec3): VUShared.DataContainer | undefined;
        ReenablePart(partId: number): void;
        ApplyImpulse(impulseData: VUShared.ImpulseData): void;
        RegisterCollisionCallback(callback: Function): number;
        RegisterCollisionCallback(context: any, callback: Function): number;
        UnregisterCollisionCallback(handle: number): void;
        RegisterDamageCallback(callback: Function): number;
        RegisterDamageCallback(context: any, callback: Function): number;
        UnregisterDamageCallback(handle: number): void;
        RegisterImpulseCallback(callback: Function): number;
        RegisterImpulseCallback(context: any, callback: Function): number;
        UnregisterImpulseCallback(handle: number): void;

    }

    class PlanarReflectionData {

        constructor();

        verticalBlurFilter: FB.BlurFilter;
        horizontalDeviation: number;
        groundHeight: number;
        verticalDeviation: number;
        horizontalBlurFilter: FB.BlurFilter;
        skyRenderEnable: boolean;
        enable: boolean;

        Clone(): VUClient.PlanarReflectionData;

    }

    class Player {

        readonly name: string;
        readonly id: number;
        readonly onlineId: number;
        readonly teamId: FB.TeamId;
        readonly squadId: FB.SquadId;
        readonly inVehicle: boolean;
        readonly soldier: VUClient.SoldierEntity | undefined;
        readonly corpse: VUClient.SoldierEntity | undefined;
        readonly attachedControllable: VUClient.ControllableEntity | undefined;
        readonly controlledControllable: VUClient.ControllableEntity | undefined;
        readonly isSquadLeader: boolean;
        readonly alive: boolean;
        readonly kills: number;
        readonly deaths: number;
        readonly time: number;
        readonly score: number;
        readonly input: VUShared.EntryInput | undefined;
        readonly controlledEntryId: number;
        /**
         * The CharacterCustomizationAsset currently applied to this player's soldier.
         */
        readonly customization: VUShared.DataContainer | undefined;
        /**
         * A table of specializations (UnlockAssetBase) this player currently has equipped.
         */
        readonly selectedUnlocks: VUShared.DataContainer[];
        /**
         * The players ping to the server.
         */
        readonly ping: number;
        readonly isSquadPrivate: boolean;

        EnableInput(action: FB.EntryInputActionEnum, enable: boolean): void;

    }

    class RagdollComponent {

        readonly data: VUShared.DataContainer | undefined;

        GetLocalTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetLocalTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetWorldTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetWorldTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetRenderTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetRenderTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetInterpolatedLocalTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetInterpolatedLocalTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetInterpolatedWorldTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetInterpolatedWorldTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetActiveWorldTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetActiveWorldTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetActiveLocalTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetActiveLocalTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetLocalTransform(boneId: number): VUShared.QuatTransform | undefined;
        SetLocalTransform(boneId: number, transform: VUShared.QuatTransform): void;
        GetBoneVelocity(boneId: number): VUShared.QuatTransform | undefined;
        SetBoneVelocity(boneId: number, transform: VUShared.QuatTransform): void;

    }

    class ScreenEffectData {

        constructor();

        screenEffectParams: VUShared.Vec4;
        frameType: FB.ScreenEffectFrameType;
        shader: FB.SurfaceShaderBaseAsset | undefined;
        frameWidth: number;
        outerFrameOpacity: number;
        innerFrameOpacity: number;
        angle: number;

        Clone(): VUClient.ScreenEffectData;

    }

    class ShaderParamsData {

        constructor();

        value: VUShared.Vec4;
        parameterName: string;

        Clone(): VUClient.ShaderParamsData;

    }

    class SkyData {

        constructor();

        cloudLayerSunColor: VUShared.Vec3;
        cloudLayer2Color: VUShared.Vec3;
        cloudLayer1Color: VUShared.Vec3;
        skyGradientTexture: FB.TextureAsset | undefined;
        sunSize: number;
        brightnessScale: number;
        sunScale: number;
        panoramicUVMaxX: number;
        panoramicUVMinY: number;
        panoramicUVMaxY: number;
        panoramicUVMinX: number;
        panoramicTexture: FB.TextureAsset | undefined;
        panoramicAlphaTexture: FB.TextureAsset | undefined;
        panoramicTileFactor: number;
        cloudLayerMaskTexture: FB.TextureAsset | undefined;
        cloudLayer1Altitude: number;
        cloudLayer1TileFactor: number;
        cloudLayer1Rotation: number;
        cloudLayer1Speed: number;
        cloudLayer1SunLightIntensity: number;
        panoramicRotation: number;
        cloudLayer1AmbientLightIntensity: number;
        cloudLayer1SunLightPower: number;
        cloudLayer1AlphaMul: number;
        cloudLayer1Texture: FB.TextureAsset | undefined;
        cloudLayer2Altitude: number;
        cloudLayer2TileFactor: number;
        cloudLayer2Rotation: number;
        cloudLayer2Speed: number;
        cloudLayer2SunLightIntensity: number;
        cloudLayer2SunLightPower: number;
        cloudLayer2AmbientLightIntensity: number;
        staticEnvmapScale: number;
        cloudLayer2AlphaMul: number;
        cloudLayer2Texture: FB.TextureAsset | undefined;
        staticEnvmapTexture: FB.TextureAsset | undefined;
        skyVisibilityExponent: number;
        skyEnvmap8BitTexScale: number;
        customEnvmapTexture: FB.TextureAsset | undefined;
        customEnvmapScale: number;
        customEnvmapAmbient: number;
        enable: boolean;

        Clone(): VUClient.SkyData;

    }

    class SoldierEntity extends VUClient.ControllableEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);
        constructor(other: VUClient.PhysicsEntity);
        constructor(other: VUClient.ControllableEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly worldTransform: VUShared.LinearTransform;
        readonly alive: boolean;
        readonly deathTimer: number;
        readonly player: VUClient.Player | undefined;
        readonly health: number;
        authoritativeYaw: number;
        authoritativePitch: number;
        aimingEnable: boolean;
        forceInvisible: boolean;
        sprintRecoveryTimer: number;
        wasSprinting: boolean;
        readonly weaponsComponent: VUClient.SoldierWeaponsComponent;
        readonly ragdollComponent: VUClient.RagdollComponent;
        readonly isManDown: boolean;
        readonly isAlive: boolean;
        readonly isDead: boolean;
        readonly isDying: boolean;
        readonly isInteractiveManDown: boolean;
        readonly isFiring: boolean;
        readonly isReloading: boolean;
        readonly pose: FB.CharacterPoseType;
        readonly pendingPose: FB.CharacterPoseType;

        SetPosition(position: VUShared.Vec3): void;

    }

    class SoldierWeapon extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly weaponModifier: FB.WeaponModifier | undefined;
        readonly correctedWeaponFiring: VUShared.WeaponFiring | undefined;
        readonly predictedWeaponFiring: VUShared.WeaponFiring | undefined;
        readonly aimingSimulation: VUClient.AimingSimulation | undefined;
        readonly name: string;
        readonly primaryAmmo: number;
        readonly secondaryAmmo: number;
        readonly fireLogic: FB.FireLogicType;

    }

    class SoldierWeaponsComponent {

        readonly weaponTransform: VUShared.LinearTransform;
        readonly isZooming: boolean;
        readonly currentWeapon: VUClient.SoldierWeapon;
        readonly weapons: VUClient.SoldierWeapon[];
        readonly currentWeaponSlot: FB.WeaponSlot;

    }

    class SoundEntity extends VUShared.Entity {

        constructor(other: VUShared.Entity);

        static typeInfo: VUShared.TypeInformation;

        Play(): void;
        Pause(): void;

    }

    class SunFlareData {

        constructor();

        element5AlphaScreenPosCurve: VUShared.Vec4;
        element5AlphaOccluderCurve: VUShared.Vec4;
        element5SizeScreenPosCurve: VUShared.Vec4;
        element2SizeOccluderCurve: VUShared.Vec4;
        element5SizeOccluderCurve: VUShared.Vec4;
        element2AlphaOccluderCurve: VUShared.Vec4;
        element2AlphaScreenPosCurve: VUShared.Vec4;
        element1Size: VUShared.Vec2;
        element1SizeOccluderCurve: VUShared.Vec4;
        element1SizeScreenPosCurve: VUShared.Vec4;
        element1AlphaOccluderCurve: VUShared.Vec4;
        element1AlphaScreenPosCurve: VUShared.Vec4;
        element5Size: VUShared.Vec2;
        element4SizeOccluderCurve: VUShared.Vec4;
        element3Size: VUShared.Vec2;
        element2Size: VUShared.Vec2;
        element4AlphaScreenPosCurve: VUShared.Vec4;
        element2SizeScreenPosCurve: VUShared.Vec4;
        element4SizeScreenPosCurve: VUShared.Vec4;
        element4Size: VUShared.Vec2;
        element3AlphaScreenPosCurve: VUShared.Vec4;
        element4AlphaOccluderCurve: VUShared.Vec4;
        element3SizeOccluderCurve: VUShared.Vec4;
        element3SizeScreenPosCurve: VUShared.Vec4;
        element3AlphaOccluderCurve: VUShared.Vec4;
        element1Shader: FB.SurfaceShaderBaseAsset | undefined;
        occluderSize: number;
        element2Shader: FB.SurfaceShaderBaseAsset | undefined;
        element3RayDistance: number;
        element4Shader: FB.SurfaceShaderBaseAsset | undefined;
        element4RayDistance: number;
        element2RayDistance: number;
        element1RayDistance: number;
        element5RayDistance: number;
        element3Shader: FB.SurfaceShaderBaseAsset | undefined;
        element5Shader: FB.SurfaceShaderBaseAsset | undefined;
        element5Enable: boolean;
        element3Enable: boolean;
        element2Enable: boolean;
        element1Enable: boolean;
        debugDrawOccluder: boolean;
        enable: boolean;
        element4Enable: boolean;

        Clone(): VUClient.SunFlareData;

    }

    class TicketCounterEntity extends VUClient.GameEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);
        constructor(other: VUClient.GameEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly team: FB.TeamId;
        readonly ticketCount: number;
        readonly initialTicketCount: number;

    }

    class TonemapData {

        constructor();

        bloomScale: VUShared.Vec3;
        tonemapMethod: FB.TonemapMethod;
        minExposure: number;
        middleGray: number;
        exposureAdjustTime: number;
        maxExposure: number;
        chromostereopsisOffset: number;
        chromostereopsisScale: number;
        chromostereopsisEnable: boolean;

        Clone(): VUClient.TonemapData;

    }

    class VignetteData {

        constructor();

        scale: VUShared.Vec2;
        color: VUShared.Vec3;
        exponent: number;
        opacity: number;
        enable: boolean;

        Clone(): VUClient.VignetteData;

    }

    class VisualEnvironmentState {

        constructor();
        constructor(name: string);

        readonly entityName: string;
        visibility: number;
        priority: number;
        overrideVisibility: boolean;
        excluded: boolean;
        activeEffectPosition: VUShared.Vec3;
        readonly stateId: number;
        outdoorLight: VUClient.OutdoorLightData | undefined;
        enlighten: VUClient.EnlightenData | undefined;
        tonemap: VUClient.TonemapData | undefined;
        colorCorrection: VUClient.ColorCorrectionData | undefined;
        sky: VUClient.SkyData | undefined;
        fog: VUClient.FogData | undefined;
        wind: VUClient.WindData | undefined;
        sunFlare: VUClient.SunFlareData | undefined;
        dynamicAO: VUClient.DynamicAOData | undefined;
        dof: VUClient.DofData | undefined;
        vignette: VUClient.VignetteData | undefined;
        filmGrain: VUClient.FilmGrainData | undefined;
        lensScope: VUClient.LensScopeData | undefined;
        cameraParams: VUClient.CameraParamsData | undefined;
        screenEffect: VUClient.ScreenEffectData | undefined;
        damageEffect: VUClient.DamageEffectData | undefined;
        planarReflection: VUClient.PlanarReflectionData | undefined;
        dynamicEnvmap: VUClient.DynamicEnvmapData | undefined;
        characterLighting: VUClient.CharacterLightingData | undefined;
        motionBlur: VUClient.MotionBlurData | undefined;
        debug: VUClient.DebugData | undefined;
        readonly shaderParams: VUClient.ShaderParamsData[];

        AddShaderParams(params: VUClient.ShaderParamsData): void;
        RemoveShaderParamsAt(index: number): void;

    }

    class WindData {

        constructor();

        windDirection: number;
        windStrength: number;

        Clone(): VUClient.WindData;

    }

    class ChatManager {

        static SendMessage(message: string): boolean;
        static SendMessage(message: string, toTeam: FB.TeamId): boolean;
        static SendMessage(message: string, toTeam: FB.TeamId, toSquad: FB.SquadId): boolean;

    }

    class ClientUtils {

        static GetCameraTransform(): VUShared.LinearTransform | undefined;
        static WorldToScreen(worldPos: VUShared.Vec3): VUShared.Vec2 | undefined;
        static ScreenToWorld(mousePos: VUShared.Vec2): VUShared.Vec3 | undefined;
        static GetWindowSize(): VUShared.Vec2 | undefined;
        static PopScreen(graphAsset: VUShared.DataContainer, screensToPop: number): boolean;

    }

    class Console {

        static Register(name: string, description: string, callback: Function): VUClient.ConsoleCommand;
        static Register(name: string, description: string, context: any, callback: Function): VUClient.ConsoleCommand;
        static Deregister(name: string): boolean;
        static Deregister(command: VUClient.ConsoleCommand): boolean;
        static DeregisterAll(): void;

    }

    class DebugRenderer {

        static DrawLine(from: VUShared.Vec3, to: VUShared.Vec3, colorFrom: VUShared.Vec4, colorTo: VUShared.Vec4): void;
        static DrawTriangle(pos1: VUShared.Vec3, pos2: VUShared.Vec3, pos3: VUShared.Vec3, color1: VUShared.Vec4, color2: VUShared.Vec4, color3: VUShared.Vec4): void;
        static DrawSphere(pos: VUShared.Vec3, radius: number, color: VUShared.Vec4, renderLines: boolean, smallSizeSegmentDecrease: boolean): void;
        static DrawLine2D(from: VUShared.Vec2, to: VUShared.Vec2, color: VUShared.Vec4): void;
        static DrawText2D(x: number, y: number, text: string, color: VUShared.Vec4, scale: number): void;
        static DrawVertices(type: VUShared.DebugGeometryType, vertices: VUClient.DebugVertex[]): void;
        static DrawOBB(aabb: VUShared.AxisAlignedBox, transform: VUShared.LinearTransform, color: VUShared.Vec4): void;

    }

    class EffectManager {

        static PlayEffect(asset: VUShared.DataContainer, transform: VUShared.LinearTransform, params: VUClient.EffectParams, firstPersonEffect: boolean): number;
        static StopEffect(handle: number): void;
        static ResetEffect(handle: number): void;
        static SetEffectParameterBool(handle: number, name: string, value: boolean): void;
        static SetEffectParameterInt(handle: number, name: string, value: number): void;
        static SetEffectParameterFloat(handle: number, name: string, value: number): void;
        static SetEffectTransform(handle: number, transform: VUShared.LinearTransform): void;
        static IsEffectPlaying(handle: number): boolean;
        static IsEffectDead(handle: number): boolean;
        static DisableEffects(disableTimer: number): void;
        static Clear(): void;

    }

    class InputManager {

        static GetLevel(concept: FB.InputConceptIdentifiers): number;
        static IsDown(concept: FB.InputConceptIdentifiers): boolean;
        static WentDown(concept: FB.InputConceptIdentifiers): boolean;
        static WentUp(concept: FB.InputConceptIdentifiers): boolean;
        static IsKeyDown(key: FB.InputDeviceKeys): boolean;
        static WentKeyDown(key: FB.InputDeviceKeys): boolean;
        static WentKeyUp(key: FB.InputDeviceKeys): boolean;
        static IsMouseButtonDown(button: FB.InputDeviceMouseButtons): boolean;
        static WentMouseButtonDown(button: FB.InputDeviceMouseButtons): boolean;
        static WentMouseButtonUp(button: FB.InputDeviceMouseButtons): boolean;
        static GetMouseLevel(axes: FB.InputDeviceAxes): number;
        static GetCursorPosition(): VUShared.Vec2;
        static SetCursorPosition(x: number, y: number): void;
        static IsMouseActive(): boolean;
        static GetMouseSensitivity(): number;
        static SetMouseSensitivity(sensitivity: number): void;

    }

    class NetEvents {

        static Subscribe(eventName: string, callback: Function): VUClient.NetEvent;
        static Subscribe(eventName: string, context: any, callback: Function): VUClient.NetEvent;
        static Send(eventName: string, ...args: any[]): void;
        static SendLocal(eventName: string, ...args: any[]): void;
        static SendUnreliable(eventName: string, ...args: any[]): void;
        static SendUnreliableLocal(eventName: string, ...args: any[]): void;
        static SendUnreliableOrdered(eventName: string, ...args: any[]): void;
        static SendUnreliableOrderedLocal(eventName: string, ...args: any[]): void;
        static Unsubscribe(): void;
        static Unsubscribe(eventName: string): void;

    }

    class PlayerManager {

        static GetPlayers(): VUClient.Player[];
        static GetPlayersByTeam(team: FB.TeamId): VUClient.Player[];
        static GetPlayersBySquad(team: FB.TeamId, squad: FB.SquadId): VUClient.Player[];
        static GetPlayerById(id: number): VUClient.Player | undefined;
        static GetPlayerByOnlineId(onlineId: number): VUClient.Player | undefined;
        static GetPlayerByName(name: string): VUClient.Player | undefined;
        static GetPlayersByName(name: string): VUClient.Player[];
        static GetPlayerCount(): number;
        static GetLocalPlayer(): VUClient.Player | undefined;
        static GetSpectatorCount(): number;

    }

    class RaycastManager {

        static GetEntityInRaycast(distance: number): VUShared.Entity | undefined;
        static Raycast(from: VUShared.Vec3, to: VUShared.Vec3, flags: VUShared.RayCastFlags): VUShared.RayCastHit | undefined;
        static SpatialRaycast(from: VUShared.Vec3, to: VUShared.Vec3, flags: VUShared.SpatialQueryFlags): VUShared.Entity[];
        static DetailedRaycast(from: VUShared.Vec3, to: VUShared.Vec3, maxHits: number, materialFlags: VUShared.MaterialFlags, flags: VUShared.RayCastFlags): VUShared.RayCastHit[];

    }

    class SpectatorManager {

        static GetSpectating(): boolean;
        static SetSpectating(spectating: boolean): void;
        static SpectatePlayer(player: VUClient.Player, firstPerson: boolean): void;
        static GetSpectatedPlayer(): VUClient.Player | undefined;
        static GetCameraMode(): VUShared.SpectatorCameraMode;
        static SetCameraMode(mode: VUShared.SpectatorCameraMode): void;
        static GetFreecameraTransform(): VUShared.LinearTransform | undefined;
        static SetFreecameraTransform(transform: VUShared.LinearTransform): void;

    }

    class VisualEnvironmentManager {

        static GetStates(): VUClient.VisualEnvironmentState[];
        static GetDirty(): boolean;
        static SetDirty(dirty: boolean): void;
        static GetSunRotationX(): number;
        static SetSunRotationX(rotation: number): void;
        static GetSunRotationY(): number;
        static SetSunRotationY(rotation: number): void;
        static GetSunRotationOffsetX(): number;
        static SetSunRotationOffsetX(rotation: number): void;
        static GetSunRotationOffsetY(): number;
        static SetSunRotationOffsetY(rotation: number): void;
        static AddState(state: VUClient.VisualEnvironmentState): void;
        static RemoveState(state: VUClient.VisualEnvironmentState): void;

    }

    class WebUI {

        static Init(): void;
        static Show(): void;
        static Hide(): void;
        static BringToFront(): void;
        static SendToBack(): void;
        static EnableKeyboard(): void;
        static EnableMouse(): void;
        static DisableKeyboard(): void;
        static DisableMouse(): void;
        static ResetKeyboard(): void;
        static ResetMouse(): void;
        static ExecuteJS(script: string): void;
        static QuoteString(string: string): string;
        static GetScreenWidth(): number;
        static GetScreenHeight(): number;

    }


    export enum EventsEnum {
        /**
         * @example
         *    Events.Subscribe(EventsEnum.Client_PostFrameUpdate, (deltaTime: number) => {});
         */
        Client_PostFrameUpdate = 'Client:PostFrameUpdate',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Client_UpdateInput, (deltaTime: number) => {});
         */
        Client_UpdateInput = 'Client:UpdateInput',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.FPSCamera_Update, (deltaTime: number) => {});
         */
        FPSCamera_Update = 'FPSCamera:Update',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.FreeCam_PostFrameUpdate, (deltaTime: number) => {});
         */
        FreeCam_PostFrameUpdate = 'FreeCam:PostFrameUpdate',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_Finalized, (levelName: string, gameMode: string) => {});
         */
        Level_Finalized = 'Level:Finalized',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_Loaded, (levelName: string, gameMode: string) => {});
         */
        Level_Loaded = 'Level:Loaded',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Connected, (player: VUClient.Player) => {});
         */
        Player_Connected = 'Player:Connected',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Deleted, (player: VUClient.Player) => {});
         */
        Player_Deleted = 'Player:Deleted',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Killed, (player: VUClient.Player) => {});
         */
        Player_Killed = 'Player:Killed',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_Respawn, (player: VUClient.Player) => {});
         */
        Player_Respawn = 'Player:Respawn',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SetSquadLeader, (player: VUClient.Player) => {});
         */
        Player_SetSquadLeader = 'Player:SetSquadLeader',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_SquadChange, (player: VUClient.Player, squad: FB.SquadId) => {});
         */
        Player_SquadChange = 'Player:SquadChange',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_TeamChange, (player: VUClient.Player, team: FB.TeamId, squad: FB.SquadId) => {});
         */
        Player_TeamChange = 'Player:TeamChange',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Player_UpdateInput, (player: VUClient.Player, deltaTime: number) => {});
         */
        Player_UpdateInput = 'Player:UpdateInput',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Soldier_HealthAction, (soldier: VUClient.SoldierEntity, action: VUShared.HealthStateAction) => {});
         */
        Soldier_HealthAction = 'Soldier:HealthAction',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Soldier_Spawn, (soldier: VUClient.SoldierEntity) => {});
         */
        Soldier_Spawn = 'Soldier:Spawn',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.UI_DrawHud, () => {});
         */
        UI_DrawHud = 'UI:DrawHud',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.VE_StateAdded, (state: VUClient.VisualEnvironmentState) => {});
         */
        VE_StateAdded = 'VE:StateAdded',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.VE_StateRemoved, (state: VUClient.VisualEnvironmentState) => {});
         */
        VE_StateRemoved = 'VE:StateRemoved',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.VE_StatesCleared, () => {});
         */
        VE_StatesCleared = 'VE:StatesCleared',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.VU_Spec_PostUpdate, (deltaTime: number) => {});
         */
        VU_Spec_PostUpdate = 'VU:Spec:PostUpdate',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.VU_Spec_PreUpdate, (deltaTime: number) => {});
         */
        VU_Spec_PreUpdate = 'VU:Spec:PreUpdate',

    }
    export enum HooksEnum {
        /**
         * @example
         *    Hooks.Install(HooksEnum.BulletEntity_Collision, (entity: VUShared.Entity, hit: VUShared.RayCastHit, shooter: VUClient.Player | undefined) => {});
         */
        BulletEntity_Collision = 'BulletEntity:Collision',

        /**
         * @example
         *    Hooks.Install(HooksEnum.ClientChatManager_IncomingMessage, (message: string, playerId: number, recipientMask: number, channelId: FB.ChatChannelType, isSenderDead: boolean) => {});
         */
        ClientChatManager_IncomingMessage = 'ClientChatManager:IncomingMessage',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Client_UpdateClientGameViewTransform, (transform: VUShared.LinearTransform) => {});
         */
        Client_UpdateClientGameViewTransform = 'Client:UpdateClientGameViewTransform',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Client_UpdateFirstPersonTransform, (transform: VUShared.LinearTransform) => {});
         */
        Client_UpdateFirstPersonTransform = 'Client:UpdateFirstPersonTransform',

        /**
         * @example
         *    Hooks.Install(HooksEnum.EntityFactory_Create, (entityData: VUShared.DataContainer, transform: VUShared.LinearTransform) => {});
         */
        EntityFactory_Create = 'EntityFactory:Create',

        /**
         * @example
         *    Hooks.Install(HooksEnum.EntityFactory_CreateFromBlueprint, (blueprint: VUShared.DataContainer, transform: VUShared.LinearTransform, variation: number, parentRepresentative: VUShared.DataContainer | undefined) => {});
         */
        EntityFactory_CreateFromBlueprint = 'EntityFactory:CreateFromBlueprint',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Input_PreUpdate, (cache: VUClient.ConceptCache, deltaTime: number) => {});
         */
        Input_PreUpdate = 'Input:PreUpdate',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_CreateAction, (action: VUShared.UIAction) => {});
         */
        UI_CreateAction = 'UI:CreateAction',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_CreateChatMessage, (message: string, channelId: FB.ChatChannelType, playerId: number, recipientMask: number, isSenderDead: boolean) => {});
         */
        UI_CreateChatMessage = 'UI:CreateChatMessage',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_CreateKillMessage, () => {});
         */
        UI_CreateKillMessage = 'UI:CreateKillMessage',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_DrawEnemyNametag, () => {});
         */
        UI_DrawEnemyNametag = 'UI:DrawEnemyNametag',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_DrawFriendlyNametag, () => {});
         */
        UI_DrawFriendlyNametag = 'UI:DrawFriendlyNametag',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_DrawMoreNametags, () => {});
         */
        UI_DrawMoreNametags = 'UI:DrawMoreNametags',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_DrawNametags, () => {});
         */
        UI_DrawNametags = 'UI:DrawNametags',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_DrawSquadNametag, () => {});
         */
        UI_DrawSquadNametag = 'UI:DrawSquadNametag',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_EnableCursorMode, (enable: boolean, cursor: number) => {});
         */
        UI_EnableCursorMode = 'UI:EnableCursorMode',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_EnableTypingMode, (enable: boolean) => {});
         */
        UI_EnableTypingMode = 'UI:EnableTypingMode',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_InputConceptEvent, (eventType: FB.UIInputActionEventType, action: FB.UIInputAction) => {});
         */
        UI_InputConceptEvent = 'UI:InputConceptEvent',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_NametagsShouldUpdate, () => {});
         */
        UI_NametagsShouldUpdate = 'UI:NametagsShouldUpdate',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_PushScreen, (screen: VUShared.DataContainer, priority: FB.UIGraphPriority, parentGraph: VUShared.DataContainer, stateNodeGuid: VUShared.Guid | undefined) => {});
         */
        UI_PushScreen = 'UI:PushScreen',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_RenderMinimap, () => {});
         */
        UI_RenderMinimap = 'UI:RenderMinimap',

        /**
         * @example
         *    Hooks.Install(HooksEnum.UI_UpdateNametagIcons, () => {});
         */
        UI_UpdateNametagIcons = 'UI:UpdateNametagIcons',

    }

} // end declare namespace VUClient

declare namespace VUShared {
    class AimAssist {

        data: VUShared.DataContainer;
        speed: VUShared.Vec2;
        lastZoomLevel: number;
        yaw: number;
        pitch: number;
        acceleration: number;
        accelerationTimer: number;
        attractZoomPostTimer: number;
        targetDistance: number;
        softZoneLambda: number;
        useAimAssist: boolean;
        useInputPolynomials: boolean;
        hasChangedZoomed: boolean;
        isSnapZoom: boolean;

    }

    class AxisAlignedBox {

        constructor();
        constructor(min: VUShared.Vec3, max: VUShared.Vec3);
        constructor(data: {});

        static typeInfo: VUShared.TypeInformation;

        min: VUShared.Vec3;
        max: VUShared.Vec3;

        Clone(): VUShared.AxisAlignedBox;

    }

    class CollisionEvent extends VUShared.EntityEvent {

        constructor(eventId: number, position: VUShared.Vec3, normal: VUShared.Vec3, speed: number);
        constructor(eventName: string, position: VUShared.Vec3, normal: VUShared.Vec3, speed: number);

        position: VUShared.Vec3;
        normal: VUShared.Vec3;
        speed: number;

    }

    class ContainerCallback {

        Deregister(): void;

    }

    export enum DamageType {
        NotSet = 0,
        Suicide = 1,
        VehicleUpsideDown = 2,
        DamageArea = 3,
        SoldierCollide = 4,
        Melee = 5,
        Count = 6,
    }
    /**
     * A frostbite database partition. Partitions represent game-data bound structures (ebx).
     */
    class DatabasePartition {

        /**
         * A table holding all the instances contained within this partition.
         */
        readonly instances: VUShared.DataContainer[];
        /**
         * The Guid of this partition.
         */
        readonly guid: VUShared.Guid;
        /**
         * The primary instance of this partition.
         */
        readonly primaryInstance: VUShared.DataContainer;
        /**
         * The name of this partition. Ususally corresponds to the relative filename of the original file.
         */
        readonly name: string;

        /**
         * Tries to find and retrieve an instance with a matching `guid` from the current partition.
         */
        FindInstance(guid: VUShared.Guid): VUShared.DataContainer | undefined;
        /**
         * Replaces an `instance` within this partition with another `replacement` instance. When `replaceReferences` is set to `true` (default), VeniceEXT also calls DataContainer::ReplaceReferences on the original instance, replacing all references to it with its replacement.
         */
        ReplaceInstance(instance: VUShared.DataContainer, replacement: VUShared.DataContainer, replaceReferences?: boolean): void;
        AddInstance(instance: VUShared.DataContainer): void;
        RemoveInstance(instance: VUShared.DataContainer): void;

    }

    /**
     * A base frostbite DataContainer, the highest class in the Frostbite container instance hierarchy. All instances present in game data partitions (ebx) are derived from this type.
     */
    class DataContainer {

        /**
         * The type information for the DataContainer type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Type information for this instance. You can get the specific type of this instance via `instance.typeInfo.name`.
         */
        readonly typeInfo: VUShared.TypeInformation;
        /**
         * Indicates whether this instance is being lazy-loaded.
         */
        readonly isLazyLoaded: boolean;
        /**
         * Indicates whether this instance is read-only, which is the case for instances loaded from data. Changes to read-only instances will throw an error.
         */
        readonly isReadOnly: boolean;
        /**
         * The Guid of this instance, if it has one assigned to it.
         */
        readonly instanceGuid: VUShared.Guid | undefined;
        /**
         * The Guid of the partition that contains this instance, if there is one. Only instances loaded from data are inside partitions.
         */
        readonly partitionGuid: VUShared.Guid | undefined;
        /**
         * The DatabasePartition that contains this instance, if there is one. Only instances loaded from data are inside partitions.
         */
        readonly partition: VUShared.DatabasePartition | undefined;

        /**
         * Checks if an instance is of a specific type. This will return `true` for matching child types too (eg. calling `:Is('Asset')` on a SoundAsset will return `true`).
         */
        Is(typeName: string): boolean;
        /**
         * Checks if two instances are pointing to the same data. This performs reference equality checks, not value equality.
         */
        Eq(other: VUShared.DataContainer): boolean;
        /**
         * Returns a reference to the same instance as a DataContainer type. This is usually helpful when you have to upcast a more generic type to make it match the type definition of a property or an array.
         */
        AsDC(): VUShared.DataContainer;
        /**
         * Creates a shallow clone of this instance, which is essentially the equivalent of creating a new instance of the same type and assigning the values of this instance to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): VUShared.DataContainer;
        /**
         * Creates a shallow clone of this instance and assigns it the provided Guid, which is essentially the equivalent of creating a new instance of the same type with the provided Guid and assigning the values of this instance to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(guid: VUShared.Guid): VUShared.DataContainer;
        /**
         * Replaces all registered references to the current instance with references to the provided instance. Passing `nil` will clear all references to this instance.
         */
        ReplaceReferences(_with: VUShared.DataContainer | undefined): void;
        /**
         * Makes a read-only instance writable. This is useful for modifying loaded game data. As this is a quite expensive operation, it is recommended to only use it on instances you plan to modify.
         */
        MakeWritable(): void;
        /**
         * Registers a callback that will be called once this lazy-loaded instance has finished loading. The callback will keep getting called between level loads.
         */
        RegisterLoadHandler(callback: Function): VUShared.ContainerCallback | undefined;
        /**
         * Registers a callback that will be called once this lazy-loaded instance has finished loading. The callback will keep getting called between level loads.
         */
        RegisterLoadHandler(context: any, callback: Function): VUShared.ContainerCallback | undefined;
        /**
         * Registers a callback that will be called once this lazy-loaded instance has finished loading. The callback will get called once and then get automatically deregistered.
         */
        RegisterLoadHandlerOnce(callback: Function): VUShared.ContainerCallback | undefined;
        /**
         * Registers a callback that will be called once this lazy-loaded instance has finished loading. The callback will get called once and then get automatically deregistered.
         */
        RegisterLoadHandlerOnce(context: any, callback: Function): VUShared.ContainerCallback | undefined;

    }

    class DebrisSpawnEvent extends VUShared.EntityEvent {

        constructor(eventId: number, min: number, max: number, current: number);
        constructor(eventName: string, min: number, max: number, current: number);

        min: number;
        max: number;
        current: number;

    }

    export enum DebugGeometryType {
        Triangle3d = 0,
        Line3d = 1,
        Triangle2d = 2,
        Line2d = 3,
    }
    class Entity {

        readonly typeInfo: VUShared.TypeInformation;
        readonly data: VUShared.DataContainer | undefined;
        readonly uniqueId: number;
        readonly instanceId: number;
        readonly bus: VUShared.EntityBus | undefined;

        Init(realm: FB.Realm, enableAllowed: boolean, isGhost?: boolean): void;
        Destroy(): void;
        Is(typeName: string): boolean;
        FireEvent(eventId: number): void;
        FireEvent(eventName: string): void;
        FireEvent(event: VUShared.EntityEvent): void;
        PropertyChanged(propertyId: number): void;
        PropertyChanged(propertyId: number, value: any): void;
        PropertyChanged(propertyName: string): void;
        PropertyChanged(propertyName: string, value: any): void;
        RegisterEventCallback(callback: Function): number;
        RegisterEventCallback(context: any, callback: Function): number;
        UnregisterEventCallback(handle: number): void;
        RegisterCreateCallback(callback: Function): number;
        RegisterCreateCallback(context: any, callback: Function): number;
        UnregisterCreateCallback(handle: number): void;
        RegisterDestroyCallback(callback: Function): number;
        RegisterDestroyCallback(context: any, callback: Function): number;
        UnregisterDestroyCallback(handle: number): void;
        RegisterInitCallback(callback: Function): number;
        RegisterInitCallback(context: any, callback: Function): number;
        UnregisterInitCallback(handle: number): void;
        RegisterDeinitCallback(callback: Function): number;
        RegisterDeinitCallback(context: any, callback: Function): number;
        UnregisterDeinitCallback(handle: number): void;

    }

    class EntityBus {

        readonly entities: VUShared.Entity[];
        readonly parent: VUShared.EntityBus | undefined;
        readonly parentRepresentative: VUShared.DataContainer | undefined;
        readonly data: VUShared.DataContainer | undefined;
        readonly dataId: FB.NetworkDataId;
        readonly instanceId: number;
        readonly networkId: number;

        FireEvent(targetData: VUShared.DataContainer, eventId: number): void;
        FireEvent(targetData: VUShared.DataContainer, eventName: string): void;
        FireEvent(targetData: VUShared.DataContainer, event: VUShared.EntityEvent): void;
        GetEntity(forData: VUShared.DataContainer): VUShared.Entity | undefined;
        PropertyChanged(propertyId: number): void;
        PropertyChanged(propertyId: number, value: any): void;
        PropertyChanged(propertyName: string): void;
        PropertyChanged(propertyName: string, value: any): void;
        GetLinks(toData: VUShared.DataContainer, fieldId: number): VUShared.Entity[];
        GetLinks(toData: VUShared.DataContainer, fieldName: string): VUShared.Entity[];

    }

    class EntityCreationParams {

        constructor();

        transform: VUShared.LinearTransform;
        variationNameHash: number;
        networked: boolean;
        /**
         * Data (ReferenceObjectData) that represents the parent of this blueprint. Specifying this in combination with a custom IndexInBlueprint can be used to provide proper replication between entities spawned on the server and the client.
         */
        parentRepresentative: VUShared.DataContainer | undefined;

    }

    class EntityEvent {

        constructor(eventId: number);
        constructor(eventName: string);

        readonly type: string;
        eventId: number;

    }

    class EntityIterator {

        Next(): VUShared.Entity | undefined;

    }

    class EntryInput {

        constructor();

        deltaTime: number;
        authoritativeAimingYaw: number;
        authoritativeAimingPitch: number;
        authoritativeMovementPenalty: number;
        authoritativeCameraPosition: VUShared.Vec3;
        authoritativeMovementPosition: VUShared.Vec3;
        authoritativeMovementVelocity: VUShared.Vec3;
        flags: VUShared.EntryInputFlags;

        GetLevel(action: FB.EntryInputActionEnum): number;
        SetLevel(action: FB.EntryInputActionEnum, level: number): void;

    }

    export enum EntryInputFlags {
        AuthoritativeAiming = 1,
        AuthoritativeMovement = 2,
        AuthoritativeCameraPos = 4,
        InvertedPitch = 8,
        InvertedYaw = 16,
        UseRawPadState = 32,
        UseDeltaCompression = 64,
    }
    class Event {

        Unsubscribe(): void;

    }

    class FieldInformation {

        readonly name: string;
        readonly value: number;
        readonly typeInfo: VUShared.TypeInformation | undefined;

    }

    class FloatParameterEvent extends VUShared.EntityEvent {

        constructor(eventId: number, parameter: number);
        constructor(eventName: string, parameter: number);

        parameter: number;

    }

    class Guid {

        /**
         * Parses a GUID string into a Guid type. The `format` parameter can be one of the following values and dictates how to parse the string:
         - `D`: GUID with dashes (eg. `68F0A461-A947-40E1-BEC4-992EFDFF3735`)
         - `N`: GUID without dashes (eg. `68F0A461A94740E1BEC4992EFDFF3735`)
         - `B`: GUID with dashes and braces (eg. `{68F0A461-A947-40E1-BEC4-992EFDFF3735}`)
         - `P`: GUID with dashes and parentheses (eg. `(68F0A461-A947-40E1-BEC4-992EFDFF3735)`)

         */
        constructor(guid: string, format?: string);

        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly g: number;
        readonly h: number;
        readonly i: number;
        readonly j: number;
        readonly k: number;

        /**
         * Converts the Guid to its string representation. The `format` parameter can be one of the following values:
         - `D`: GUID with dashes (eg. `68F0A461-A947-40E1-BEC4-992EFDFF3735`)
         - `N`: GUID without dashes (eg. `68F0A461A94740E1BEC4992EFDFF3735`)
         - `B`: GUID with dashes and braces (eg. `{68F0A461-A947-40E1-BEC4-992EFDFF3735}`)
         - `P`: GUID with dashes and parentheses (eg. `(68F0A461-A947-40E1-BEC4-992EFDFF3735)`)

         */
        ToString(format: string): string;
        Clone(): VUShared.Guid;

    }

    class GunSway {

        data: VUShared.DataContainer | undefined;
        cameraRecoilTransform: VUShared.LinearTransform;
        currentRecoilDeviation: VUShared.GunSwayDeviation;
        currentLagDeviation: VUShared.GunSwayDeviation;
        currentDispersionDeviation: VUShared.GunSwayDeviation;
        timeSinceLastShot: number;
        dispersionAngle: number;
        minDispersionAngle: number;
        crossHairDispersionFactor: number;
        currentGameplayDeviationScaleFactor: number;
        currentVisualDeviationScaleFactor: number;
        suppressionMinDispersionAngleFactor: number;
        randomAngle: number;
        randomRadius: number;
        jumpingTimer: number;
        seed: number;
        initialFireShot: number;
        fireShot: boolean;
        isFiring: boolean;
        isJumping: boolean;
        isMoving: boolean;

    }

    class GunSwayDeviation {

        constructor();

        pitch: number;
        yaw: number;
        roll: number;
        transY: number;

    }

    export enum HealthStateAction {
        OnHealthy = 0,
        OnCriticallyDamaged = 1,
        OnInteractiveManDown = 2,
        OnManDown = 3,
        OnKilled = 4,
        OnDead = 5,
        OnDeathAnimationDone = 6,
        OnRevive = 7,
        OnReviveDone = 8,
        OnReviveAborted = 9,
    }
    class Hook {

        readonly priority: number;

        Uninstall(): void;

    }

    class HookContext {

        Pass(...args: any[]): void;
        Return(): void;
        Return(returnValue: any): void;
        Call(): any | undefined;

    }

    /**
     * Allows configuration of additional options for when sending an HTTP request.
     */
    class HttpOptions {

        constructor(headers?: {}, timeout?: number);

        /**
         * The connection timeout in seconds.
         */
        timeout: number;
        /**
         * Whether to verify the remote SSL certificate. Defaults to `true`. Changing it to `false` is **not** recommended.
         */
        verifyCertificate: boolean;
        /**
         * An associative table containing the request headers.
         */
        readonly headers: {};

        /**
         * Sets the value of the header with the specified name. The `User-Agent` header **cannot** be set.
         */
        SetHeader(header: string, value: string): void;
        /**
         * Removes the header with the specified name. The `User-Agent` header **cannot** be removed.
         */
        RemoveHeader(header: string): void;
        /**
         * Returns the value of a header with the specified name. If the header is not found it returns an empty string.
         */
        GetHeader(header: string): string;
        /**
         * Checks if a header with the specified name exists.
         */
        HasHeader(header: string): boolean;

    }

    /**
     * Represents an HTTP response received from a remote server.
     */
    class HttpResponse {

        /**
         * The HTTP status of the response.
         */
        readonly status: number;
        /**
         * A string containing the response body data.
         */
        readonly body: string;
        /**
         * An associative table containing all the response headers.
         */
        headers: {};

        /**
         * Gets the value of a header with the specified name from the HTTP response. If the header is not found it returns an empty string.
         */
        GetHeader(header: string): string;
        /**
         * Checks if a header with the specified name exists in the HTTP response.
         */
        HasHeader(header: string): boolean;

    }

    class ImpulseData {

        constructor();

        position: VUShared.Vec3;
        direction: VUShared.Vec3;
        force: number;
        type: VUShared.ImpulseType;
        boneIndex: number;

    }

    export enum ImpulseType {
        Generic = 0,
        Bullet = 1,
        Explosion = 2,
    }
    class IntParameterEvent extends VUShared.EntityEvent {

        constructor(eventId: number, parameter: number);
        constructor(eventName: string, parameter: number);

        parameter: number;

    }

    class LinearTransform {

        constructor();
        constructor(scale: number);
        constructor(left: VUShared.Vec3, up: VUShared.Vec3, forward: VUShared.Vec3, trans: VUShared.Vec3);
        constructor(data: {});

        static typeInfo: VUShared.TypeInformation;

        left: VUShared.Vec3;
        up: VUShared.Vec3;
        forward: VUShared.Vec3;
        trans: VUShared.Vec3;

        LookAtTransform(camera: VUShared.Vec3, world: VUShared.Vec3): void;
        ToQuatTransform(hasScale: boolean): VUShared.QuatTransform;
        Translate(trans: VUShared.Vec3): void;
        Inverse(): VUShared.LinearTransform;
        Clone(): VUShared.LinearTransform;

    }

    export enum MaterialFlags {
        MfPenetrable = 16777216,
        MfClientDestructible = 33554432,
        MfBashable = 67108864,
        MfSeeThrough = 134217728,
        MfNoCollisionResponse = 268435456,
        MfNoCollisionResponseCombined = 536870912,
        MfIndexMask = 16777215,
    }
    export enum MediaHint {
        Default = 0,
        Auxiliary = 1,
    }
    class Message {

        readonly category: VUShared.MessageCategory;
        readonly type: VUShared.MessageType;

    }

    export enum MessageCategory {
        Client = -1573253508,
        ClientCharacter = -765087963,
        ClientCollision = -949001278,
        ClientConnection = -1881985046,
        ClientControllable = -1436984163,
        ClientControllableToComponents = 427567386,
        ClientDynamicModel = 1006693478,
        ClientGameplay = 1351556790,
        ClientLevel = -626684246,
        ClientMetrics = -698614165,
        ClientOverlay = 2024843782,
        ClientPlayer = 620630415,
        ClientSoldier = 913290934,
        ClientSound = -626242081,
        ClientSpawn = -625087417,
        ClientState = -625230933,
        ClientStaticModel = -1857496085,
        ClientVehicle = 579415972,
        ClientWeapon = 677544254,
        Core = 2088844958,
        Network = -964876421,
        Presence = -1669899172,
        Server = -958133344,
        ServerAdmin = -668142001,
        ServerAdministration = -104637554,
        ServerBanList = 1140495055,
        ServerClub = 1801802200,
        ServerCollision = -614408162,
        ServerComponent = -1641634865,
        ServerControllable = 525960385,
        ServerControllableToComponents = -1002574266,
        ServerEntity = -418719237,
        ServerGameManager = 128104957,
        ServerGameplay = 1352856554,
        ServerInput = -658989610,
        ServerLevel = -662293002,
        ServerMapSequencer = -1962848719,
        ServerMetrics = 302419383,
        ServerPeer = 1802189346,
        ServerPlayer = -204915245,
        ServerRound = -650258494,
        ServerSoldier = -595266326,
        ServerSound = -651309309,
        ServerStaticModel = -473687241,
        ServerSubLevel = -1022957230,
        ServerUnlockList = -605134958,
        ServerUnlockSystem = 1570834837,
        ServerVehicle = 1044827640,
        ServerWeapon = 117672034,
        Session = -1552398437,
        Statistics = -852034080,
        UI = 5862329,
        UINetwork = -1996083449,
        VeniceNetwork = -2144672663,
        VeniceServerMetrics = 1113600165,
    }
    export enum MessageType {
        ClientAbortCutsceneMessage = 847018273,
        ClientActiveLicensesMessage = 869320947,
        ClientConnectedMessage = -1700320184,
        ClientContinueSingleplayerMessage = 1131904991,
        ClientDisconnectedMessage = -1119123562,
        ClientDrawFpsMessage = -1390058638,
        ClientDrawNetworkStatsMessage = 391095592,
        ClientDrawObjectLimitsMessage = 1153751684,
        ClientDrawStatsMessage = 1587104502,
        ClientEnterHudIngameMessage = -112930417,
        ClientEnteredIngameMessage = -785746089,
        ClientExitToMenuMessage = 2129992607,
        ClientJoinMultiplayerMessageBase = 1162997178,
        ClientJoinServerJobMessage = -453455881,
        ClientLeftRemoteServerMessage = 1368126605,
        ClientLevelDescriptionLoadedMessage = 1533759808,
        ClientLevelLoadProgressMessage = -2119084454,
        ClientLevelLoadedMessage = -562711802,
        ClientLevelUnloadedMessage = -1375780003,
        ClientLoadLevelMessage = -1241137401,
        ClientLoadLevelRequestedMessage = 2116295255,
        ClientLoadingDebugInfoEnabledMessage = 1274672363,
        ClientPeerNetworkRemovedMessage = -76947287,
        ClientRenderTagsMessage = -1776240260,
        ClientRestartSingleplayerMessage = 738381161,
        ClientRestartTimerMessage = -1377078329,
        ClientReturnToMenuMessage = 1871399125,
        ClientSetServerPasswordMessage = 252002927,
        ClientStartMultiplayerMessage = -1084728723,
        ClientStartSingleplayerMessageBase = 276130283,
        ClientStartedMessage = 512147926,
        ClientWantFullscreenMessage = 1692722820,
        ClientCharacterLocalPlayerDeletedMessage = -1518286323,
        ClientCharacterLocalPlayerSetMessage = 156481778,
        ClientCharacterSpawnDoneMessage = -602344971,
        ClientCollisionExplosionPackDetonatedMessage = -1156943451,
        ClientCollisionExplosionPackPlacedMessage = -884488582,
        ClientCollisionGrenadeCollisionMessage = 939198217,
        ClientConnectionInitializedMessage = -2003374931,
        ClientConnectionLinkLevelMessage = -716226761,
        ClientConnectionLoadLevelMessage = -930914799,
        ClientConnectionUnloadLevelMessage = 1811412394,
        ClientControllableSpawnDoneMessage = 738681613,
        ClientControllableUnspawnDoneMessage = -2091205514,
        ClientControllableToComponentsPlayerEnteredMessage = 1740305323,
        ClientControllableToComponentsPlayerExitMessage = 1832457986,
        ClientDynamicModelRenderStatsMessage = -1777541210,
        ClientGameplayControllableLowHealthMessage = 308260564,
        ClientGameplayPlayerBaseDestroyedMessage = 826285432,
        ClientGameplaySoldierHitMessage = 437540802,
        ClientLevelFinalizedMessage = 1781596255,
        ClientLevelSpawnDebugEntitiesMessage = 43109398,
        ClientLevelSpawnEntitiesEndMessage = 402243048,
        ClientLevelenterLevelDisableDestructionEffectsTimeMessage = -509352732,
        ClientLevelenterLevelDisableEffectsTimeMessage = -1233693478,
        ClientMetricsPauseGameMessage = 1047180860,
        ClientMetricsPopUIScreenMessage = -496262945,
        ClientMetricsPushUIScreenMessage = -284430802,
        ClientMetricsUIActionMessage = 297068066,
        ClientOverlayBlockOverlayAvailabilityMessage = 1130585775,
        ClientPlayerAmmoPickupMessage = 1429744222,
        ClientPlayerChangedAllowedToSpawnOnMessage = -929830625,
        ClientPlayerChangedMatchReadyStatusMessage = 1787312650,
        ClientPlayerChangedPlayerViewMessage = 563946744,
        ClientPlayerChangedSquadLeaderStatusMessage = -69617797,
        ClientPlayerChangedVoiceChannelMessage = -338555373,
        ClientPlayerConnectMessage = 1776313402,
        ClientPlayerDeletedMessage = 1619630009,
        ClientPlayerEnterEntryMessage = -1602204488,
        ClientPlayerEnterExitVehicleMessage = -1619569516,
        ClientPlayerKilledMessage = -1164759673,
        ClientPlayerLocalSetMessage = 473901803,
        ClientPlayerManDownMessage = -565403308,
        ClientPlayerNewSquadOrderMessage = -206859932,
        ClientPlayerRequestCameraChangeMessage = 2025231082,
        ClientPlayerSwitchSquadMessage = -1497080988,
        ClientPlayerSwitchTeamMessage = 1837906027,
        ClientPlayerUpdateCameraComponentMessage = 1688559811,
        ClientPlayerWeaponPickupMessage = 1600557426,
        ClientSoldierChangeCoverStateMessage = -1832186591,
        ClientSoldierOnJumpMessage = -2130419074,
        ClientSoldierOnLandMessage = 652760123,
        ClientSoundVoiceOverFinishedMessage = -1480643522,
        ClientSpawnSpawnedOrUnSpawnedMessage = 1618548042,
        ClientStateEnteredFrontendMessage = 350575207,
        ClientStateEnteredIngameMessage = -169333312,
        ClientStateEnteredLoadingLevelMessage = 616703769,
        ClientStateEnteredStaticMessage = -1051818447,
        ClientStateEnteredUnloadMessage = 507536436,
        ClientStateRequestFrontendMessage = -947499361,
        ClientStateRequestIngameMessage = 2077158008,
        ClientStateRequestLoadingIngameBundlesMessage = -854114279,
        ClientStateRequestLoadingLevelMessage = 593444321,
        ClientStateRequestStaticMessage = -665713847,
        ClientStateRequestUnloadMessage = -704629684,
        ClientStateResponseLoadingIngameBundlesMessage = 536142859,
        ClientStaticModelDrawBoundingBoxMessage = 455483015,
        ClientStaticModelDrawBoundingBoxNonPhysicsMessage = -342028093,
        ClientStaticModelDrawBoundingBoxPhysicsMessage = 1213524396,
        ClientStaticModelRenderKeyFrameTrailMessage = -1759514814,
        ClientVehicleCriticalDamageMessage = -1120191985,
        ClientWeaponDispersionUpdatedMessage = 48855234,
        ClientWeaponPlayerPrimaryOutOfAmmoMessage = -1607312637,
        ClientWeaponPlayerPrimaryWeaponFireMessage = -540355792,
        ClientWeaponPlayerWeaponChangeMessage = 638585794,
        ClientWeaponPlayerWeaponReloadBeginMessage = -1835302574,
        ClientWeaponPlayerWeaponReloadEndMessage = 731651546,
        CoreBudgetManagerMessage = -2092505181,
        CoreCleanupMessage = -1463505419,
        CoreDebugReadSaveGameDataMessage = -2113157783,
        CoreDemoStatusMessage = -1221526270,
        CoreDetailedMemoryStatsEnabledMessage = 474346560,
        CoreDialogLevelMessage = -1964986613,
        CoreDisplayAssertsMessage = -1799933538,
        CoreEndMemoryFileStreamMessage = -1464816639,
        CoreEndMemoryTrackingMessage = -470228844,
        CoreEnteredIngameMessage = 1756357301,
        CoreExitIngameMessage = -261898180,
        CoreGameTimerMessage = 1931130620,
        CoreHibernateMessage = -101848705,
        CoreJobProcessorCountMessage = -74214841,
        CoreLiveEditingEnableMessage = -1179704098,
        CoreLogLevelMessage = -1612460345,
        CoreMainThreadInitMessage = -566944054,
        CoreMemoryStatsEnabledMessage = -1799292304,
        CorePanicMessage = 2116451264,
        CorePropertyTweakedMessage = -2093885665,
        CoreQuitMessage = -384571220,
        CoreQuittingInitiatedMessage = -1052826049,
        CoreResourceLoadingFailureMessage = -1685241415,
        CoreTweakBlueprintBundleLoadedMessage = 44840197,
        CoreTweakBlueprintBundleUnloadedMessage = 1875635422,
        CoreTweakSubLevelBundleLoadedMessage = 714052600,
        CoreTweakSubLevelBundleUnloadedMessage = 717562787,
        CoreUpdateClipboardMessage = -640055800,
        CoreWriteSaveGameDoneMessage = -223420121,
        CoreWriteSaveGameMessage = -1731352441,
        NetworkCameraPositionMessage = -1019453392,
        NetworkChangeGameSettingMessage = -1031686130,
        NetworkClientCameraControlMessage = 1013022519,
        NetworkConnectedMessage = -1259116593,
        NetworkCreatePlayerMessage = -771436793,
        NetworkDebugServerInputMessage = 23611698,
        NetworkDifficultyChangedMessage = 947795329,
        NetworkDisconnectedMessage = 778899633,
        NetworkDrawServerGhostsMessage = 1234075649,
        NetworkDrawServerGhostsSkipStaticMessage = 114706712,
        NetworkDumpMessageCreatorsMessage = -635092392,
        NetworkFirstPlayerEnteredMessage = -1194220304,
        NetworkGhostCountWarningDrawXMessage = 1111445798,
        NetworkGhostCountWarningDrawYMessage = 1521730887,
        NetworkGhostCountWarningInfoMessage = 952159184,
        NetworkGhostCountWarningInstanceThresholdMessage = 228827008,
        NetworkGhostCountWarningMessage = -1073567906,
        NetworkGhostCountWarningThresholdMessage = -1334934103,
        NetworkGhostCountWarningTimeMessage = -480443477,
        NetworkJuiceSessionMessage = 455381982,
        NetworkLevelLoadedAckMessage = 113453192,
        NetworkLoadLevelMessage = 1292955648,
        NetworkMatchReadyStatusChangedMessage = 961448894,
        NetworkMaxClientCountMessage = 347431614,
        NetworkMetricsSaveGameSavedMessage = 1890115501,
        NetworkMovePlayerMessage = 1829355154,
        NetworkOnPlayerSpawnedMessage = -893973128,
        NetworkPerformanceProfileMessage = 880806691,
        NetworkPlayerSelectedUnlockAssetsMessage = -145548999,
        NetworkPlayerSelectedWeaponMessage = 220489352,
        NetworkProtocolVersionMessage = -970051908,
        NetworkRequestLoadLevelMessage = 989809105,
        NetworkScreenFadeMessage = 635866170,
        NetworkSelectSpawnGroupMessage = 1909800124,
        NetworkSelectTeamMessage = -1795611739,
        NetworkServerAddressMessage = -578751677,
        NetworkServerPortMessage = -1795172628,
        NetworkSetActiveWeaponSlotMessage = 614190488,
        NetworkSetPlayerViewMessage = -378277876,
        NetworkSettingsMessage = -1364909291,
        NetworkSpawnCustomizationMessage = 19073174,
        NetworkSpawnHereMessage = 793655281,
        NetworkSpawnMessage = -1818666741,
        NetworkSpawnOnSelectedMessage = -1277463869,
        NetworkSpawnVehicleCustomizationMessage = 2090633806,
        NetworkSuicideMessage = -1427413164,
        NetworkTimeSyncMessage = 1132805922,
        NetworkUnSpawnCustomizationMessage = -1616015315,
        PresenceAchievementRequestMessageBase = 485070420,
        PresenceBlobMessageBase = 2065626049,
        PresenceBlobRequestMessageBase = 1848750064,
        PresenceBlockListMessageBase = 329692393,
        PresenceBrowserMessageBase = -1897749394,
        PresenceBrowserRequestMessageBase = -595985153,
        PresenceCalendarMessageBase = -115050096,
        PresenceCalendarRequestMessageBase = -315209279,
        PresenceCommMessageBase = -1288665266,
        PresenceCommRequestMessageBase = 130978655,
        PresenceCommerceMessageBase = -2014191681,
        PresenceCommerceRequestMessageBase = 306840078,
        PresenceConnectionMessageBase = -330555788,
        PresenceConnectionRequestMessageBase = 1895039525,
        PresenceCouchMessageBase = -5661776,
        PresenceFriendMessageBase = -1112507856,
        PresenceFriendRequestMessageBase = 2127988193,
        PresenceGameConfigurationMessageBase = 768213628,
        PresenceGameConfigurationRequestMessageBase = -69124307,
        PresenceGameMessageBase = 298682508,
        PresenceGameQueueMessageBase = -125402371,
        PresenceGameRequestMessageBase = -974035875,
        PresenceHistoryMessageBase = 89122112,
        PresenceInitialControllerIndexMessageBase = 35145950,
        PresenceJoinResultMessageBase = 946403209,
        PresenceLicenseMessageBase = 484228217,
        PresenceLicenseRequestMessageBase = -49386232,
        PresenceLivePartyMessageBase = 20586170,
        PresenceMatchFeedMessageBase = 1219722643,
        PresenceMatchFeedRequestMessageBase = -861099038,
        PresenceMatchImagesMessageBase = 678725381,
        PresenceMatchmakerMessageBase = -2124197119,
        PresenceNewsTickerMessageBase = -1224997009,
        PresenceNewsTickerRequestMessageBase = -992517538,
        PresencePeerGameMessageBase = 435666830,
        PresencePeerGameRequestMessageBase = -685936097,
        PresencePingUpdatedMessageBase = 1653502695,
        PresencePlaygroupAttributesMessageBase = -266700138,
        PresencePlaygroupMessageBase = 938907609,
        PresencePlaygroupRequestMessageBase = 1562184424,
        PresencePopupMessageBase = 2139104424,
        PresencePopupRequestMessageBase = 157866873,
        PresenceRspMessageBase = -402928717,
        PresenceRspRequestMessageBase = 1520247938,
        PresenceServerBannerMessageBase = 318825139,
        PresenceServerBannerRequestMessageBase = 941775746,
        PresenceServerBrowserMessageBase = -1047204341,
        PresenceServerBrowserRequestMessageBase = 1003882362,
        PresenceStorageMessageBase = -987356997,
        PresenceStorageRequestMessageBase = 917353098,
        PresenceSystemUIMessageBase = -1734141445,
        PresenceUserIdMessageBase = 2043438686,
        PresenceUserIdRequestMessageBase = 831909967,
        PresenceUserSettingsMessageBase = -836002090,
        PresenceUserSettingsRequestMessageBase = -1239892025,
        PresenceUserTitleInfoMessageBase = -1208247427,
        PresenceUserTitleInfoRequestMessageBase = -264643444,
        PresenceWebFeedMessageBase = 1245380880,
        PresenceWebFeedRequestMessageBase = 1102668097,
        PresenceWebMessageBase = -328099310,
        PresenceWebRequestMessageBase = -621833981,
        PresenceXPromoMessageBase = -457272843,
        PresenceXPromoRequestMessageBase = 2076092932,
        ServerActiveLicensesMessage = -79259089,
        ServerApplyConfigurationMessage = 1113777263,
        ServerClientConnectionConnectedMessage = -2019541317,
        ServerClientConnectionRemovedMessage = -947874234,
        ServerDrawCombatAreaGeometryMessage = 1155411216,
        ServerInternalLoadLevelMessage = 301952764,
        ServerIsDesertingAllowedMessage = 931899992,
        ServerIsRenderDamageEventsMessage = 370373711,
        ServerIsStatsEnabledMessage = 620024597,
        ServerJobEnableForceEnabledHackMessage = -1482291916,
        ServerLevelLoadedMessage = 594295130,
        ServerLevelUnloadedMessage = -751729279,
        ServerLoadGameMessage = -1424832605,
        ServerLoadLevelMessage = -1034363045,
        ServerLogGameAttributesMessage = 1960394126,
        ServerPausedMessage = -1322879683,
        ServerQueryProviderEnabledMessage = 1167483557,
        ServerRemoteAdministrationPortMessage = 1645399672,
        ServerResendSyncedSettingsMessage = 105269539,
        ServerResetConfigurationMessage = -267230226,
        ServerRespawnOnDeathPositionMessage = 528996195,
        ServerRestartForESportsMatchMessage = 589919336,
        ServerRestartTimerMessage = 1655375643,
        ServerRotateLevelMessage = -757118748,
        ServerStartedMessage = 987331850,
        ServerStopMessage = -1993400653,
        ServerStoppedMessage = -977180094,
        ServerThreadingEnableMessage = 735839332,
        ServerUnloadLevelMessage = 1847145440,
        ServerAdminBanPlayerMessage = 412527098,
        ServerAdminSetServerNameMessage = -2055462172,
        ServerAdministrationEventsEnabledMessage = -1268729761,
        ServerAdministrationLoginMessage = -937956858,
        ServerAdministrationPacketMessage = -672766835,
        ServerAdministrationPasswordMessage = -1068428614,
        ServerAdministrationQuitMessage = -1950241860,
        ServerBanListEventMessage = -1543082584,
        ServerClubMemberCreatedMessage = -964747293,
        ServerClubMemberDeletedMessage = 389187582,
        ServerCollisionExplosionDamageMessage = -569466805,
        ServerCollisionExplosionPackDestroyedMessage = -116547526,
        ServerCollisionExplosionPackPlacedMessage = -689773658,
        ServerCollisionExplosionPreDamageMessage = -716652084,
        ServerCollisionExplosionSpawnMessage = 58123131,
        ServerCollisionExplosionUnSpawnMessage = -1359619232,
        ServerCollisionGrenadeCollisionMessage = -486460331,
        ServerCollisionGrenadeThrowMessage = 458752477,
        ServerCollisionProjectileFireMessage = -1358395560,
        ServerCollisionProjectileImpactMessage = 1157204162,
        ServerCollisionProjectileTimeoutMessage = -1738013029,
        ServerComponentEntryComponentProcessedInputMessage = 941015299,
        ServerComponentEntryOnPlayerEntersMessage = 345337529,
        ServerComponentEntryOnPlayerExitsMessage = 915911761,
        ServerComponentEntryOnUnspawnMessage = -566872847,
        ServerComponentWeaponOnSpawnMessage = -1391067716,
        ServerComponentWeaponOnUnspawnMessage = 1930510855,
        ServerControllableSpawnDoneMessage = -2042474927,
        ServerControllableUnspawnDoneMessage = 1726982570,
        ServerControllableToComponentsPlayerEnteredMessage = -2098714121,
        ServerControllableToComponentsPlayerExitMessage = -829025954,
        ServerEntityBangerEntityOnSpawnMessage = -95387508,
        ServerEntityBangerEntityOnUnspawnMessage = 1318770295,
        ServerEntityOnDamageMessage = -1600037286,
        ServerEntityPickupOnSpawnMessage = -587054594,
        ServerEntityPickupOnUnspawnMessage = 1008656709,
        ServerGameManagerAddGameBanRequestMessage = 831852645,
        ServerGameManagerAddGameBanResponseMessage = -1943869641,
        ServerGameManagerAddQueuedPlayerMessage = 201506321,
        ServerGameManagerCheckAggressiveJoinStateMessage = 1899888969,
        ServerGameManagerGameAttributesUpdateMessage = 1559748006,
        ServerGameManagerGameSettingsUpdateMessage = -1717573812,
        ServerGameManagerGetGameDataMessage = 1698574014,
        ServerGameManagerMatchmakingStateMessage = 1523806229,
        ServerGameManagerPlayerJoiningMessage = -1527213177,
        ServerGameManagerPlayerJoiningQueueMessage = -356986634,
        ServerGameManagerRefreshGameAttributesMessage = 286819210,
        ServerGameManagerResetServerMessage = 942652390,
        ServerGameManagerRestartLevelRequestMessage = 641379398,
        ServerGameManagerUpdateGameServerListsMessage = 1305626269,
        ServerGameManagerUpdateMatchmakingStateMessage = -289376028,
        ServerGameManagerUpdatePlayerCapacityRequestMessage = -199244079,
        ServerGameManagerUpdatePlayerCapacityResponseMessage = 82128579,
        ServerGameManagerValidateContentRequestMessage = -1179400344,
        ServerGameManagerValidateContentResponseMessage = 779351194,
        ServerGameplayCTFFlagCapturedMessage = -2141816452,
        ServerGameplayCTFFlagDroppedMessage = 1913387300,
        ServerGameplayCTFFlagPickedUpMessage = -1234146775,
        ServerGameplayCTFFlagReturnedMessage = -994362345,
        ServerGameplayCapturePointCapturedMessage = 1236363785,
        ServerGameplayCapturePointChangedMessage = -1310831573,
        ServerGameplayCapturePointLostMessage = -99097779,
        ServerGameplayCapturePointPlayerEnteredMessage = -1242290669,
        ServerGameplayCapturePointResetMessage = 1141476796,
        ServerGameplayDeserterMessage = 947658279,
        ServerGameplayDeserterReturnMessage = -1921533043,
        ServerGameplayFightHarderMessage = 1560940477,
        ServerGameplayGameModeResetMessage = -1571335527,
        ServerGameplayMedkitMessage = 1157204219,
        ServerGameplayPlayerBaseDestroyedMessage = 240671908,
        ServerGameplayPlayerMenuCancelMessage = 476842887,
        ServerGameplayPlayerMenuOkMessage = -60501915,
        ServerGameplayPreviousWeatherStateMessage = 1698878623,
        ServerGameplayServerPlayerMenuCancelMessage = -1888949566,
        ServerGameplayServerPlayerMenuOkMessage = -601548448,
        ServerGameplayTeamLostLeadMessage = 165171700,
        ServerGameplayTeamReinforceMessage = 1568713681,
        ServerGameplayTeamTakeLeadMessage = -634153653,
        ServerGameplayVoiceOverFinishedMessage = -1694687797,
        ServerInputDeactivateInputRestrictionMessage = 385784103,
        ServerInputReactivateInputRestrictionMessage = -1148128079,
        ServerLevelCompletedMessage = -135581040,
        ServerLevelSpawnEntitiesBeginMessage = 623123260,
        ServerLevelSpawnEntitiesEndMessage = -1675019724,
        ServerLevelStartedMessage = -592490532,
        ServerMapSequencerControlledInfoMessage = -1608658722,
        ServerMapSequencerControlledMessage = 959749712,
        ServerMapSequencerDebugOutputMessage = -1308832012,
        ServerMapSequencerEventMessageBase = 1270538947,
        ServerMapSequencerLevelLoadedMessage = 944105995,
        ServerMapSequencerMaxPlayerCountMessage = 2143919742,
        ServerMapSequencerStatusMessage = -880669778,
        ServerMapSequencerSwitchingLevelsMessage = 792314925,
        ServerMetricsDetonateExplosionMessage = -447653555,
        ServerMetricsObjectiveSuccessMessage = 1613303952,
        ServerMetricsSaveGameLoadedMessage = -1124383052,
        ServerMetricsSaveGameSavedMessage = 1894707990,
        ServerPeerInitializedMessage = 1369321701,
        ServerPeerLoadLevelMessage = -872116391,
        ServerPlayerAboutToClearSoldierMessage = -832541283,
        ServerPlayerAboutToCreateForConnectionMessage = 1231268711,
        ServerPlayerChangeChatChannelMessage = 841705347,
        ServerPlayerChangedSoldierMessage = 82953904,
        ServerPlayerChangedSquadSpawnerStatusMessage = -1755261296,
        ServerPlayerChangedVoiceChannelMessage = -2104485041,
        ServerPlayerChatMessage = -607717530,
        ServerPlayerCreateMessage = 810674236,
        ServerPlayerCreatedForConnectionMessage = -1028670187,
        ServerPlayerCustomizationDoneMessage = -1408388027,
        ServerPlayerDebugFriendZoneSpawnMessage = 172219454,
        ServerPlayerDestroyMessage = -524298886,
        ServerPlayerEnterEntryMessage = 1178721508,
        ServerPlayerEnteredLevelMessage = 163048007,
        ServerPlayerExitEntryMessage = 370370828,
        ServerPlayerGunMasterLevelChangedMessage = -769688724,
        ServerPlayerInstantSuicideMessage = -2081535801,
        ServerPlayerKilledMessage = -945047077,
        ServerPlayerKitReplacedMessage = -658567898,
        ServerPlayerLeftLevelMessage = 258059669,
        ServerPlayerLevelLoadedMessage = 1389366249,
        ServerPlayerLicensesAvailableMessage = 1213130857,
        ServerPlayerManDownRevivedMessage = 1767466807,
        ServerPlayerManuallySelectedSpawnPointMessage = 1131473193,
        ServerPlayerMeleeInteruptedMessage = 1438714248,
        ServerPlayerNoInteractivityKickMessage = 1797974618,
        ServerPlayerReleasingLevelMessage = -2079488542,
        ServerPlayerRespawnMessage = -919231116,
        ServerPlayerReviveAcceptedMessage = -1809414750,
        ServerPlayerReviveMessage = 632760579,
        ServerPlayerReviveRefusedMessage = -692095307,
        ServerPlayerSpawnAtVehicleMessage = 1762351918,
        ServerPlayerSpawnOnPlayerMessage = 1457667857,
        ServerPlayerSpawnOnSelectedSpawnPointMessage = 2102049532,
        ServerPlayerSquadLeaderStatusChangedMessage = 1001970439,
        ServerPlayerSwitchSquadMessage = -501433416,
        ServerPlayerSwitchTeamMessage = -624505161,
        ServerPlayerTeamKillKickMessage = 464531853,
        ServerPlayerTickMessage = 1949252013,
        ServerRoundInterruptedMessage = -906115921,
        ServerRoundOverMessage = 381336391,
        ServerRoundResetMessage = 1270406748,
        ServerSoldierChangingWeaponMessage = -2081361568,
        ServerSoldierDamagedMessage = 200221454,
        ServerSoldierFiringMessage = -635158948,
        ServerSoldierKilledMessage = -1688272062,
        ServerSoldierManDownMessage = -1086589071,
        ServerSoldierOnInitMessage = 1619831450,
        ServerSoldierSelfHealMessage = 1952412637,
        ServerSoldierSoldierDamageMessage = -1854355072,
        ServerSoldierSpawnDoneMessage = -480641222,
        ServerSoldierUnspawnDoneMessage = 1445566401,
        ServerSoldierWeaponReplacedMessage = 318389163,
        ServerSoundVoiceOverFinishedMessage = 1235756386,
        ServerStaticModelDamagedPartByPlayerMessage = 822978124,
        ServerStaticModelDamagedPartMessage = -1374772860,
        ServerStaticModelDestroyedAllCollapsablePartsMessage = 559150686,
        ServerStaticModelGroupDestroyedPartMessage = 188772375,
        ServerStaticModelSpawnMessage = -1224218937,
        ServerSubLevelOnStreamedInMessage = -223714494,
        ServerUnlockListEventMessage = 609831285,
        ServerUnlockListRefreshMessage = 2101113988,
        ServerUnlockSystemSetupMessage = -734200231,
        ServerVehicleDamageMessage = -1821560680,
        ServerVehicleDestroyedMessage = 37016272,
        ServerVehicleDisabledMessage = 735256739,
        ServerVehicleEnterMessage = -1098145989,
        ServerVehicleEnterRestrictionMessage = -163116017,
        ServerVehicleExitMessage = 118781299,
        ServerVehicleForceArmamentReturnMessage = -711481431,
        ServerVehicleJumpMessage = -962347119,
        ServerVehicleLockableMessage = -344956206,
        ServerVehicleSpawnDoneMessage = -2137065560,
        ServerVehicleSwitchTeamMessage = 357883516,
        ServerVehicleUnspawnMessage = 2058033011,
        ServerWeaponArtilleryFiredMessage = 942868469,
        ServerWeaponLaserDesignatorMessage = 54549466,
        ServerWeaponMortarStrikeMessage = 1498630892,
        ServerWeaponPlayerPrimaryFireLockedShotSpawnedMessage = -870678882,
        ServerWeaponPlayerPrimaryFireShotSpawnedMessage = -743913164,
        ServerWeaponPlayerPrimaryOutOfAmmoMessage = 1617274975,
        ServerWeaponPlayerReloadMessage = 1426645739,
        ServerWeaponPlayerResupplyMessage = 895339998,
        ServerWeaponPlayerWeaponReloadEndMessage = 1998716934,
        ServerWeaponPlayerWeaponRemovedMessage = -576974310,
        ServerWeaponSoldierWeaponActivateMessage = -1881218696,
        ServerWeaponSoldierWeaponReloadMessage = -1799555856,
        ServerWeaponWeaponComponentActivateMessage = -1349642371,
        ServerWeaponWeaponComponentReloadMessage = -157712651,
        SessionPlayerAuthenticatedMessage = 1559045354,
        SessionPlayerJoinedMessage = -966402688,
        SessionPlayerLeftMessage = -627735528,
        StatisticsEventMessageBase = 324775570,
        UIAmpPortMessage = -1896684297,
        UIAmpServerEnabledMessage = -1276832274,
        UIAmpWaitForServerConnectionMessage = -404701651,
        UIBundleLoadedMessage = -101721855,
        UIClearEnable2Message = -881995560,
        UIClearEnableMessage = 1627008778,
        UIControllerConnectedMessage = -26859535,
        UIControllerDisconnectedMessage = 263344463,
        UIControlpointChangedTeamMessage = -189959066,
        UICycleRadioChannelMessage = 835091312,
        UIDamageGivenToEnemyMessage = 93974635,
        UIDialogScreenPushedMessage = 156927401,
        UIDisableMoviesMessage = -773895091,
        UIEndOfRoundReadyMessage = 488333117,
        UIEnterFrontendMessage = 1284004980,
        UIExitToMenuReasonMessage = -455632098,
        UIFakedLeaderboardNativeIDMessage = -831557806,
        UIFlowDialogNodeReachedMessage = 1343621044,
        UIFontCacheTextureHeightMessage = -467130835,
        UIFontCacheTextureWidthMessage = -1562519916,
        UIGraphExitedMessage = -1474303873,
        UIHasSuppressedEnemyMessage = 1614990818,
        UIHudChangeInventoryWeaponMessage = -1665091867,
        UIHudChatMessage = -1713136843,
        UIHudDebugPauseMessage = -1502661880,
        UIHudDistortHudMessage = 1467650609,
        UIHudEnableMinimapMessage = 2133782901,
        UIHudMessageMessage = 765724160,
        UIHudOutputStaticMessage = 1648834060,
        UIHudResetWinningTeamMessage = 1619865949,
        UIHudReviveWeaponEquippedChangedMessage = -1663922535,
        UIHudShowCaptureProgressMessage = 1612529361,
        UIHudShowEnemiesMessage = 1630007924,
        UIHudShowVoteMenuMessage = -480857901,
        UIHudShowVoteResultsMessage = 1235012634,
        UIHudTicketBleedMessage = 325974597,
        UIHudToggleMapZoomMessage = -93579438,
        UIHudUpdateCrosshairMessage = -196077482,
        UIHudWarningMessage = -785990943,
        UIInputPressedMessage = 2105815426,
        UIInputStatusChangedMessage = -297086350,
        UILanguageMessage = -1099940288,
        UILevelFontCacheTextureHeightMessage = -748454565,
        UILevelFontCacheTextureWidthMessage = 1671461026,
        UIMatchImagesRetrievedMessage = 1638672735,
        UIMatchUGCDisabledMessage = -1352986304,
        UIMaxMinimapIconsConsoleMessage = 968924950,
        UIMaxMinimapIconsPcMessage = 2086504882,
        UIMaximumNumberOfAwardsInEORMessage = 1618696317,
        UIMinPredictedSightSpeedMessage = 336255458,
        UIOnScreenTracesMessage = 565198157,
        UIOutputEnabledMessage = 532674664,
        UIOverrideMatchMessage = -405187627,
        UIOverrideRootedPlayersMessage = 1465767137,
        UIPlayerVehicleHealthChangeMessage = -655433885,
        UIPlayerVehicleListRefreshMessage = 129945478,
        UIPopupHideMessage = 2009582840,
        UIPopupShowMessage = 1676986715,
        UIPreEndOfRoundReadyMessage = 69972442,
        UIReadyForUnloadMessage = 1213915295,
        UIRenderCommandBufferSizeMessage = 1805559130,
        UIRenderEnableMessage = 1224723897,
        UIRenderIndexBufferSizeMessage = -1262955197,
        UIRenderLevelCommandBufferSizeMessage = 262927724,
        UIRenderLevelIndexBufferSizeMessage = -1895241483,
        UIRenderLevelVertexBufferSizeMessage = -1550743325,
        UIRenderPcBufferScaleMessage = -1287101229,
        UIRenderVertexBufferSizeMessage = -756600235,
        UIRequestEndOfRoundMessage = -138573529,
        UIRequestMatchImagesMessage = 1851002852,
        UIRequestPreEndOfRoundMessage = 1263455872,
        UIReturnMouseToUIMessage = -439493058,
        UIScreenCountChangeMessage = -2015173189,
        UIScreenLoadedMessage = -912014567,
        UISetValueMessage = 1786297915,
        UIShowDebugInfoMessage = 1070448782,
        UIShowDebugStringTagMessage = -1663254393,
        UIShowMinimapMessage = -464571986,
        UIShowProgressObjectMessage = 1422699705,
        UIShowScoreboardMessage = -377047613,
        UISkipIntroVideoSequenceMessage = -294802989,
        UISoldierChangeMessage = 1474901918,
        UISoldierHitUpdatedMessage = -1945110504,
        UISquadStatusChangedMessage = 1645083222,
        UIStartSinglePlayerMenuMessage = 928158248,
        UIStereoInteractionCompDepthMessage = -362763538,
        UITrackedAwardChangedMessage = -1159549089,
        UITrackedAwardUpdatedMessage = -757805304,
        UITransitionEffectStartMessage = -222344790,
        UITransitionEffectStopMessage = 345669746,
        UITriggerPopupHideMessage = -1266694592,
        UITriggerPopupShowMessage = -39841757,
        UIUpdateEnableMessage = -331930174,
        UIUserConnectedMessage = -475804164,
        UIUserDisconnectedMessage = 574090210,
        UIUserNotificationMessage = 13715502,
        UIUserSkippedLoginMessage = 1512388048,
        UIVKBDInputDoneMessage = -987204769,
        UIVehicleHitDirectionUpdatedMessage = 128469103,
        UIVerboseOutputEnabledMessage = -477950254,
        UINetworkAdminYellMessage = -1659862657,
        UINetworkAllowSkipVideoMessage = 26958309,
        UINetworkCoopGameMessage = -1654502671,
        UINetworkCoopPlayerMessage = -642526964,
        UINetworkEnableHudMessage = 923671060,
        UINetworkEndOfRoundBonusMessage = 1080583725,
        UINetworkGunMasterNotificationMessage = 1679744129,
        UINetworkHudScoringMessage = -485282056,
        UINetworkHudTextMessage = 176478632,
        UINetworkHudTooltipMessage = 1780562560,
        UINetworkKilledOtherPlayerMessage = -1963112840,
        UINetworkMenuResponseMessage = -214915876,
        UINetworkOwnPlayerKilledMessage = -1957189686,
        UINetworkPlayVideoMessage = -176947687,
        UINetworkPlayerCollectibleTextMessage = 681690814,
        UINetworkPlayerConnectMessage = -744157759,
        UINetworkPlayerDeserterTextMessage = -1456171356,
        UINetworkPlayerDisconnectMessage = -842197089,
        UINetworkPlayerKillsTextMessage = -2018370157,
        UINetworkPlayerMissionObjectiveTextMessage = 645051681,
        UINetworkPlayerRankUpMessage = 1308628172,
        UINetworkPlayerTextMessage = 718085378,
        UINetworkPlayerTutorialInstructionsTextMessage = 2016597765,
        UINetworkRollCreditsMessage = -1187572465,
        UINetworkRoundWarningMessage = 766753092,
        UINetworkSetCoopServerLobbyGameTypeMessage = -1272180012,
        UINetworkSetPlayerTeamMessage = -1540316832,
        UINetworkSkipVideoMessage = -2085789892,
        UINetworkSquadWipeInstigatorMessage = -1459925421,
        UINetworkSquadWipeMessage = -1678159531,
        UINetworkStealBodyMessage = 195636563,
        UINetworkStopVideoMessage = 640255845,
        UINetworkVideoDoneMessage = -1064816323,
        UINetworkVoiceOverSubtitleTextMessage = -1324401811,
        VeniceNetworkAllWeaponKillsMessage = 1686636336,
        VeniceNetworkAwardGainedMessage = 1266239811,
        VeniceNetworkCreateSquadMessage = 1699257268,
        VeniceNetworkDefibKillMessage = 686957004,
        VeniceNetworkDogTagMessage = 1026685820,
        VeniceNetworkEorStatsMessage = -1657141893,
        VeniceNetworkFocusPointMessage = -999031998,
        VeniceNetworkFriendZoneDebugEnableMessage = 1954526494,
        VeniceNetworkFriendZoneMessage = 1126472782,
        VeniceNetworkJoinSquadByOnlineIdMessage = 961919435,
        VeniceNetworkJoinSquadMessage = 1275276178,
        VeniceNetworkKickFromSquadMessage = -2058389076,
        VeniceNetworkLeaveSquadMessage = -560286709,
        VeniceNetworkLocalClientConnectionInfoUpdatedMessage = 1210474491,
        VeniceNetworkMetricsAchievementMessage = 136534386,
        VeniceNetworkMissionAwardsStatusMessage = 58895944,
        VeniceNetworkNotifyMicStateMessage = -448900239,
        VeniceNetworkOnPlayerSelectedTeamMessage = -891774588,
        VeniceNetworkOrderMessage = -1202174548,
        VeniceNetworkRemoveOrderMessage = -1852393174,
        VeniceNetworkRequestAllWeaponKillsMessage = 252071745,
        VeniceNetworkRequestCoopEorStatsMessage = -1818628263,
        VeniceNetworkRequestCoopPlayerInformationMessage = 740944255,
        VeniceNetworkRequestEorStatsMessage = 42387530,
        VeniceNetworkReviveFinishedMessage = -124628021,
        VeniceNetworkReviveInitiatedMessage = -1269593058,
        VeniceNetworkReviveResponseMessage = -179214438,
        VeniceNetworkSendTelemetryTokenMessage = 937211690,
        VeniceNetworkSetPingMessage = 1213536976,
        VeniceNetworkSetSquadPrivacyMessage = 1235756052,
        VeniceNetworkSetVoiceChannelMessage = -1262333131,
        VeniceNetworkSpotExplosionPackMessage = 386424566,
        VeniceNetworkSpottingMessage = -156812594,
        VeniceNetworkUnlockAchievementsMessage = 1809848230,
        VeniceNetworkUnlockGainedMessage = 2001478098,
        VeniceNetworkVirtualGameStateMessage = -2064178118,
        VeniceServerMetricsKitPickedupMessage = 894197517,
    }
    /**
     * Represents a network socket.
     */
    class NetSocket {

        /**
         * Attempts to establish a connection to the specified target at the specified port. Returns a status code. Status code `0` indicates the operation completed successfully while any other number represents an error. For a complete listing of error codes refer to the [Windows Sockets Error Codes](https://msdn.microsoft.com/en-us/library/windows/desktop/ms740668\(v=vs.85\).aspx) table on MSDN.

         */
        Connect(target: string, port: number): number;
        /**
         * Attempts to read data from the socket. Returns the data and a status code. The length of the returned data will not necessarily be the same as the requested data length.
         */
        Read(length: number): string;
        /**
         * Writes data to the socket. Returns the number of bytes written and a status code.
         */
        Write(data: string): number;
        /**
         * Terminates the connection (if active) and destroys the underlying socket. Returns a status code.
         */
        Destroy(): number;
        /**
         * Attempts to read a datagram. Returns the data, the source ip, source port, and a status code. The length of the returned data will not necessarily be the same as the requested data length.
         */
        ReadFrom(length: number, host: string, port: number): string;
        /**
         * Sends data to the specified destination. Returns the number of bytes written and a status code.
         */
        WriteTo(data: string, host: string, port: number): number;

    }

    export enum NetSocketFamily {
        INET = 0,
        INET6 = 1,
    }
    export enum NetSocketType {
        Stream = 0,
        Datagram = 1,
    }
    class PhysicsEntityBase extends VUShared.SpatialEntity {

        constructor(other: VUShared.Entity);
        constructor(other: VUShared.SpatialEntity);

        static typeInfo: VUShared.TypeInformation;

        readonly mass: number;
        readonly invMass: number;
        linearVelocity: VUShared.Vec3 | undefined;
        angularVelocity: VUShared.Vec3 | undefined;
        readonly position: VUShared.Vec3 | undefined;
        sleeping: boolean;
        readonly addedToWorld: boolean;
        readonly partCount: number;
        gravityFactor: number;
        friction: number;
        restitution: number;
        linearDamping: number;
        angularDamping: number;
        userData: VUShared.Entity | undefined;

        AddToWorld(): void;
        RemoveFromWorld(): void;
        GetPart(partId: number): VUShared.Entity | undefined;
        GetPartTransform(partId: number): VUShared.QuatTransform | undefined;
        GetPartMaterial(partId: number): VUShared.DataContainer | undefined;
        GetPartMaterial(partId: number, atPos: VUShared.Vec3): VUShared.DataContainer | undefined;
        GetPartMaterialFlags(partId: number): number;
        GetProperty(propertyId: number): number;
        SetProperty(propertyId: number, value: number): void;
        RemoveProperty(propertyId: number): number;
        SetMass(mass: number, updateInertia: boolean): void;
        ApplyForce(deltaTime: number, force: VUShared.Vec3): void;
        ApplyForce(deltaTime: number, force: VUShared.Vec3, position: VUShared.Vec3): void;
        ApplyTorque(deltaTime: number, torque: VUShared.Vec3): void;

    }

    class Quat {

        constructor();
        constructor(x: number, y: number, z: number, w: number);
        constructor(eulerAngles: VUShared.Vec3);
        constructor(forward: VUShared.Vec3, up: VUShared.Vec3);
        constructor(data: {});

        x: number;
        y: number;
        z: number;
        w: number;
        readonly length: number;
        readonly lengthSquared: number;

        ToEuler(): VUShared.Vec3;
        Normalize(): VUShared.Quat;
        Dot(other: VUShared.Quat): number;
        Angle(other: VUShared.Quat): number;
        RotateTowards(to: VUShared.Quat, maxDegreesDelta: number): VUShared.Quat;
        Slerp(to: VUShared.Quat, t: number): VUShared.Quat;
        SlerpUnclamped(to: VUShared.Quat, t: number): VUShared.Quat;
        Clone(): VUShared.Quat;

    }

    class QuatTransform {

        constructor();
        constructor(rotation: VUShared.Quat, transAndScale: VUShared.Vec4);
        constructor(data: {});

        rotation: VUShared.Quat;
        transAndScale: VUShared.Vec4;

        ToLinearTransform(): VUShared.LinearTransform;
        Clone(): VUShared.QuatTransform;

    }

    export enum RayCastFlags {
        CheckDetailMesh = 1,
        IsAsyncRaycast = 2,
        DontCheckWater = 4,
        DontCheckTerrain = 8,
        DontCheckRagdoll = 16,
        DontCheckCharacter = 32,
        DontCheckGroup = 64,
        DontCheckPhantoms = 128,
    }
    class RayCastHit {

        readonly position: VUShared.Vec3;
        readonly rigidBody: VUShared.Entity | undefined;
        readonly normal: VUShared.Vec3;
        readonly material: VUShared.DataContainer | undefined;
        readonly part: number;
        readonly bone: number;

    }

    export enum RemoteCommandFlag {
        None = 0,
        RequiresLogin = 1,
        DisableOnRanked = 2,
        ReadOnlyOnRanked = 4,
        DisableAfterStartup = 8,
        Hidden = 16,
    }
    /**
     * The ResourceCompartment enum represents the various logical compartments that the game loads game data and assets into, and is used for logical separation and data lookups.
     */
    export enum ResourceCompartment {
        ResourceCompartment_First_ = 0,
        /**
         * This compartment contains core game data (eg. shared configuration and level lists) that gets loaded at startup and remains loaded until the game shuts down.
         */
        ResourceCompartment_Static = 0,
        /**
         * This compartment primarily contains UI data and assets.
         */
        ResourceCompartment_Frontend = 1,
        /**
         * This compartment contains data for the level loading screens.
         */
        ResourceCompartment_LoadingScreen = 2,
        /**
         * This compartment contains the main game data for a specific level (usually everything that's in the main level bundle).
         */
        ResourceCompartment_Game = 3,
        ResourceCompartment_Dynamic_Begin_ = 4,
        /**
         * This marks the first compartment that is dynamically allocated to host synchronized data (synchronized as in data that is loaded on both the server and the client). Such data is usually data / assets in gamemode-specific bundles.
         */
        ResourceCompartment_Dynamic_Synchronized_Begin_ = 4,
        ResourceCompartment_Dynamic_Synchronized_End_ = 104,
        /**
         * This marks the first compartment that is dynamically allocated to host client-only data. Such data is usually data / assets in weapon bundles.
         */
        ResourceCompartment_Dynamic_ClientOnly_Begin_ = 105,
        ResourceCompartment_Dynamic_ClientOnly_End_ = 205,
        ResourceCompartment_Dynamic_End_ = 205,
        ResourceCompartment_Count_ = 205,
        ResourceCompartment_Forbidden = 205,
    }
    class SpatialEntity extends VUShared.Entity {

        constructor(other: VUShared.Entity);

        static typeInfo: VUShared.TypeInformation;

        /**
         * Gets or sets the world transform of this entity.
         > NOTE: You must assign a new LinearTransfrom to update, changing individual vector components **will not work**

         Example:
         ```lua
         local myTransform = mySpatialEntity.transform
         myTransform.trans.y = 1
         mySpatialEntity.transform = myTransform
         ```

         */
        transform: VUShared.LinearTransform;
        readonly aabb: VUShared.AxisAlignedBox;
        readonly aabbTransform: VUShared.LinearTransform;

    }

    export enum SpatialQueryFlags {
        StaticGrid = 1,
        DynamicGrid = 2,
        StaticPhysicsGrid = 4,
        DynamicPhysicsGrid = 8,
        NonPhysicsGrids = 3,
        PhysicsGrids = 12,
        AllGrids = 15,
    }
    export enum SpectatorCameraMode {
        FreeCamera = 0,
        FirstPerson = 1,
        ThirdPerson = 2,
        Disabled = 3,
    }
    class TransformParameterEvent extends VUShared.EntityEvent {

        constructor(eventId: number, transform: VUShared.LinearTransform);
        constructor(eventName: string, transform: VUShared.LinearTransform);

        transform: VUShared.LinearTransform;

    }

    class TypeInformation {

        readonly name: string;
        readonly super: VUShared.TypeInformation | undefined;
        readonly elementType: VUShared.TypeInformation | undefined;
        readonly fields: VUShared.FieldInformation[];
        readonly array: boolean;
        readonly enum: boolean;

    }

    export enum UIAction {
        PlaySound = 600644418,
        LoadLevel = -370087947,
        SelectTeam = 1283842800,
        SelectSpawnPoint = -1239372646,
        GameInput = -368863171,
        Spawn = 230891742,
        OnlineMode = 131475977,
        Matchmake = -2072836812,
        Suicide = -2143870751,
        JoinFriend = -1198157547,
        PeerMode = -631319484,
        PressStart = 1965619586,
        EnterFontend = 1194864785,
        SetActiveController = 712392631,
        PopupResponse = 1073442220,
        MouseInput = -1254356014,
        UpdateSelectedWeapon = -750792545,
        AddInteraction = -1288931362,
        RemoveInteraction = -885167655,
        PlayMovie = 588250809,
        MutePlayer = -138704001,
        SetPlaybackVolume = 552692512,
        SetCaptureVolume = 896106827,
        SetVoiceSensitivity = -1094149348,
        SetCaptureMode = -1868948352,
        ToggleCaptureMute = -386488742,
        TogglePlaybackMute = -1034405071,
        PauseGame = -363873127,
        RestartSingleplayer = -1281393125,
        StartSingleplayer = 104477868,
        QuitGame = 702328210,
        SetSelectedLevel = 630552152,
        SpawnCustomization = -216857053,
        UnSpawnCustomization = 787240248,
        SpawnCustomizationVehicle = -77536549,
        UnSpawnCustomizationVehicle = -1179058080,
        SetCustomization = 1764738330,
        SetWeaponCustomization = 2001688152,
        LeavePlaygroup = -1515650939,
        InviteToPlaygroup = 770709068,
        KickFromPlaygroup = -108970622,
        SelectPlayerToSpectate = -1063771580,
        SquadAction = -1497091703,
        RequestWeaponStats = -413380073,
        StorePrimaryWeaponAccessories = 1375026578,
        StoreVehicleAccessories = -741920220,
        JoinServer = -411369950,
        DetailedServerInfo = 973417758,
        SelectFreeCamera = 1053605696,
        PurchaseItem = -1810638597,
        RedeemCode = 652296598,
        ShowConsoleKeyboard = -1616212868,
        CenterOnMe = 1029712743,
        ShowPreviousLeaderboardChunk = 1826273805,
        ShowNextLeaderboardChunk = -1847241541,
        ShowServerLocations = 1299318733,
        ShowLeaderboardFriends = -2043873050,
        ShowLeaderboardGlobal = -1720163220,
        MatchmakeCoop = -465650489,
        InviteFriend = 5022686,
        OnFrontendCameraChanged = 2033918385,
        RestartCheckpoint = -2117492232,
        GotoLeaderboardIndex = 1330359881,
        SetServerSettings = 230874663,
        RequestLevel = 602445890,
        FetchServerList = -1178859234,
        TelemetryEvent = -401201402,
        UpdateServerInfoTabList = 687391978,
        RequestMyServerExtraInfo = 169427537,
        RefreshServerList = -1743154209,
        PresetListCurrentSelectedChanged = 1921352416,
        RestartServer = -424058057,
        SubstringServerSearch = -365024161,
        RequestMyServerManageInfo = 43280330,
        SetServerBrowserFilter = -1468664338,
        ServerBrowserNextPage = 1056091224,
        AddAsFavouriteServer = 1131332242,
        PresetSettingValueChanged = 1078489695,
        PresetSettingSelectedChanged = -627380963,
        UpdateServerBrowserFilter = -1280432995,
        RemoveFromFavorites = -2041147150,
        PlayersListSelectedChanged = 488541292,
        MapsListSelectedChanged = 1158953731,
        StoreItemSelectedChanged = 986059492,
        RemoveFromAdminList = -621232680,
        RemoveFromBanList = 1679189210,
        ManageAddPlayer = -842595050,
        SetSelectedGameMode = -81260253,
        ReportServer = -328907442,
        HandleSelectedPlayer = -1574350059,
        ApplyVideoSettings = -145439803,
        ShowExitToMenuReason = 1761011594,
        GameTypeSelectedChanged = 801198968,
        ShowInvitesUI = 2010780096,
        IngameDetailedServerInfo = -1186665321,
        ShowGamerCard = -1837564434,
        RunServerSetupWizard = -1049181923,
        CheckIfRSPServerIsOnline = 822021069,
        EditMapRotationList = 855621619,
        OptionsBack = -2113864226,
        SelectNextMap = -983326346,
        MovePlayer = -1784332633,
        KickPlayer = -337674468,
        BanPlayer = -101411973,
        MapRotationSettingValueChanged = 1759871058,
        SelectedAssignmentChanged = 374132989,
        ShowNewLicenses = -1884523662,
        SetCurrentSeverListButtonConf = 1937244169,
        ToggleCustomizationTeam = -1930663017,
        ResetOptions = -936324416,
        ChangeStorageDevice = -2097176062,
        SendChatMessage = -1263240212,
        SavePresetSettings = -1137456604,
        SaveMapsSettings = -86745458,
        ServerLocationSelected = 1161842708,
        ServerExtendSelected = 227248495,
        EnterBindKeyMode = -164353320,
        WaitForDisc1 = -1165953095,
        WaitForDisc2 = -1165953094,
        StartHDInstallation = 1446648469,
        SelectStorageDevice = -1338185748,
        ReloadBattlelog = 58745402,
        StartBattlelogListening = -455323742,
        StopBattlelogListening = -335045254,
        GameManualForwardOnePage = 643411453,
        GameManualBackOnePage = 1108560717,
        GameManualMoveToPage = -1768763416,
        ConfirmKeyBind = 1887665057,
        StoreEnterRentAServerScreen = -1970236713,
        StoreEnterScreen = -543979842,
        StoreExitRentAServerScreen = 1475949279,
        StoreExitScreen = -2112309322,
        CancelMatchmake = -999826862,
        RequestLocalStatistics = -936768452,
        ResumePendingInvites = -1689334535,
        WipePendingInvites = 698988939,
        RevertServerBrowserFilterChanges = 681422267,
        AutoLogin = 768391433,
        ShowFirstPartyOnline = 533806813,
        WarnIfMissingDLC = -1031316017,
        ClearServerDetailes = 1131282590,
        CheckRspOnline = -849958947,
        RequestDynamicPopup = -755476597,
        DiscSwap = 424653229,
        OnLeaveServerBrowser = 1473100502,
        DebugOutput = 444104395,
        DoNothing = 487726163,
        NextCreditsPage = 1342863407,
        PrevCreditsPage = -515768423,
        UpdateCoopGameData = -535908103,
        StopScrollTextTimer = 159051690,
        WipeGraphPopups = 881894971,
        ShutDown = -158957331,
        UpdateScoreboardButtons = -1020925181,
        ToggleMutePlayer = 960084717,
        StartChangeResolutionTimer = -317184342,
        ShowFirstPartyFriendList = -1771626558,
        RadioVO = 1473255213,
        MouseCursor = 1190729422,
        ActivateCommoRose = 640104404,
        ContextVO = -1873904957,
        RestrictMouse = 1787551448,
        AssignmentRewardSelChanged = -1664981959,
        ResetCreditsPage = -1517938563,
        ToggleMinimapType = -1495762704,
        NotifyMinimapZoomLevelHasChanged = 1069683456,
        StartMatchFeedRetrieval = 2055408818,
        StopMatchFeedRetrieval = 12826474,
        UpdateMapSettingsGameMode = -1682072896,
        UpdateMapSettingsMod = 12064299,
        InitializeNewMapRotationPreset = -907021700,
        ResetMapsSettings = -926897862,
        InitializeNewServerSettingPreset = -1220793753,
        ResetServerSettings = 1766441424,
        EditPresetName = -428900901,
        EditMapRotationName = 855562870,
        DeclarePlayerMatchReady = -1144118090,
        RevokePlayerMatchReady = -1269191378,
        EditAllMapRotationList = -961443726,
        VerifyServerStrings = -93784911,
        GetUpdatedServerDetails = -444147807,
        JoinMatch = -1460400524,
        CalculateMapRotMaxPlayers = -1501086432,
        StoreTabChanged = -1472263665,
        UpdatePremiumDetails = -1173035155,
        RequestPremiumData = -2126751169,
        ReleasePremiumData = -1320310873,
        ExitPremiumDetailView = -985594430,
        ShutdownCalendarService = -663715198,
        DownloadDefServerBanner = -1572561337,
        LoadPremiumImages = 2023646188,
        ResetStats = -1121315727,
        ShowPromoStore = -1812426122,
        DefragMemory = 788197175,
        PromoShownTelemetry = -1428940696,
        RefreshStats = -1422441735,
        LoadPromoImageInfo = -590019451,
    }
    class Vec2 {

        constructor();
        constructor(x: number, y: number);
        constructor(data: {});

        static typeInfo: VUShared.TypeInformation;
        static down: VUShared.Vec2;
        static left: VUShared.Vec2;
        static negativeInfinity: VUShared.Vec2;
        static one: VUShared.Vec2;
        static positiveInfinity: VUShared.Vec2;
        static right: VUShared.Vec2;
        static up: VUShared.Vec2;
        static zero: VUShared.Vec2;

        x: number;
        y: number;
        z: number;
        readonly magnitude: number;

        Distance(to: VUShared.Vec2): number;
        Clone(): VUShared.Vec2;

    }

    class Vec3 {

        constructor();
        constructor(x: number, y: number, z: number);
        constructor(data: {});

        static typeInfo: VUShared.TypeInformation;
        static back: VUShared.Vec3;
        static down: VUShared.Vec3;
        static forward: VUShared.Vec3;
        static left: VUShared.Vec3;
        static negativeInfinity: VUShared.Vec3;
        static one: VUShared.Vec3;
        static positiveInfinity: VUShared.Vec3;
        static right: VUShared.Vec3;
        static up: VUShared.Vec3;
        static zero: VUShared.Vec3;

        x: number;
        y: number;
        z: number;
        readonly magnitude: number;

        Dot(_with: VUShared.Vec3): number;
        Cross(_with: VUShared.Vec3): VUShared.Vec3;
        Normalize(): VUShared.Vec3;
        Distance(to: VUShared.Vec3): number;
        MoveTowards(to: VUShared.Vec3, maxDistance: number): VUShared.Vec3;
        Clone(): VUShared.Vec3;

    }

    class Vec4 {

        constructor();
        constructor(x: number, y: number, z: number, w: number);
        constructor(data: {});

        static typeInfo: VUShared.TypeInformation;
        static negativeInfinity: VUShared.Vec4;
        static one: VUShared.Vec4;
        static positiveInfinity: VUShared.Vec4;
        static zero: VUShared.Vec4;

        x: number;
        y: number;
        z: number;
        w: number;
        readonly magnitude: number;

        Distance(to: VUShared.Vec4): number;
        Clone(): VUShared.Vec4;

    }

    class WeaponFiring {

        readonly data: VUShared.DataContainer | undefined;
        firingHolderData: VUShared.DataContainer | undefined;
        readonly gunSway: VUShared.GunSway | undefined;
        weaponState: VUShared.WeaponState;
        lastWeaponState: VUShared.WeaponState;
        nextWeaponState: VUShared.WeaponState;
        switchCooldownTimer: number;
        autoReplenishTime: number;
        timeToWait: number;
        holdReleaseMinDelay: number;
        recoilTimer: number;
        recoilAngleX: number;
        recoilAngleY: number;
        recoilAngleZ: number;
        recoilFovAngle: number;
        primaryAmmoReplenishDelay: number;
        reloadTimeMultiplier: number;
        overheatDropMultiplier: number;
        primaryAmmoToFill: number;
        readonly instanceId: number;

    }

    export enum WeaponState {
        Deploy = 0,
        AltDeploy = 1,
        TriggerReleaseWait = 2,
        NoTrigger = 3,
        PreFireDelay = 4,
        PrimarySingleDelay = 5,
        PrimarySingle = 6,
        BoltActionDelay = 7,
        BoltAction = 8,
        PrimaryAutomaticFire = 9,
        ReloadDelay = 10,
        Reload = 11,
        PostReload = 12,
        PrimaryHoldAndRelease_Hold = 13,
        PrimaryHoldAndRelease_ReleaseDelay = 14,
        PrimaryHoldAndRelease_Release = 15,
        NumWeaponStates = 16,
        WeaponStateSizeInBits = 16,
    }
    class EntityManager {

        static GetIterator(entityType: string): VUShared.EntityIterator;
        static CreateEntity(entityData: VUShared.DataContainer, transform: VUShared.LinearTransform): VUShared.Entity | undefined;
        static CreateEntity(entityData: VUShared.DataContainer, params: VUShared.EntityCreationParams): VUShared.Entity | undefined;
        static CreateEntitiesFromBlueprint(blueprint: VUShared.DataContainer, transform: VUShared.LinearTransform): VUShared.EntityBus | undefined;
        static CreateEntitiesFromBlueprint(blueprint: VUShared.DataContainer, params: VUShared.EntityCreationParams): VUShared.EntityBus | undefined;
        static TraverseAllEntities(callback: Function): void;
        static TraverseAllEntities(context: any, callback: Function): void;

    }

    class Events {

        static Subscribe(eventName: VUShared.EventsEnum | VUServer.EventsEnum | VUClient.EventsEnum | string, callback: Function): VUShared.Event;
        static Subscribe(eventName: string, context: any, callback: Function): VUShared.Event;
        static Dispatch(eventName: string, ...args: any[]): void;
        static DispatchLocal(eventName: string, ...args: any[]): void;
        static Unsubscribe(): void;
        static Unsubscribe(eventName: string): void;

    }

    class Hooks {

        static Install(hookName: VUShared.HooksEnum | VUServer.HooksEnum | VUClient.HooksEnum | string, priority: number, callback: Function): VUShared.Hook;
        static Install(hookName: VUShared.HooksEnum | VUServer.HooksEnum | VUClient.HooksEnum | string, priority: number, context: any, callback: Function): VUShared.Hook;

    }

    class MathUtils {

        static GetRandom(from: number, to: number): number;
        static GetRandomInt(from: number, to: number): number;
        static GetYPRFromULF(up: VUShared.Vec3, left: VUShared.Vec3, forward: VUShared.Vec3): VUShared.Vec3 | undefined;
        static GetTransformFromYPR(yaw: number, pitch: number, roll: number): VUShared.LinearTransform;
        static Approximately(a: number, b: number): boolean;
        static Clamp(value: number, min: number, max: number): number;
        static Round(value: number): number;
        static FNVHash(text: string): number;
        static Lerp(from: number, to: number, t: number): number;
        static RandomGuid(): VUShared.Guid;

    }

    class Net {

        static GetHTTP(url: string): VUShared.HttpResponse | undefined;
        static GetHTTP(url: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static GetHTTPAsync(url: string, callback: Function): void;
        static GetHTTPAsync(url: string, options: VUShared.HttpOptions, callback: Function): void;
        static GetHTTPAsync(url: string, context: any, callback: Function): void;
        static GetHTTPAsync(url: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static HeadHTTP(url: string): VUShared.HttpResponse | undefined;
        static HeadHTTP(url: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static HeadHTTPAsync(url: string, callback: Function): void;
        static HeadHTTPAsync(url: string, options: VUShared.HttpOptions, callback: Function): void;
        static HeadHTTPAsync(url: string, context: any, callback: Function): void;
        static HeadHTTPAsync(url: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static PostHTTP(url: string, data: string): VUShared.HttpResponse | undefined;
        static PostHTTP(url: string, data: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static PostHTTPAsync(url: string, data: string, callback: Function): void;
        static PostHTTPAsync(url: string, data: string, options: VUShared.HttpOptions, callback: Function): void;
        static PostHTTPAsync(url: string, data: string, context: any, callback: Function): void;
        static PostHTTPAsync(url: string, data: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static PutHTTP(url: string, data: string): VUShared.HttpResponse | undefined;
        static PutHTTP(url: string, data: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static PutHTTPAsync(url: string, data: string, callback: Function): void;
        static PutHTTPAsync(url: string, data: string, options: VUShared.HttpOptions, callback: Function): void;
        static PutHTTPAsync(url: string, data: string, context: any, callback: Function): void;
        static PutHTTPAsync(url: string, data: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static DeleteHTTP(url: string): VUShared.HttpResponse | undefined;
        static DeleteHTTP(url: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static DeleteHTTPAsync(url: string, callback: Function): void;
        static DeleteHTTPAsync(url: string, options: VUShared.HttpOptions, callback: Function): void;
        static DeleteHTTPAsync(url: string, context: any, callback: Function): void;
        static DeleteHTTPAsync(url: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static OptionsHTTP(url: string): VUShared.HttpResponse | undefined;
        static OptionsHTTP(url: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static OptionsHTTPAsync(url: string, callback: Function): void;
        static OptionsHTTPAsync(url: string, options: VUShared.HttpOptions, callback: Function): void;
        static OptionsHTTPAsync(url: string, context: any, callback: Function): void;
        static OptionsHTTPAsync(url: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static PatchHTTP(url: string, data: string): VUShared.HttpResponse | undefined;
        static PatchHTTP(url: string, data: string, options: VUShared.HttpOptions): VUShared.HttpResponse | undefined;
        static PatchHTTPAsync(url: string, data: string, callback: Function): void;
        static PatchHTTPAsync(url: string, data: string, options: VUShared.HttpOptions, callback: Function): void;
        static PatchHTTPAsync(url: string, data: string, context: any, callback: Function): void;
        static PatchHTTPAsync(url: string, data: string, options: VUShared.HttpOptions, context: any, callback: Function): void;
        static Socket(family: VUShared.NetSocketFamily, type: VUShared.NetSocketType): VUShared.NetSocket | undefined;

    }

    class ResourceManager {

        static MountSuperBundle(superbundle: string, mediaHint?: VUShared.MediaHint, optional?: boolean): void;
        static UnmountSuperBundle(superbundle: string): void;
        static GetSettings(settingsType: string): VUShared.DataContainer | undefined;
        static LookupDataContainer(compartment: VUShared.ResourceCompartment, name: string): VUShared.DataContainer | undefined;
        static SearchForDataContainer(name: string): VUShared.DataContainer | undefined;
        static FindInstanceByGuid(partitionGuid: VUShared.Guid, instanceGuid: VUShared.Guid): VUShared.DataContainer | undefined;
        static SearchForInstanceByGuid(instanceGuid: VUShared.Guid): VUShared.DataContainer | undefined;
        static FindDatabasePartition(partitionGuid: VUShared.Guid): VUShared.DatabasePartition | undefined;
        static FindPartitionForInstance(instance: VUShared.DataContainer): VUShared.DatabasePartition | undefined;
        static RegisterInstanceLoadHandler(partitionGuid: VUShared.Guid, instanceGuid: VUShared.Guid, callback: Function): VUShared.ContainerCallback | undefined;
        static RegisterInstanceLoadHandler(partitionGuid: VUShared.Guid, instanceGuid: VUShared.Guid, context: any, callback: Function): VUShared.ContainerCallback;
        static RegisterInstanceLoadHandlerOnce(partitionGuid: VUShared.Guid, instanceGuid: VUShared.Guid, callback: Function): VUShared.ContainerCallback;
        static RegisterInstanceLoadHandlerOnce(partitionGuid: VUShared.Guid, instanceGuid: VUShared.Guid, context: any, callback: Function): VUShared.ContainerCallback;
        static AddRegistry(registry: VUShared.DataContainer, compartment: VUShared.ResourceCompartment): void;
        static BeginLoadData(compartment: VUShared.ResourceCompartment, bundles: string[]): number;
        static EndLoadData(handle: number): boolean;
        static PollBundleOperation(handle: number): boolean;
        static CancelBundleOperation(handle: number): void;
        static BeginClear(compartment: VUShared.ResourceCompartment): number;
        static EndClear(handle: number): void;
        static AllocateDynamicCompartment(name: string, parent: VUShared.ResourceCompartment, clientOnly: boolean): VUShared.ResourceCompartment;
        static DestroyDynamicCompartment(compartment: VUShared.ResourceCompartment): void;

    }

    class SharedUtils {

        static Print(data: any): void;
        static GetTime(): number;
        static GetTimeMS(): number;
        static IsClientModule(): boolean;
        static IsServerModule(): boolean;
        static SerializeTable(table: {}): string;
        static GetContentPackages(): string[];
        static GetLevelName(): string | undefined;
        static GetCurrentGameMode(): string | undefined;
        static GetTickrate(): number;

    }


    export enum EventsEnum {
        /**
         * @example
         *    Events.Subscribe(EventsEnum.Engine_Message, (message: VUShared.Message) => {});
         */
        Engine_Message = 'Engine:Message',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Engine_Update, (deltaTime: number, simulationDeltaTime: number) => {});
         */
        Engine_Update = 'Engine:Update',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Extension_Loaded, () => {});
         */
        Extension_Loaded = 'Extension:Loaded',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Extension_Unloading, () => {});
         */
        Extension_Unloading = 'Extension:Unloading',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.GunSway_Update, (gunSway: VUShared.GunSway, weapon: VUShared.Entity | undefined, weaponFiring: VUShared.WeaponFiring | undefined, deltaTime: number) => {});
         */
        GunSway_Update = 'GunSway:Update',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.GunSway_UpdateRecoil, (gunSway: VUShared.GunSway, weapon: VUShared.Entity | undefined, weaponFiring: VUShared.WeaponFiring | undefined, deltaTime: number) => {});
         */
        GunSway_UpdateRecoil = 'GunSway:UpdateRecoil',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_Destroy, () => {});
         */
        Level_Destroy = 'Level:Destroy',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_LoadingInfo, (screenInfo: string) => {});
         */
        Level_LoadingInfo = 'Level:LoadingInfo',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_LoadResources, (levelName: string, gameMode: string, isDedicatedServer: boolean) => {});
         */
        Level_LoadResources = 'Level:LoadResources',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Level_RegisterEntityResources, (levelData: VUShared.DataContainer) => {});
         */
        Level_RegisterEntityResources = 'Level:RegisterEntityResources',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.Partition_Loaded, (partition: VUShared.DatabasePartition) => {});
         */
        Partition_Loaded = 'Partition:Loaded',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.UpdateManager_Update, (deltaTime: number, updatePass: FB.UpdatePass) => {});
         */
        UpdateManager_Update = 'UpdateManager:Update',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.WeaponFiring_Create, (weaponFiring: VUShared.WeaponFiring) => {});
         */
        WeaponFiring_Create = 'WeaponFiring:Create',

        /**
         * @example
         *    Events.Subscribe(EventsEnum.WeaponFiring_Update, (weaponFiring: VUShared.WeaponFiring) => {});
         */
        WeaponFiring_Update = 'WeaponFiring:Update',

    }
    export enum HooksEnum {
        /**
         * @example
         *    Hooks.Install(HooksEnum.Entity_ShouldCollideWith, (entity: VUShared.Entity, shouldCollideWith: VUShared.Entity) => {});
         */
        Entity_ShouldCollideWith = 'Entity:ShouldCollideWith',

        /**
         * @example
         *    Hooks.Install(HooksEnum.ResourceManager_LoadBundles, (bundles: string[], compartment: VUShared.ResourceCompartment) => {});
         */
        ResourceManager_LoadBundles = 'ResourceManager:LoadBundles',

        /**
         * @example
         *    Hooks.Install(HooksEnum.Terrain_Load, (assetName: string) => {});
         */
        Terrain_Load = 'Terrain:Load',

        /**
         * @example
         *    Hooks.Install(HooksEnum.VisualTerrain_Load, (assetName: string) => {});
         */
        VisualTerrain_Load = 'VisualTerrain:Load',

    }

} // end declare namespace VUShared

declare namespace FB {
    class AABBData extends FB.BaseShapeData {

        /**
         * Creates a new AABBData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AABBData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BaseShapeData to AABBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to AABBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AABBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AABBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AABBData type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        halfExtents: VUShared.Vec3;

    }

    class AbstractAwardData extends FB.TreeNodeBase {

        /**
         * Creates a new AbstractAwardData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AbstractAwardData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeNodeBase to AbstractAwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to AbstractAwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AbstractAwardData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AbstractLeaderboardData extends VUShared.DataContainer {

        /**
         * Creates a new AbstractLeaderboardData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AbstractLeaderboardData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AbstractLeaderboardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AbstractLeaderboardData type.
         */
        static typeInfo: VUShared.TypeInformation;

        leaderboardName: string;

    }

    class AbstractLocoWaypointData extends FB.WaypointData {

        /**
         * Creates a new AbstractLocoWaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AbstractLocoWaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WaypointData to AbstractLocoWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WaypointData);
        /**
         * Casts an instance of type DataContainer to AbstractLocoWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AbstractLocoWaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseTask: FB.AILocoBaseTaskData;

    }

    class AbstractPersistenceData extends FB.Asset {

        /**
         * Creates a new AbstractPersistenceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AbstractPersistenceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AbstractPersistenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AbstractPersistenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AbstractPersistenceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AbstractPersistentStatRef extends VUShared.DataContainer {

        /**
         * Creates a new AbstractPersistentStatRef frostbite instance.
         */
        constructor();
        /**
         * Creates a new AbstractPersistentStatRef frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AbstractPersistentStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AbstractPersistentStatRef type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ActionNode extends FB.UINodeData {

        /**
         * Creates a new ActionNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new ActionNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to ActionNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to ActionNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ActionNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        actionKey: number;
        params: string[];
        actionAsset: FB.Asset | undefined;
        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        dataInputs: FB.UINodePort[];
        appendIncomingParams: boolean;

    }

    class ActionSuppressor {

        /**
         * Creates a new ActionSuppressor frostbite instance.
         */
        constructor();
        /**
         * Creates a new ActionSuppressor frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ActionSuppressor type.
         */
        static typeInfo: VUShared.TypeInformation;

        actionToSuppress: FB.EntryInputActionEnum;
        suppressingValue: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ActionSuppressor;

    }

    export enum AddGameBanResponseType {
        AddGameBanResponseType_Success = 0,
        AddGameBanResponseType_Failure = 1,
        AddGameBanResponseType_UserNotFound = 2,
        AddGameBanResponseType_UserCannotBeBanned = 3,
    }
    export enum AdministrationEventType {
        AdministrationEventType_Add = 0,
        AdministrationEventType_Remove = 1,
        AdministrationEventType_Clear = 2,
        AdministrationEventType_List = 3,
        AdministrationEventType_Load = 4,
        AdministrationEventType_Save = 5,
    }
    export enum AdministrationRestrictionLevel {
        AdministrationRestrictionLevel_Zero = 0,
        AdministrationRestrictionLevel_One = 1,
        AdministrationRestrictionLevel_Two = 2,
        AdministrationRestrictionLevel_Three = 3,
        AdministrationRestrictionLevel_Count = 4,
    }
    class AdsrNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new AdsrNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AdsrNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to AdsrNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to AdsrNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AdsrNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        trigger: FB.AudioGraphNodePort;
        release: FB.AudioGraphNodePort;
        a: FB.AudioGraphNodePort;
        d: FB.AudioGraphNodePort;
        s: FB.AudioGraphNodePort;
        r: FB.AudioGraphNodePort;
        value: FB.AudioGraphNodePort;
        finished: FB.AudioGraphNodePort;

    }

    class AdvancedDogTagData extends FB.DogTagData {

        /**
         * Creates a new AdvancedDogTagData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AdvancedDogTagData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DogTagData to AdvancedDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DogTagData);
        /**
         * Casts an instance of type UnlockAssetBase to AdvancedDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockAssetBase);
        /**
         * Casts an instance of type Asset to AdvancedDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AdvancedDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AdvancedDogTagData type.
         */
        static typeInfo: VUShared.TypeInformation;

        statCode: string;
        statSID: string;
        isStatMeasuredInTime: boolean;

    }

    class AdvertisementComponentData extends FB.PartComponentData {

        /**
         * Creates a new AdvertisementComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AdvertisementComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to AdvertisementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to AdvertisementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AdvertisementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AdvertisementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AdvertisementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AdvertisementComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        adTexture: string;

    }

    class AdvertisementLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new AdvertisementLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new AdvertisementLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to AdvertisementLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to AdvertisementLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AdvertisementLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        members: FB.AdvertisementZoneMember[];

    }

    class AdvertisementZoneMember {

        /**
         * Creates a new AdvertisementZoneMember frostbite instance.
         */
        constructor();
        /**
         * Creates a new AdvertisementZoneMember frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AdvertisementZoneMember type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        filename: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AdvertisementZoneMember;

    }

    class AeroDynamicPhysicsData extends VUShared.DataContainer {

        /**
         * Creates a new AeroDynamicPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AeroDynamicPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AeroDynamicPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AeroDynamicPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bodyDrag: VUShared.Vec3;
        bodyDragOffsetYZ: VUShared.Vec3;
        bodyDragOffsetXZ: VUShared.Vec3;
        bodyDragOffsetXY: VUShared.Vec3;

    }

    class AIAimingConstraintsData extends VUShared.DataContainer {

        /**
         * Creates a new AIAimingConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIAimingConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AIAimingConstraintsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIAimingConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minYaw: number;
        maxYaw: number;
        minPitch: number;
        maxPitch: number;

    }

    export enum AIAltFireFromAntState {
        AltFireFromAntState_NoForcedFire = 0,
        AltFireFromAntState_Prepare = 1,
        AltFireFromAntState_ForceFire = 2,
    }
    export enum AIDeathReactionAnimationType {
        AIDeathReactionAnimationType_1 = 0,
        AIDeathReactionAnimationType_2 = 1,
        AIDeathReactionAnimationType_3 = 2,
        AIDeathReactionAnimationType_4 = 3,
        AIDeathReactionAnimationType_5 = 4,
        AIDeathReactionAnimationType_Count = 5,
    }
    class AIDifficultyData extends FB.GameAIDifficultyData {

        /**
         * Creates a new AIDifficultyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIDifficultyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameAIDifficultyData to AIDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameAIDifficultyData);
        /**
         * Casts an instance of type DataContainer to AIDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIDifficultyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        accuracyIncreaseTimeModifier: number;
        startAccuracyModifierStanding: number;
        startAccuracyModifierCrouching: number;
        finalAccuracyModifierStanding: number;
        finalAccuracyModifierCrouching: number;
        readinessReactionTimeMultiplier: number;

    }

    class AIEntryData extends FB.GameAIEntryData {

        /**
         * Creates a new AIEntryData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIEntryData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameAIEntryData to AIEntryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameAIEntryData);
        /**
         * Casts an instance of type Asset to AIEntryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AIEntryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIEntryData type.
         */
        static typeInfo: VUShared.TypeInformation;

        equipmentType: FB.AIVehicleBehaviourData | undefined;
        armament: FB.ArmamentData | undefined;
        mobility: FB.MobilityData | undefined;
        strengthType: FB.StrengthType;
        reuseTime: number;
        forbidden: boolean;
        hasExposedSoldier: boolean;
        interludeOnly: boolean;
        invalidForAI: boolean;

    }

    class AiffWriterNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new AiffWriterNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AiffWriterNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to AiffWriterNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to AiffWriterNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AiffWriterNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        start: FB.AudioGraphNodePort;
        stop: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;
        fileName: string;

    }

    export enum AIHitReactionAnimationType {
        AIHitReactionAnimationType_1 = 0,
        AIHitReactionAnimationType_2 = 1,
        AIHitReactionAnimationType_3 = 2,
        AIHitReactionAnimationType_4 = 3,
        AIHitReactionAnimationType_5 = 4,
        AIHitReactionAnimationType_Count = 5,
    }
    class AILocoBaseTaskData {

        /**
         * Creates a new AILocoBaseTaskData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoBaseTaskData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoBaseTaskData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poseChangeMovingTowards: FB.AntPoseEnum;
        attentionChangeMovingTowards: FB.AntAttentionStateEnum;
        speedChangeMovingTowards: FB.AntSpeedLevel;
        poseChange: FB.AntPoseEnum;
        attentionStateChange: FB.AntAttentionStateEnum;
        speedLevelChange: FB.AntSpeedLevel;
        radius: number;
        isScripted: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoBaseTaskData;

    }

    class AILocoBinding {

        /**
         * Creates a new AILocoBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        locoTarget: FB.AntRef;
        attentionState: FB.AntRef;
        endPoseEnum: FB.AntRef;
        currentPoseEnum: FB.AntRef;
        enterExitPoseEnum: FB.AntRef;
        runStyle: FB.AntRef;
        targetWaypointPosition: FB.AntRef;
        targetSpeedLevel: FB.AntRef;
        enableProceduralHeadAim: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoBinding;

    }

    class AILocoComponentData extends FB.ComponentData {

        /**
         * Creates a new AILocoComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to AILocoComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AILocoComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AILocoComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AILocoComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AILocoComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.AILocoBinding;
        vaultBinding: FB.AILocoVaultBinding;
        coverBinding: FB.AILocoCoverBinding;
        wantedYaw: number;
        animationEntitySpacePriority: number;

    }

    class AILocoCoverBinding {

        /**
         * Creates a new AILocoCoverBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoCoverBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoCoverBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        prepareFire: FB.AntRef;
        throwGrenade: FB.AntRef;
        peekOut: FB.AntRef;
        idleBehindCover: FB.AntRef;
        peekType: FB.AntRef;
        coverTypeEnum: FB.AntRef;
        coverFireStyle: FB.AntRef;
        enterCover: FB.AntRef;
        exitCover: FB.AntRef;
        isCloseCover: FB.AntRef;
        distanceScale: FB.AntRef;
        absoluteDistance: FB.AntRef;
        angleToNormal: FB.AntRef;
        outAngle: FB.AntRef;
        threatAngle: FB.AntRef;
        stopExitCoverOutAround: FB.AntRef;
        enterStrategy: FB.AntRef;
        exitStyle: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoCoverBinding;

    }

    class AILocoCoverTaskData {

        /**
         * Creates a new AILocoCoverTaskData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoCoverTaskData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoCoverTaskData type.
         */
        static typeInfo: VUShared.TypeInformation;

        wantedPos: VUShared.Vec3;
        threatPosition: VUShared.Vec3;
        coverPose: FB.AntPoseEnum;
        waitTime: number;
        peekOut: FB.CoverPeekType;
        worldAngle: number;
        offsetLength: number;
        exitPose: FB.AntPoseEnum;
        exitAngle: number;
        distanceToNextWaypoint: number;
        coverType: FB.AntCoverEnum;
        enterStrategy: FB.CoverEnterStrategy;
        exitStyle: FB.CoverExitStyle;
        prepareFireType: FB.CoverFireType;
        forceExitCover: boolean;
        useClientPosition: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoCoverTaskData;

    }

    class AILocoMoveTaskData {

        /**
         * Creates a new AILocoMoveTaskData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoMoveTaskData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoMoveTaskData type.
         */
        static typeInfo: VUShared.TypeInformation;

        wantedPos: VUShared.Vec3;
        worldAngle: number;
        waitTime: number;
        enterPose: FB.AntPoseEnum;
        exitPose: FB.AntPoseEnum;
        overrideAngle: boolean;
        useClientPosition: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoMoveTaskData;

    }

    class AILocoVaultBinding {

        /**
         * Creates a new AILocoVaultBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoVaultBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoVaultBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        vault: FB.AntRef;
        distanceBeforeVault: FB.AntRef;
        heightBeforeVault: FB.AntRef;
        lengthOfVaultableObject: FB.AntRef;
        heightAfterVault: FB.AntRef;
        distanceAfterVault: FB.AntRef;
        vaultType: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoVaultBinding;

    }

    class AILocoVaultTaskData {

        /**
         * Creates a new AILocoVaultTaskData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AILocoVaultTaskData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AILocoVaultTaskData type.
         */
        static typeInfo: VUShared.TypeInformation;

        startPoint: VUShared.Vec3;
        distanceBeforeVault: number;
        heightBeforeVault: number;
        heightAfterVault: number;
        lengthOfVaultableObject: number;
        worldAngle: number;
        distanceAfterVault: number;
        vaultType: FB.WaypointVaultType;
        useClientPosition: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AILocoVaultTaskData;

    }

    class AimAtOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new AimAtOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimAtOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to AimAtOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to AimAtOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to AimAtOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AimAtOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AimAtOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AimAtOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AimAtOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AimerModifierData extends FB.Asset {

        /**
         * Creates a new AimerModifierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimerModifierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AimerModifierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AimerModifierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AimerModifierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lookSpeedMultiplier: number;
        onlyInSupportedShooting: boolean;

    }

    class AimingConstraintEntityBinding {

        /**
         * Creates a new AimingConstraintEntityBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimingConstraintEntityBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AimingConstraintEntityBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        proneAimLimit: FB.AntRef;
        proneAimDistance: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AimingConstraintEntityBinding;

    }

    class AimingConstraintEntityCommonData extends FB.Asset {

        /**
         * Creates a new AimingConstraintEntityCommonData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimingConstraintEntityCommonData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AimingConstraintEntityCommonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AimingConstraintEntityCommonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AimingConstraintEntityCommonData type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimingConstraintsBinding: FB.AimingConstraintEntityBinding;
        aimingConstraints: FB.AimingConstraintsData;
        disableAimingConstraintsDelay: number;
        constraintMoveSpeedMultiplier: number;
        shuffleAnimationThreshold: number;
        shuffleAnimationDelay: number;

    }

    class AimingConstraintEntityData extends FB.EntityData {

        /**
         * Creates a new AimingConstraintEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimingConstraintEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AimingConstraintEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AimingConstraintEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AimingConstraintEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AimingConstraintEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AimingConstraintEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        commonData: FB.AimingConstraintEntityCommonData | undefined;
        enabledInProne: boolean;

    }

    class AimingConstraintsData {

        /**
         * Creates a new AimingConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimingConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AimingConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minYaw: number;
        maxYaw: number;
        minPitch: number;
        maxPitch: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AimingConstraintsData;

    }

    class AimingPoseData {

        /**
         * Creates a new AimingPoseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AimingPoseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AimingPoseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minimumPitch: number;
        maximumPitch: number;
        targetingFov: number;
        aimSteadiness: number;
        speedMultiplier: number;
        recoilMultiplier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AimingPoseData;

    }

    export enum AimOrigin {
        AoDefault = 0,
        AoCamera = 1,
        AoWeapon = 2,
    }
    class AIProximityReactionsBinding {

        /**
         * Creates a new AIProximityReactionsBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIProximityReactionsBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AIProximityReactionsBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        aiReaction: FB.AntRef;
        aiExplosionReaction: FB.AntRef;
        aiExplosionForce: FB.AntRef;
        aiStunReaction: FB.AntRef;
        aiStunReactionRandomFactor: FB.AntRef;
        aiReactionDirection: FB.AntRef;
        fireNearby: FB.AntRef;
        aimUpAndDown: FB.AntRef;
        focusAimScale: FB.AntRef;
        focusAiming: FB.AntRef;
        enableProceduralHeadAim: FB.AntRef;
        killFromAnimation: FB.AntRef;
        playerAnimationKill: FB.AntRef;
        playerInitiatedRagdoll: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AIProximityReactionsBinding;

    }

    class AIProximityReactionsComponentData extends FB.ComponentData {

        /**
         * Creates a new AIProximityReactionsComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIProximityReactionsComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to AIProximityReactionsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AIProximityReactionsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AIProximityReactionsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AIProximityReactionsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIProximityReactionsComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.AIProximityReactionsBinding;
        minExplosionImpulseForce: number;
        maxExplosionLookDistance: number;
        fireReactionDistance: number;
        enabled: boolean;

    }

    class AirMissileJammingData {

        /**
         * Creates a new AirMissileJammingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AirMissileJammingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AirMissileJammingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minTurnSpeed: number;
        maxRadius: number;
        minRadius: number;
        theta: number;
        phi: number;
        updateJammingPositionTime: number;
        maxTurnSpeed: number;
        quietModeProbability: number;
        quietModeTime: number;
        jammingTime: number;
        turnCalculationTime: number;
        enableAirMissileJamming: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AirMissileJammingData;

    }

    class AirRadarData extends FB.UIPartData {

        /**
         * Creates a new AirRadarData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AirRadarData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIPartData to AirRadarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to AirRadarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AirRadarData type.
         */
        static typeInfo: VUShared.TypeInformation;

        radarRange: number;
        radarSensitivity: number;
        heatSensitivity: number;
        missileIcon: FB.UIHudIcon;
        centerIcon: FB.UIHudIcon;
        friendlyIcon: FB.UIHudIcon;
        enemyIcon: FB.UIHudIcon;
        laserPaintedIcon: FB.UIHudIcon;
        northIcon: FB.UIHudIcon;
        subScreen: FB.SubScreenData;
        westIcon: FB.UIHudIcon;
        southIcon: FB.UIHudIcon;
        eastIcon: FB.UIHudIcon;
        trackLaserPaintedObjects: boolean;
        trackOnlyUsedVehicles: boolean;
        useCameraComponentTransform: boolean;

    }

    class AirResistanceData extends FB.ProcessorData {

        /**
         * Creates a new AirResistanceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AirResistanceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to AirResistanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to AirResistanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to AirResistanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AirResistanceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dragFactor: number;

    }

    class AISettingsData extends FB.Asset {

        /**
         * Creates a new AISettingsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AISettingsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AISettingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AISettingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AISettingsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soundEnvironmentConstants: FB.SoundEnvironmentConstantData | undefined;
        coverConstants: FB.CoverConstantData | undefined;
        decisionConstants: FB.DecisionConstantData | undefined;
        positionEvaluationConstants: FB.PositionEvaluationConstantData | undefined;
        timingConstants: FB.TimingConstantData | undefined;
        debugConstants: FB.DebugConstantData | undefined;
        readinessLevels: FB.ReadinessLevels;
        defaultBehaviourTemplate: FB.BehaviourTemplateData | undefined;
        defaultVehicleType: FB.AIVehicleBehaviourData | undefined;

    }

    export enum AIStunReactionAnimationType {
        AIStunReactionAnimationType_1 = 0,
        AIStunReactionAnimationType_2 = 1,
        AIStunReactionAnimationType_3 = 2,
        AIStunReactionAnimationType_4 = 3,
        AIStunReactionAnimationType_5 = 4,
        AIStunReactionAnimationType_Count = 5,
    }
    class AISystemAsset extends FB.GameAISystem {

        /**
         * Creates a new AISystemAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new AISystemAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameAISystem to AISystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameAISystem);
        /**
         * Casts an instance of type Asset to AISystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AISystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AISystemAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        behaviours: FB.AIVehicleTypes | undefined;
        orders: FB.OrderSettings | undefined;
        settings: FB.AISettingsData | undefined;

    }

    class AIVehicleBehaviourData extends VUShared.DataContainer {

        /**
         * Creates a new AIVehicleBehaviourData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIVehicleBehaviourData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AIVehicleBehaviourData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIVehicleBehaviourData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        controls: string[];
        behaviours: string[];
        goals: string[];
        intents: FB.IntentData[];

    }

    class AIVehicleTypes extends FB.Asset {

        /**
         * Creates a new AIVehicleTypes frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIVehicleTypes frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AIVehicleTypes. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AIVehicleTypes. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIVehicleTypes type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicleTypes: FB.AIVehicleBehaviourData[];
        goals: FB.BehaviourData[];
        intents: FB.BehaviourData[];

    }

    class AIWeaponData extends FB.GameAIWeaponData {

        /**
         * Creates a new AIWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AIWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameAIWeaponData to AIWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameAIWeaponData);
        /**
         * Casts an instance of type Asset to AIWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AIWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AIWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        strengths: FB.Strengths;
        maxBurstCoolDownTime: number;
        lostTargetBurstCoolDownModifier: number;
        finalAccuracyPercentage: number;
        aimTransitionFireDelay: number;
        minRange: number;
        maxRange: number;
        optimalRangePercentage: number;
        reloadBehavior: FB.ReloadBehavior;
        minExtraReloadTime: number;
        maxExtraReloadTime: number;
        minBurstCoolDownTime: number;
        aimAngularVelocity: number;
        innerInaccurateDistance: number;
        angleToTargetSnap: number;
        sweepDistance: number;
        sweepTime: number;
        waitTimeBeforeFire: number;
        burstLimitNear: FB.BurstLimit;
        burstLimitFar: FB.BurstLimit;
        startAccuracyPercentage: number;
        minimumAccuracyBeforeFiring: number;
        outerInaccurateDistance: number;
        additionalMinimumAccuracyAtMinRange: number;
        gravityModifier: number;
        sweepType: FB.SweepSelectionType;
        aimOrigin: FB.AimOrigin;
        useZoom: boolean;
        allowedAgainstImmortals: boolean;
        aimWhileReloading: boolean;
        aimHighIndirectPath: boolean;
        indirect: boolean;
        isMelee: boolean;
        sweepFirstAttack: boolean;
        isBlindFireAllowed: boolean;
        canAltAttack: boolean;
        isStandStill: boolean;
        canSuppress: boolean;
        useFromCover: boolean;
        inaccuracyFollowsTarget: boolean;
        useInaccuracyAtCloseRange: boolean;
        disableWeaponSway: boolean;
        isAiAllowed: boolean;

    }

    class AlignmentData extends VUShared.DataContainer {

        /**
         * Creates a new AlignmentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AlignmentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AlignmentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AlignmentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        alignAction: FB.EntryInputActionEnum;
        stopTolerance: number;
        speed: number;

    }

    class AllowedVehiclesData extends VUShared.DataContainer {

        /**
         * Creates a new AllowedVehiclesData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AllowedVehiclesData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AllowedVehiclesData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AllowedVehiclesData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AlternateCameraViewData extends VUShared.DataContainer {

        /**
         * Creates a new AlternateCameraViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AlternateCameraViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AlternateCameraViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AlternateCameraViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshOffset: VUShared.Vec3;
        hud: FB.HudData;
        fieldOfView: number;
        worldSpaceLockEfficiency: number;
        mesh: FB.RigidMeshAsset | undefined;
        maskMeshBlueprint: FB.ObjectBlueprint | undefined;
        fadeInDuration: number;
        fovTransitionTime: number;
        blackDuration: number;
        inputSuppression: FB.InputSuppressionData;
        screenExposureAreaScale: number;
        fadeOutDuration: number;
        allowFieldOfViewScaling: boolean;
        lockMeshToRenderView: boolean;
        toggleViewChange: boolean;
        useProfileOptionForToggleViewChange: boolean;
        flirEnabled: boolean;
        fadeToBlack: boolean;

    }

    class AlternateSpawnEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new AlternateSpawnEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AlternateSpawnEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to AlternateSpawnEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AlternateSpawnEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AlternateSpawnEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AlternateSpawnEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AlternateSpawnEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AlternateSpawnEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        team: FB.TeamId;
        priority: number;
        enabled: boolean;

    }

    class AmmoConfigData {

        /**
         * Creates a new AmmoConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AmmoConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AmmoConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        magazineCapacity: number;
        numberOfMagazines: number;
        traceFrequency: number;
        ammoPickupMinAmount: number;
        ammoPickupMaxAmount: number;
        autoReplenishDelay: number;
        ammoBagPickupAmount: number;
        ammoBagPickupDelayMultiplier: number;
        autoReplenishMagazine: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AmmoConfigData;

    }

    class AmmoCrateEntityData extends FB.GameEntityData {

        /**
         * Creates a new AmmoCrateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AmmoCrateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to AmmoCrateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AmmoCrateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AmmoCrateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AmmoCrateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AmmoCrateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AmmoCrateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AmmoCrateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        marker: FB.MapMarkerEntityData | undefined;
        model: FB.StaticModelEntityData | undefined;
        refillDelay: number;
        radius: number;
        enableReplenish: boolean;

    }

    class AndEntityData extends FB.EntityData {

        /**
         * Creates a new AndEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AndEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AndEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AndEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AndEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AndEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AndEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        in1: boolean;
        in2: boolean;

    }

    class AngleOfImpactData {

        /**
         * Creates a new AngleOfImpactData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AngleOfImpactData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AngleOfImpactData type.
         */
        static typeInfo: VUShared.TypeInformation;

        zone12Delimiter: number;
        zone23Delimiter: number;
        zone1Multiplier: number;
        zone2Multiplier: number;
        zone3Multiplier: number;
        enabled: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AngleOfImpactData;

    }

    export enum AngleUnit {
        AngleUnit_Radians = 0,
        AngleUnit_Degrees = 1,
    }
    class Animated1pOnlyWeaponBinding {

        /**
         * Creates a new Animated1pOnlyWeaponBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new Animated1pOnlyWeaponBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Animated1pOnlyWeaponBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        undeployFinished: FB.AntRef;
        cameraFreeWeight: FB.AntRef;
        deploy1P: FB.AntRef;
        hideWeapon1p: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Animated1pOnlyWeaponBinding;

    }

    class Animated3pOnlyWeaponBinding {

        /**
         * Creates a new Animated3pOnlyWeaponBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new Animated3pOnlyWeaponBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Animated3pOnlyWeaponBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        deploy3P: FB.AntRef;
        hideWeapon3p: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Animated3pOnlyWeaponBinding;

    }

    export enum AnimatedAimingEnum {
        AnimatedAimingTwoHanded = 0,
        AnimatedAimingRightHanded = 1,
        AnimatedAimingDisabled = 2,
    }
    class AnimatedCameraData extends FB.CameraData {

        /**
         * Creates a new AnimatedCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CameraData to AnimatedCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to AnimatedCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimatedCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimatedCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        skeleton: FB.SkeletonAsset | undefined;
        cameraBone: string;
        fovBone: string;

    }

    class AnimatedDestructionComponentData extends FB.AntAnimatableComponentData {

        /**
         * Creates a new AnimatedDestructionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedDestructionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AntAnimatableComponentData to AnimatedDestructionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AntAnimatableComponentData);
        /**
         * Casts an instance of type ComponentData to AnimatedDestructionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AnimatedDestructionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimatedDestructionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimatedDestructionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedDestructionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AnimatedDriverEntityData extends FB.GameEntityData {

        /**
         * Creates a new AnimatedDriverEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedDriverEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to AnimatedDriverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AnimatedDriverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AnimatedDriverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AnimatedDriverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimatedDriverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimatedDriverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedDriverEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputTransform: VUShared.LinearTransform;
        vehicleBoost: FB.AntRef;
        vehicleSpeed: FB.AntRef;
        vehicleMovementState: FB.AntRef;
        vehicleClutch: FB.AntRef;
        vehicleBrake: FB.AntRef;
        movementStateStandThreshold: number;
        yaw: FB.NormalizeSettings;
        roll: FB.NormalizeSettings;
        pitch: FB.NormalizeSettings;
        delayAnimationWheelTransform: boolean;

    }

    export enum AnimatedFireEnum {
        AnimatedFireAutomatic = 0,
        AnimatedFireSingle = 1,
        AnimatedFireHoldAndRelease = 2,
        AnimatedFireDelayedSingleShot = 3,
        AnimatedFireSimple = 4,
    }
    class AnimatedPointCloudAsset extends FB.Asset {

        /**
         * Creates a new AnimatedPointCloudAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedPointCloudAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AnimatedPointCloudAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AnimatedPointCloudAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedPointCloudAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AnimatedPointCloudAttributeDesc {

        /**
         * Creates a new AnimatedPointCloudAttributeDesc frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedPointCloudAttributeDesc frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AnimatedPointCloudAttributeDesc type.
         */
        static typeInfo: VUShared.TypeInformation;

        usage: FB.PointCloudAttributeUsage;
        iFrameQuantization: FB.PointCloudAttributeQuantization;
        dFrameQuantization: FB.PointCloudAttributeQuantization;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AnimatedPointCloudAttributeDesc;

    }

    class AnimatedPointCloudComponentData extends FB.ComponentData {

        /**
         * Creates a new AnimatedPointCloudComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedPointCloudComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to AnimatedPointCloudComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AnimatedPointCloudComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimatedPointCloudComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimatedPointCloudComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedPointCloudComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pointCloud: FB.AnimatedPointCloudAsset | undefined;
        externalTime: number;
        startPaused: boolean;

    }

    class AnimatedPointCloudEntityData extends FB.EntityData {

        /**
         * Creates a new AnimatedPointCloudEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedPointCloudEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AnimatedPointCloudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AnimatedPointCloudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimatedPointCloudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimatedPointCloudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedPointCloudEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        pointCloud: FB.AnimatedPointCloudAsset | undefined;
        externalTime: number;
        startPaused: boolean;

    }

    class AnimatedSkeletonDatabase extends VUShared.DataContainer {

        /**
         * Creates a new AnimatedSkeletonDatabase frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedSkeletonDatabase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AnimatedSkeletonDatabase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedSkeletonDatabase type.
         */
        static typeInfo: VUShared.TypeInformation;

        ragdolls: FB.RagdollAsset[];
        items: FB.AnimatedSkeletonDatabaseItem[];

    }

    class AnimatedSkeletonDatabaseItem {

        /**
         * Creates a new AnimatedSkeletonDatabaseItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedSkeletonDatabaseItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AnimatedSkeletonDatabaseItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        asset: FB.SkeletonAsset | undefined;
        names: number[];
        soldierCollision: FB.SkeletonCollisionData | undefined;
        ragdollCollision: FB.SkeletonCollisionData | undefined;
        ragdoll: FB.RagdollAsset | undefined;
        specialBones: string[];
        hipBone: string;
        headBone: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AnimatedSkeletonDatabaseItem;

    }

    class AnimatedTransformEntityData extends FB.EntityData {

        /**
         * Creates a new AnimatedTransformEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedTransformEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AnimatedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AnimatedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimatedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimatedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimatedTransformEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animatable: FB.AntRef;
        externalTime: number;
        controller: FB.AntRef;
        boneName: string;

    }

    class AnimatedWeaponBinding {

        /**
         * Creates a new AnimatedWeaponBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimatedWeaponBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AnimatedWeaponBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        deploy: FB.AntRef;
        altDeploy: FB.AntRef;
        undeploy: FB.AntRef;
        quickSwitch: FB.AntRef;
        reload: FB.AntRef;
        reloadShotgun: FB.AntRef;
        fire: FB.AntRef;
        fireSingle: FB.AntRef;
        fireHoldAndRelease: FB.AntRef;
        fireSimple: FB.AntRef;
        firstShotSpawned: FB.AntRef;
        boltAction: FB.AntRef;
        pumpAction: FB.AntRef;
        meleeAttack: FB.AntRef;
        quickThrow: FB.AntRef;
        quickThrowType: FB.AntRef;
        aimBody: FB.AntRef;
        alwaysAimHead: FB.AntRef;
        oneHanded: FB.AntRef;
        oneHandedAiming: FB.AntRef;
        aimingEnabled: FB.AntRef;
        lowerGun: FB.AntRef;
        breathControl: FB.AntRef;
        rflType: FB.AntRef;
        pstlType: FB.AntRef;
        hgrType: FB.AntRef;
        atType: FB.AntRef;
        shgType: FB.AntRef;
        lmgType: FB.AntRef;
        bagType: FB.AntRef;
        snpType: FB.AntRef;
        zoom: FB.AntRef;
        aimBodyWeight: FB.AntRef;
        disableZoomToggleWeight: FB.AntRef;
        zoomParameter: FB.AntRef;
        zoomScaleFactor: FB.AntRef;
        dispersion: FB.AntRef;
        aimTargetPosBody: FB.AntRef;
        zoomOutSpeed: FB.AntRef;
        zoomInSpeed: FB.AntRef;
        unDeploySpeed: FB.AntRef;
        deploySpeed: FB.AntRef;
        lightEnabled: FB.AntRef;
        fireModeChanged: FB.AntRef;
        animType: FB.AntRef;
        gunDown: FB.AntRef;
        numberOfBulletsLeftInGun: FB.AntRef;
        bulletsLeftInGun: FB.AntRef;
        abortVehicleDeploy: FB.AntRef;
        currentProjectileIndex: FB.AntRef;
        weaponActionESIG: FB.AntRef;
        isSprinting: FB.AntRef;
        preparingToBash: FB.AntRef;
        justStartedSprinting: FB.AntRef;
        kickBackInIronSight: FB.AntRef;
        zoomingTime: FB.AntRef;
        triggerZoomGunTwitch: FB.AntRef;
        weaponChooserSignal: FB.AntRef;
        weaponClassSignal: FB.AntRef;
        offsetX: FB.AntRef;
        offsetY: FB.AntRef;
        offsetZ: FB.AntRef;
        aiAllowFire: FB.AntRef;
        aiAltFireFromAnt: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AnimatedWeaponBinding;

    }

    class AnimationConfigurationData {

        /**
         * Creates a new AnimationConfigurationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationConfigurationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AnimationConfigurationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shootModuleData: FB.AnimationConfigurationShootModuleData;
        weaponOffsetModuleData: FB.WeaponOffsetData | undefined;
        weaponSpeedModuleData: FB.WeaponSpeedData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AnimationConfigurationData;

    }

    class AnimationConfigurationShootModuleData {

        /**
         * Creates a new AnimationConfigurationShootModuleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationConfigurationShootModuleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AnimationConfigurationShootModuleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        zoomedKickbackFactor: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AnimationConfigurationShootModuleData;

    }

    class AnimationControlledStateData extends FB.CharacterStateData {

        /**
         * Creates a new AnimationControlledStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationControlledStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to AnimationControlledStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to AnimationControlledStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimationControlledStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        upNormalTolerance: number;

    }

    class AnimationDrivenBinding {

        /**
         * Creates a new AnimationDrivenBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationDrivenBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AnimationDrivenBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        velocity: FB.AntRef;
        enableCollision: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AnimationDrivenBinding;

    }

    class AnimationEnumerationChoiceEntityData extends FB.EntityData {

        /**
         * Creates a new AnimationEnumerationChoiceEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationEnumerationChoiceEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AnimationEnumerationChoiceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AnimationEnumerationChoiceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimationEnumerationChoiceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimationEnumerationChoiceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimationEnumerationChoiceEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        value: number;

    }

    class AnimationEnumerationEntityData extends FB.EntityData {

        /**
         * Creates a new AnimationEnumerationEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationEnumerationEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AnimationEnumerationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AnimationEnumerationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimationEnumerationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimationEnumerationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimationEnumerationEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        antEnum: FB.AntEnumeration | undefined;

    }

    class AnimationSignalEntityData extends FB.EntityData {

        /**
         * Creates a new AnimationSignalEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationSignalEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AnimationSignalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AnimationSignalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimationSignalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimationSignalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimationSignalEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        signal: FB.AntRef;
        intGameState: FB.AntRef;
        floatGameState: FB.AntRef;
        valueInt: number;
        valueFloat: number;
        reset: boolean;
        continuous: boolean;

    }

    class AnimationSpawnTemplate extends VUShared.DataContainer {

        /**
         * Creates a new AnimationSpawnTemplate frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationSpawnTemplate frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AnimationSpawnTemplate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimationSpawnTemplate type.
         */
        static typeInfo: VUShared.TypeInformation;

        runStyle: FB.AntEnumeration | undefined;

    }

    class AnimationTurretRotationComponentData extends FB.ComponentData {

        /**
         * Creates a new AnimationTurretRotationComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AnimationTurretRotationComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to AnimationTurretRotationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AnimationTurretRotationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AnimationTurretRotationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AnimationTurretRotationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AnimationTurretRotationComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotations: FB.TurretRotationInfo[];
        soldierBaseIndex: number;
        useVehicleWorldTransform: boolean;
        outputWorldTransform: boolean;

    }

    class AntAnimatableComponentData extends FB.ComponentData {

        /**
         * Creates a new AntAnimatableComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntAnimatableComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to AntAnimatableComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AntAnimatableComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AntAnimatableComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AntAnimatableComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntAnimatableComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        subRealm: FB.SubRealm;
        animationData: FB.AntAnimationHandlerData;
        mesh: FB.SkinnedMeshAsset | undefined;
        autoActivate: boolean;
        animationControlledFromStart: boolean;
        forceDisableCulling: boolean;

    }

    class AntAnimatableData {

        /**
         * Creates a new AntAnimatableData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntAnimatableData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntAnimatableData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actor: FB.AntRef;
        proceduralAwareness: FB.ProceduralAwarenessAntRefs | undefined;
        rightHandEffectorDisableOverride: FB.AntRef;
        leftHandEffectorDisableOverride: FB.AntRef;
        masterSkeletonAsset: FB.MasterSkeletonAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntAnimatableData;

    }

    class AntAnimationHandlerData {

        /**
         * Creates a new AntAnimationHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntAnimationHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntAnimationHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animatable: FB.AntAnimatableData;
        rootController: FB.AntRef;
        lodBinding: FB.LodBinding;
        antPackageData: FB.AntPackageAsset[];
        bonesToMirror: FB.GameplayBone[];
        reportBackFromAnt: boolean;
        enableMasterSlaveCopy: boolean;
        isProp: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntAnimationHandlerData;

    }

    class AntAnimationSetAsset extends FB.Asset {

        /**
         * Creates a new AntAnimationSetAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntAnimationSetAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AntAnimationSetAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AntAnimationSetAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntAnimationSetAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        skeletonAsset: FB.SkeletonAsset | undefined;
        actorAssetIndex: number;
        clipAssetIndices: number[];
        loopingClipAssetIndices: number[];
        sceneOpMatrixAssetIndex: number;
        useTraj2Ref: boolean;
        allowAnimationCulling: boolean;

    }

    export enum AntAttentionStateEnum {
        AntAttentionStateEnum_Relaxed = 0,
        AntAttentionStateEnum_Ready = 1,
        AntAttentionStateEnum_Combat = 2,
        AntAttentionStateEnum_Evasive = 3,
        AntAttentionStateEnum_AntEnumCount = 4,
        AntAttentionStateEnum_NoChange = 5,
        AntAttentionStateEnum_Count = 6,
        AntAttentionStateEnum_Dummy1 = 7,
    }
    export enum AntCoverEnum {
        AntCoverEnum_RightCover = 0,
        AntCoverEnum_LeftCover = 1,
        AntCoverEnum_MiddleCover = 2,
        AntCoverEnum_MediumLeftCover = 3,
        AntCoverEnum_MediumRightCover = 4,
        AntCoverEnum_Prone = 5,
        AntCoverEnum_Count = 6,
    }
    export enum AntCoverFireType {
        AntCoverFireType_PeekFire = 0,
        AntCoverFireType_FireStepOut = 1,
        AntCoverFireType_FireOver = 2,
        AntCoverFireType_BlindFireAround = 3,
        AntCoverFireType_BlindFireOver = 4,
        AntCoverFireType_FlankedWhileFiring = 8,
        AntCoverFireType_FireStepOutSlow = 10,
        AntCoverFireType_FireStepOutUrgent = 11,
        AntCoverFireType_FireStepOut_Crouched = 12,
        AntCoverFireType_FireLmg = 13,
        AntCoverFireType_FireFromHipStepOut = 14,
    }
    class AntDrivenComponentData extends FB.ComponentData {

        /**
         * Creates a new AntDrivenComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntDrivenComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to AntDrivenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to AntDrivenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AntDrivenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AntDrivenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntDrivenComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        characterGameState: FB.AnimationDrivenBinding;

    }

    class AntDynamicAvoidanceBinding {

        /**
         * Creates a new AntDynamicAvoidanceBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntDynamicAvoidanceBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntDynamicAvoidanceBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeUntilCollision: FB.AntRef;
        distanceUntilCollision: FB.AntRef;
        normalizedVelocity: FB.AntRef;
        speed: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntDynamicAvoidanceBinding;

    }

    export enum AntEntryIdEnum {
        AntEntryIdEnum_Humvee_Driver = 0,
        AntEntryIdEnum_Humvee_Gunner = 1,
        AntEntryIdEnum_Humvee_PassengerRearLeft = 2,
        AntEntryIdEnum_Humvee_PassengerRearRight = 3,
        AntEntryIdEnum_F16_Pilot = 4,
        AntEntryIdEnum_SU37_Pilot = 5,
        AntEntryIdEnum_AH6_Pilot = 6,
        AntEntryIdEnum_AH64_Pilot = 7,
        AntEntryIdEnum_AH64_Gunner = 8,
        AntEntryIdEnum_Vodnik_Driver = 9,
        AntEntryIdEnum_Vodnik_Gunner = 10,
        AntEntryIdEnum_Humvee_PassengerFrontRight = 11,
        AntEntryIdEnum_Vodnik_PassengerFrontRight = 12,
        AntEntryIdEnum_Vodnik_PassengerRearRight = 13,
        AntEntryIdEnum_Vodnik_PassengerRearLeft = 14,
        AntEntryIdEnum_VadsGunner = 15,
        AntEntryIdEnum_F18F_Pilot = 16,
        AntEntryIdEnum_F18F_Navigator = 17,
        AntEntryIdEnum_M1A2_Gunner = 18,
        AntEntryIdEnum_M1A2_Driver = 19,
    }
    class AntEnumeration extends VUShared.DataContainer {

        /**
         * Creates a new AntEnumeration frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntEnumeration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AntEnumeration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntEnumeration type.
         */
        static typeInfo: VUShared.TypeInformation;

        antAsset: FB.AntRef;
        value: number;

    }

    class AntEventData {

        /**
         * Creates a new AntEventData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntEventData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntEventData type.
         */
        static typeInfo: VUShared.TypeInformation;

        tagId: number;
        event: FB.EventSpec;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntEventData;

    }

    class AntEventEntityData extends FB.GameEntityData {

        /**
         * Creates a new AntEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to AntEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AntEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AntEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AntEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AntEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AntEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        onEnterEvents: FB.AntEventData[];
        onUpdateEvents: FB.AntEventData[];
        onLeaveEvents: FB.AntEventData[];
        sendAsPlayerEvent: boolean;
        autoActivate: boolean;

    }

    export enum AntHitReactionWeaponType {
        AntHitReactionWeaponType_Pistol = 0,
        AntHitReactionWeaponType_SMG = 1,
        AntHitReactionWeaponType_AssaultRifle = 2,
        AntHitReactionWeaponType_LMG = 3,
        AntHitReactionWeaponType_Shotgun = 4,
        AntHitReactionWeaponType_SniperRifle = 5,
        AntHitReactionWeaponType_Explosion = 6,
        AntHitReactionWeaponType_Flashbang = 7,
        AntHitReactionWeaponType_Melee = 8,
    }
    class AntInteractionBinding {

        /**
         * Creates a new AntInteractionBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntInteractionBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntInteractionBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        otherAnimatableID: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntInteractionBinding;

    }

    class AntInteractionData extends FB.GameEntityData {

        /**
         * Creates a new AntInteractionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntInteractionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to AntInteractionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AntInteractionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AntInteractionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AntInteractionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AntInteractionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AntInteractionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntInteractionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        antBindings: FB.AntInteractionBinding;

    }

    class AntiRollBar extends VUShared.DataContainer {

        /**
         * Creates a new AntiRollBar frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntiRollBar frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AntiRollBar. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntiRollBar type.
         */
        static typeInfo: VUShared.TypeInformation;

        stiffness: number;
        torqueActivationLimit: number;

    }

    class AntiRollBars {

        /**
         * Creates a new AntiRollBars frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntiRollBars frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntiRollBars type.
         */
        static typeInfo: VUShared.TypeInformation;

        front: FB.AntiRollBar | undefined;
        rear: FB.AntiRollBar | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntiRollBars;

    }

    class AntiSpamConfig {

        /**
         * Creates a new AntiSpamConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntiSpamConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntiSpamConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        detectionInterval: number;
        detectionIntervalMaxMessageCount: number;
        serverSideMessageCountTolerance: number;
        secondsBlocked: number;
        serverSideSecondsBlockedTolerance: number;
        notificationSid: string;
        stillBlockedSid: string;
        warningSound: FB.SoundWaveAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntiSpamConfig;

    }

    class AntMemorySettings extends VUShared.DataContainer {

        /**
         * Creates a new AntMemorySettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntMemorySettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AntMemorySettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntMemorySettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        rtPoolLayersControllers: number;
        rtPoolStateflowControllers: number;
        rtPoolStateflowNodeControllers: number;
        rtPoolTransitionControllers: number;
        rtPoolClipControllers: number;
        rtPoolChooserControllers: number;
        rtPoolLoopingControllers: number;
        rtPoolTransparentControllers: number;

    }

    class AntPackageAsset extends FB.Asset {

        /**
         * Creates a new AntPackageAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntPackageAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AntPackageAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AntPackageAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntPackageAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        win32FileName: string;
        xePs3FileName: string;
        packagingType: FB.AntPackagingType;
        streamingGuid: VUShared.Guid;
        chunkSize: number;

    }

    export enum AntPackagingType {
        AntPackagingType_Static = 0,
        AntPackagingType_Chunk = 1,
        AntPackagingType_Bundle = 2,
        AntPackagingType_AnimationSet = 3,
    }
    export enum AntPoseEnum {
        AntPoseEnum_Stand = 0,
        AntPoseEnum_Crouch = 1,
        AntPoseEnum_AntEnumCount = 2,
        AntPoseEnum_NoChange = 3,
        AntPoseEnum_Count = 4,
    }
    class AntProjectAsset extends FB.Asset {

        /**
         * Creates a new AntProjectAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntProjectAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AntProjectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AntProjectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntProjectAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        packageAssets: FB.AntPackageAsset[];
        antNativeProjectName: string;
        sceneOp: FB.AntRef;
        projectId: number;

    }

    class AntRef {

        /**
         * Creates a new AntRef frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntRef frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AntRef type.
         */
        static typeInfo: VUShared.TypeInformation;

        assetId: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AntRef;

    }

    class AntSettings extends VUShared.DataContainer {

        /**
         * Creates a new AntSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AntSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        detailedCollisionSpeedLimit: number;
        leanSignalScale: number;
        leanSignalClamp: number;
        maxInterpolationSlots: number;
        maxSingleBoneInterpolationSlots: number;
        reducedInterpolationDistance: number;
        trajectoryInterpolationDistance: number;
        forceLodDistance: number;
        maxAnimatablesPerPoseJob: number;
        checkGiantSoldiers: number;
        clientEmulatesServer: boolean;
        useCameraFov: boolean;
        updateEnable: boolean;
        enablePA: boolean;
        useWeaponFov: boolean;
        disableAnimManagerSceneOps: boolean;
        disableAILodFeature: boolean;
        disableModelAnimationCulling: boolean;
        enableJobs: boolean;
        forcePoseUpdate: boolean;
        runAsHighPriority: boolean;
        interpolatePoses: boolean;
        allowVariableTickLength: boolean;
        enablePackageCache: boolean;
        useHIK: boolean;
        updateLoddingEnable: boolean;
        blockOnJobs: boolean;
        enableDebugLogFile: boolean;
        enablePoseJobs: boolean;
        usePA: boolean;

    }

    export enum AntSpeedLevel {
        AntSpeedLevel_Still = 0,
        AntSpeedLevel_Walk = 1,
        AntSpeedLevel_Jog_DEPRECATED_DO_NOT_USE = 2,
        AntSpeedLevel_Sneak = 3,
        AntSpeedLevel_Run = 4,
        AntSpeedLevel_Sprint = 5,
        AntSpeedLevel_Stairs_Walk_Up = 6,
        AntSpeedLevel_Stairs_Walk_Down = 7,
        AntSpeedLevel_Stairs_Run_Up = 8,
        AntSpeedLevel_Stairs_Run_Down = 9,
        AntSpeedLevel_Stairs_Sprint_Up = 10,
        AntSpeedLevel_Stairs_Sprint_Down = 11,
        AntSpeedLevel_AntEnumCount = 12,
        AntSpeedLevel_NoChange = 13,
        AntSpeedLevel_Count = 14,
    }
    class AntTrackData extends FB.CustomSequenceTrackData {

        /**
         * Creates a new AntTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CustomSequenceTrackData to AntTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CustomSequenceTrackData);
        /**
         * Casts an instance of type EntityData to AntTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AntTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AntTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AntTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        antTrackItemDatas: FB.AntTrackItemData[];

    }

    class AntTrackItemData extends VUShared.DataContainer {

        /**
         * Creates a new AntTrackItemData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AntTrackItemData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AntTrackItemData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AntTrackItemData type.
         */
        static typeInfo: VUShared.TypeInformation;

        controller: FB.AntRef;
        sequenceTrackIndex: number;
        startTime: number;
        numTicks: number;
        resumeAtEnd: boolean;

    }

    class AreaProximityEntityData extends FB.EntityData {

        /**
         * Creates a new AreaProximityEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AreaProximityEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to AreaProximityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AreaProximityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AreaProximityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AreaProximityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AreaProximityEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        proximityDistance: number;
        updatePass: FB.UpdatePass;
        autoStart: boolean;

    }

    class AreaTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new AreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        geometryTransform: VUShared.LinearTransform;
        include: FB.AreaTriggerInclude;
        insideAreaEventRepeatTime: number;
        radius: number;
        useCharacterEntity: boolean;
        oneInsideAreaEventPerSoldier: boolean;
        triggerOnlyOnLeave: boolean;
        resetOnEnable: boolean;
        triggerOnLeaveOnDeath: boolean;
        triggerOnLeaveOnDisable: boolean;

    }

    export enum AreaTriggerInclude {
        ATNone = 0,
        ATAll = 1,
        ATPlayers = 2,
        ATAI = 3,
        ATAI_Allies = 4,
        ATAI_Enemies = 5,
        ATPlayersNotInVehicle = 6,
    }
    class AreaValueTeam {

        /**
         * Creates a new AreaValueTeam frostbite instance.
         */
        constructor();
        /**
         * Creates a new AreaValueTeam frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AreaValueTeam type.
         */
        static typeInfo: VUShared.TypeInformation;

        areaValue: number;
        team: FB.TeamId;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AreaValueTeam;

    }

    class ArmamentData extends VUShared.DataContainer {

        /**
         * Creates a new ArmamentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ArmamentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ArmamentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ArmamentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        threatLength: number;
        turretData: FB.TurretData | undefined;
        isAntiAircraft: boolean;

    }

    class ArmDisarmAwardEntityData extends FB.GameEntityData {

        /**
         * Creates a new ArmDisarmAwardEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ArmDisarmAwardEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to ArmDisarmAwardEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ArmDisarmAwardEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ArmDisarmAwardEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ArmDisarmAwardEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ArmDisarmAwardEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ArmDisarmAwardEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ArmDisarmAwardEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ArtilleryStrikeEntityData extends FB.GameEntityData {

        /**
         * Creates a new ArtilleryStrikeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ArtilleryStrikeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to ArtilleryStrikeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ArtilleryStrikeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ArtilleryStrikeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ArtilleryStrikeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ArtilleryStrikeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ArtilleryStrikeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ArtilleryStrikeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        missileData: FB.MissileEntityData | undefined;
        missileSpawnRadius: number;
        durationOfArtilleryStrike: number;
        maxDelayBetweenProjectiles: number;
        minDelayBetweenProjectiles: number;
        maxDelayBetweenStrikes: number;
        minDelayBetweenStrikes: number;
        minRadiusToSoldier: number;
        radiusWhenFollowingSoldier: number;
        heightOffsetWhenFollowingSoldier: number;
        numberOfStrikes: number;
        maxProjectilesPerStrike: number;
        minProjectilesPerStrike: number;
        followSoldier: boolean;

    }

    class ArtilleryStrikeWeaponData extends FB.WeaponData {

        /**
         * Creates a new ArtilleryStrikeWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ArtilleryStrikeWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to ArtilleryStrikeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to ArtilleryStrikeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to ArtilleryStrikeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ArtilleryStrikeWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxStrikeDistance: number;
        strikeRadius: number;
        spawnHeight: number;
        maxRandomSpawnHeight: number;
        strikeCameraOffset: number;
        spawnHeightMultiplier: number;
        camera: FB.TargetCameraData | undefined;
        aimingCameraHeight: number;
        strikeCameraHeight: number;
        aimingCameraOffset: number;
        strikeCameraFov: number;
        aimingCameraFov: number;
        delayBeforeAimingCamera: number;
        validMinDistance: number;
        fireCameraTime: number;
        strikeCameraTime: number;
        validMaxDistance: number;
        validMaxAngle: number;
        increaseSpawnHeightWithDistance: boolean;
        enableProjectileTrails: boolean;
        enableCameraRotation: boolean;
        fireProjectileFromWeapon: boolean;

    }

    class AssemblyDescriptorData extends FB.InterfaceDescriptorData {

        /**
         * Creates a new AssemblyDescriptorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AssemblyDescriptorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type InterfaceDescriptorData to AssemblyDescriptorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InterfaceDescriptorData);
        /**
         * Casts an instance of type DynamicDataContainer to AssemblyDescriptorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DynamicDataContainer);
        /**
         * Casts an instance of type DataContainer to AssemblyDescriptorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AssemblyDescriptorData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class Asset extends VUShared.DataContainer {

        /**
         * Creates a new Asset frostbite instance.
         */
        constructor();
        /**
         * Creates a new Asset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to Asset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Asset type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class AssetAabbs {

        /**
         * Creates a new AssetAabbs frostbite instance.
         */
        constructor();
        /**
         * Creates a new AssetAabbs frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AssetAabbs type.
         */
        static typeInfo: VUShared.TypeInformation;

        partAabb: VUShared.AxisAlignedBox[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AssetAabbs;

    }

    class AudioCurve {

        /**
         * Creates a new AudioCurve frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioCurve frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AudioCurve type.
         */
        static typeInfo: VUShared.TypeInformation;

        points: FB.AudioCurvePoint[];
        curveType: FB.AudioCurveType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AudioCurve;

    }

    class AudioCurvePoint {

        /**
         * Creates a new AudioCurvePoint frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioCurvePoint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AudioCurvePoint type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: number;
        y: number;
        k: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AudioCurvePoint;

    }

    export enum AudioCurveType {
        AudioCurveType_Spline = 0,
    }
    class AudioGraphAssetParameter extends FB.AudioGraphParameter {

        /**
         * Creates a new AudioGraphAssetParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphAssetParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphParameter to AudioGraphAssetParameter. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphParameter);
        /**
         * Casts an instance of type DataContainer to AudioGraphAssetParameter. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioGraphAssetParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AudioGraphData extends VUShared.DataContainer {

        /**
         * Creates a new AudioGraphData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioGraphData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioGraphData type.
         */
        static typeInfo: VUShared.TypeInformation;

        nodes: FB.AudioGraphNodeData[];
        publicParameters: FB.AudioGraphParameter[];
        publicEvents: FB.AudioGraphEvent[];
        publicAssetParameters: FB.AudioGraphAssetParameter[];
        publicValueCount: number;
        valueCount: number;

    }

    class AudioGraphEvent extends FB.AudioGraphParameter {

        /**
         * Creates a new AudioGraphEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphParameter to AudioGraphEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphParameter);
        /**
         * Casts an instance of type DataContainer to AudioGraphEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioGraphEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AudioGraphNodeData extends VUShared.DataContainer {

        /**
         * Creates a new AudioGraphNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioGraphNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioGraphNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AudioGraphNodePort {

        /**
         * Creates a new AudioGraphNodePort frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphNodePort frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AudioGraphNodePort type.
         */
        static typeInfo: VUShared.TypeInformation;

        unconnectedValue: number;
        valueIndex: number;
        isConnected: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AudioGraphNodePort;

    }

    class AudioGraphNodePortGroup extends VUShared.DataContainer {

        /**
         * Creates a new AudioGraphNodePortGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphNodePortGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioGraphNodePortGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioGraphNodePortGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AudioGraphParameter extends VUShared.DataContainer {

        /**
         * Creates a new AudioGraphParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioGraphParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioGraphParameter. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioGraphParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: number;
        nameHash: number;
        valueIndex: number;

    }

    class AudioLanguage extends VUShared.DataContainer {

        /**
         * Creates a new AudioLanguage frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioLanguage frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioLanguage. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioLanguage type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        languageMapping: FB.LanguageFormat;

    }

    class AudioLanguageMapping {

        /**
         * Creates a new AudioLanguageMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioLanguageMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AudioLanguageMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: FB.AudioLanguage | undefined;
        target: FB.AudioLanguage | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AudioLanguageMapping;

    }

    class AudioLanguagesDependancyObject extends VUShared.DataContainer {

        /**
         * Creates a new AudioLanguagesDependancyObject frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioLanguagesDependancyObject frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioLanguagesDependancyObject. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioLanguagesDependancyObject type.
         */
        static typeInfo: VUShared.TypeInformation;

        audioLanguages: FB.AudioLanguage[];

    }

    class AudioLanguageSetting extends VUShared.DataContainer {

        /**
         * Creates a new AudioLanguageSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioLanguageSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioLanguageSetting. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioLanguageSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        nameHash: number;
        displayName: string;
        mappings: FB.AudioLanguageMapping[];
        isDefault: boolean;

    }

    class AudioMaterialDefinitions extends FB.Asset {

        /**
         * Creates a new AudioMaterialDefinitions frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioMaterialDefinitions frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AudioMaterialDefinitions. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AudioMaterialDefinitions. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioMaterialDefinitions type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AudioObstructionMaterialInfo {

        /**
         * Creates a new AudioObstructionMaterialInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioObstructionMaterialInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AudioObstructionMaterialInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        material: FB.MaterialContainerPair | undefined;
        obstructionFrequency: number;
        gainReduction: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AudioObstructionMaterialInfo;

    }

    class AudioSettings extends VUShared.DataContainer {

        /**
         * Creates a new AudioSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AudioSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        waveCacheSize: number;
        waveCacheHeadroom: number;
        waveCachePruneTimeLimit: number;
        waveCacheRsxSize: number;
        waveCacheRsxPruneTimeLimit: number;
        waveCacheMaxReadIssueCount: number;
        waveCacheMaxReadActiveCount: number;
        audioCoreCpuLoadLimit: number;
        audioCoreCpuLoadRecovery: number;
        audioCoreThread: number;
        audioCoreMixJobThreadCount: number;
        audioCoreMaxMixJobThreadCount: number;
        maxAudibleSoundCount: number;
        audioCoreMinProcStageVoicesToGoWide: number;
        delayLineAllocSize: number;
        reverbAllocSize: number;
        audioCoreMultipleMixJobsEnabled: boolean;

    }

    class AudioSystemAsset extends FB.Asset {

        /**
         * Creates a new AudioSystemAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new AudioSystemAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to AudioSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AudioSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AudioSystemAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        masterPatch: FB.SoundMasterPatchAsset | undefined;
        defaultWave: FB.SoundWaveAsset | undefined;
        streamPools: FB.StreamPoolAsset[];
        sampleRate: number;
        soundSpeed: number;
        dopplerFactor: number;
        tests: FB.SoundTestAsset | undefined;
        mixerSystem: FB.MixerSystemAsset | undefined;
        languages: FB.AudioLanguage[];
        languageSettings: FB.AudioLanguageSetting[];
        defaultLanguage: FB.AudioLanguage | undefined;
        scopes: FB.SoundScopeData[];
        scopeStrategies: FB.SoundScopeStrategyData[];
        scopeSetups: FB.SoundScopeSetupData[];

    }

    export enum AudioSystemSpeakerSetup {
        FiveDotOne = 6,
        SevenDotOne = 8,
    }
    class AutoAimData {

        /**
         * Creates a new AutoAimData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AutoAimData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AutoAimData type.
         */
        static typeInfo: VUShared.TypeInformation;

        autoAimOuterBoxOffset: VUShared.Vec3;
        autoAimOuterBoxExtends: VUShared.Vec3;
        autoAimInnerBoxOffset: VUShared.Vec3;
        autoAimInnerBoxExtends: VUShared.Vec3;
        poseType: FB.CharacterPoseType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AutoAimData;

    }

    class AutoSquadEntityData extends FB.GameEntityData {

        /**
         * Creates a new AutoSquadEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AutoSquadEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to AutoSquadEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AutoSquadEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AutoSquadEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AutoSquadEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AutoSquadEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AutoSquadEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AutoSquadEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        squadId: FB.SquadId;

    }

    class AutoTeamEntityData extends FB.GameEntityData {

        /**
         * Creates a new AutoTeamEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AutoTeamEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to AutoTeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to AutoTeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to AutoTeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to AutoTeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to AutoTeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to AutoTeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AutoTeamEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        teamDifferenceToAutoBalance: number;
        teamAssignMode: FB.TeamAssignMode;
        playerCountNeededToAutoBalance: number;
        forceIntoSquad: boolean;
        rotateTeamOnNewRound: boolean;
        autoBalance: boolean;

    }

    class AvengerScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new AvengerScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AvengerScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to AvengerScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to AvengerScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AvengerScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        avengerKillTimeout: number;

    }

    class AwardableTreeBase extends FB.TreeBase {

        /**
         * Creates a new AwardableTreeBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardableTreeBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeBase to AwardableTreeBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to AwardableTreeBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AwardableTreeBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardableTreeBase type.
         */
        static typeInfo: VUShared.TypeInformation;

        statCategoryTreeCollection: FB.StatCategoryTreeCollection | undefined;
        generalCriteria: FB.CriteriaData[];
        generalStatistics: boolean;

    }

    class AwardAchievementData extends FB.AwardData {

        /**
         * Creates a new AwardAchievementData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardAchievementData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AwardData to AwardAchievementData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AwardData);
        /**
         * Casts an instance of type AbstractAwardData to AwardAchievementData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractAwardData);
        /**
         * Casts an instance of type TreeNodeBase to AwardAchievementData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to AwardAchievementData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardAchievementData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class AwardData extends FB.AbstractAwardData {

        /**
         * Creates a new AwardData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractAwardData to AwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractAwardData);
        /**
         * Casts an instance of type TreeNodeBase to AwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to AwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardData type.
         */
        static typeInfo: VUShared.TypeInformation;

        filteredChildAwards: FB.AwardData[];
        criteria: FB.CriteriaData[];
        code: string;
        description: string;
        nameSid: string;
        kitAssociation: FB.AwardKitAssociation;
        imageName: string;
        imageSmallName: string;
        imageFancyName: string;
        soundName: string;
        repeatValue: FB.AwardType;
        licenses: string[];
        maxRepetitions: number;
        dependencies: FB.CriteriaAward[];
        group: FB.AwardGroup;
        multiplicity: FB.StatsMultiplicity;
        unlockGates: FB.CriteriaGateList | undefined;
        parentAward: FB.AwardData | undefined;
        score: number;
        bucket: FB.ScoringBucket;
        unlockInfos: FB.BasicUnlockInfo[];
        activeOnCreation: boolean;
        visible: boolean;

    }

    class AwardDataTree extends FB.AwardableTreeBase {

        /**
         * Creates a new AwardDataTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardDataTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AwardableTreeBase to AwardDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AwardableTreeBase);
        /**
         * Casts an instance of type TreeBase to AwardDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to AwardDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to AwardDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardDataTree type.
         */
        static typeInfo: VUShared.TypeInformation;

        filteredAwards: FB.AwardData[];

    }

    export enum AwardGroup {
        AwardGroup_Undefined = 0,
        AwardGroup_Ribbons = 1,
        AwardGroup_DogTags = 2,
        AwardGroup_Medals = 3,
        AwardGroup_Star = 4,
        AwardGroup_Mission = 5,
        AwardGroup_LevelComplete = 6,
        AwardGroup_Achievements = 7,
        AwardGroup_LastAwardGroup = 8,
    }
    class AwardHeaderData extends FB.AbstractAwardData {

        /**
         * Creates a new AwardHeaderData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardHeaderData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractAwardData to AwardHeaderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractAwardData);
        /**
         * Casts an instance of type TreeNodeBase to AwardHeaderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to AwardHeaderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardHeaderData type.
         */
        static typeInfo: VUShared.TypeInformation;

        group: FB.AwardGroup;
        multiplicity: FB.StatsMultiplicity;

    }

    export enum AwardKitAssociation {
        AwardKitAssociation_Undefined = 0,
        AwardKitAssociation_Assault = 1,
        AwardKitAssociation_Engineer = 2,
        AwardKitAssociation_Recon = 3,
        AwardKitAssociation_Support = 4,
        AwardKitAssociation_All = 5,
        AwardKitAssociation_LAST_ITEM = 6,
    }
    class AwardStarData extends FB.AwardData {

        /**
         * Creates a new AwardStarData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardStarData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AwardData to AwardStarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AwardData);
        /**
         * Casts an instance of type AbstractAwardData to AwardStarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractAwardData);
        /**
         * Casts an instance of type TreeNodeBase to AwardStarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to AwardStarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardStarData type.
         */
        static typeInfo: VUShared.TypeInformation;

        starTemplate: FB.AwardStarNameData | undefined;

    }

    class AwardStarNameData extends VUShared.DataContainer {

        /**
         * Creates a new AwardStarNameData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardStarNameData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to AwardStarNameData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AwardStarNameData type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameInstances: FB.AwardStarNameInstance[];

    }

    class AwardStarNameInstance {

        /**
         * Creates a new AwardStarNameInstance frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardStarNameInstance frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AwardStarNameInstance type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        category: FB.StatsCategoryBaseData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AwardStarNameInstance;

    }

    class AwardStatus {

        /**
         * Creates a new AwardStatus frostbite instance.
         */
        constructor();
        /**
         * Creates a new AwardStatus frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the AwardStatus type.
         */
        static typeInfo: VUShared.TypeInformation;

        code: string;
        currentValue: number;
        originalValue: number;
        counters: FB.CounterStatus[];
        isCounting: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.AwardStatus;

    }

    export enum AwardType {
        AwardType_OnceGlobally = 0,
        AwardType_OncePerRound = 1,
        AwardType_Unlimited = 2,
        AwardType_Limited = 3,
        AwardType_GateList = 4,
    }
    class AxesInputActionData extends FB.InputActionData {

        /**
         * Creates a new AxesInputActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new AxesInputActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type InputActionData to AxesInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionData);
        /**
         * Casts an instance of type DataContainer to AxesInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the AxesInputActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        axis: FB.InputDeviceAxes;
        normalizeInput: boolean;

    }

    export enum BackendType {
        Backend_Lan = 0,
        Backend_Blaze = 1,
        Backend_Peer = 2,
        Backend_Local = 3,
        Backend_Count_ = 4,
    }
    class BandPassFir64NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new BandPassFir64NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BandPassFir64NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to BandPassFir64NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to BandPassFir64NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BandPassFir64NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        bandwidth: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class BandPassIir2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new BandPassIir2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BandPassIir2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to BandPassIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to BandPassIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BandPassIir2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        bandwidth: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class BangerEntityData extends FB.DynamicGamePhysicsEntityData {

        /**
         * Creates a new BangerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BangerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DynamicGamePhysicsEntityData to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DynamicGamePhysicsEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BangerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BangerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scales: number[];
        mesh: FB.MeshAsset | undefined;
        explosion: FB.ExplosionEntityData | undefined;
        timeToLive: number;
        destructiblePartCount: number;
        useVariableNetworkFrequency: boolean;

    }

    class BangerSpawnImpulseParams extends VUShared.DataContainer {

        /**
         * Creates a new BangerSpawnImpulseParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new BangerSpawnImpulseParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BangerSpawnImpulseParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BangerSpawnImpulseParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        minHorizontalAngle: number;
        maxHorizontalAngle: number;
        minVerticalAngle: number;
        maxVerticalAngle: number;
        minStrength: number;
        maxStrength: number;
        waterStrengthModifier: number;
        linearDamping: number;
        angularDamping: number;

    }

    class BaseEmitterData extends FB.ProcessorData {

        /**
         * Creates a new BaseEmitterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BaseEmitterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to BaseEmitterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to BaseEmitterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to BaseEmitterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BaseEmitterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        emitterAsset: FB.EmitterDocument | undefined;

    }

    class BaseShapeData extends FB.GameObjectData {

        /**
         * Creates a new BaseShapeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BaseShapeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to BaseShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BaseShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BaseShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BaseShapeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BaseSkeletonAsset extends FB.Asset {

        /**
         * Creates a new BaseSkeletonAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new BaseSkeletonAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to BaseSkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BaseSkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BaseSkeletonAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BasicDogTagData extends FB.DogTagData {

        /**
         * Creates a new BasicDogTagData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BasicDogTagData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DogTagData to BasicDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DogTagData);
        /**
         * Casts an instance of type UnlockAssetBase to BasicDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockAssetBase);
        /**
         * Casts an instance of type Asset to BasicDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BasicDogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BasicDogTagData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BasicUnlockInfo {

        /**
         * Creates a new BasicUnlockInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new BasicUnlockInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BasicUnlockInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockGuid: VUShared.Guid;
        identifier: number;
        unlockScore: number;
        licenses: string[];
        additionalLicenses: string[];
        stringId: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BasicUnlockInfo;

    }

    class BehaviourData extends FB.UrgencyUserData {

        /**
         * Creates a new BehaviourData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BehaviourData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UrgencyUserData to BehaviourData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UrgencyUserData);
        /**
         * Casts an instance of type DataContainer to BehaviourData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BehaviourData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class BehaviourTemplateData extends FB.GameBehaviourTemplateData {

        /**
         * Creates a new BehaviourTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BehaviourTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameBehaviourTemplateData to BehaviourTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameBehaviourTemplateData);
        /**
         * Casts an instance of type Asset to BehaviourTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BehaviourTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BehaviourTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        standProbability: number;
        crouchProbability: number;
        turnAgainstTargetDistance: number;
        investigateStopDelay: number;
        explosiveObjectChance: number;
        minAttackBursts: number;
        maxAttackBursts: number;
        attackUrgencyModifier: number;
        altAttackProbability: number;
        readinessReactionTimeMultiplier: number;
        fireBlindOverBurstCount: FB.UIntRange;
        closeRangeAccuracyDistanceOverride: number;
        meleeRange: number;
        meleeMaxTime: number;
        meleeProbability: number;
        coverSwitchTime: FB.FloatRangeDefaultZero;
        fireStyleTimeout: number;
        fireLeanChance: number;
        fireLeanBurstCount: FB.UIntRange;
        fireStepOutChance: number;
        fireStepOutBurstCount: FB.UIntRange;
        fireStepOutSlowChance: number;
        fireStepOutSlowBurstCount: FB.UIntRange;
        fireStepOutUrgentChance: number;
        fireStepOutUrgentBurstCount: FB.UIntRange;
        fireStepOutFireFromHipChance: number;
        fireStepOutFireFromHipBurstCount: FB.UIntRange;
        fireStepOutStandToCrouchChance: number;
        fireStepOutStandToCrouchBurstCount: FB.UIntRange;
        alwaysInFirePose: FB.CoverFireType;
        fireGrenadeStepOutChance: number;
        fireGrenadeStepOutBurstCount: FB.UIntRange;
        fireOverChance: number;
        fireOverBurstCount: FB.UIntRange;
        fireBlindOutChance: number;
        fireBlindOutBurstCount: FB.UIntRange;
        fireBlindOverChance: number;
        suppressingBurstCount: number;
        fireGrenadeBlindOverChance: number;
        fireGrenadeBlindOverBurstCount: FB.UIntRange;
        fireLmgChance: number;
        fireLmgBurstCount: FB.UIntRange;
        shotAtFireGrenadeBlindOverChance: number;
        suppressingBurstCountMin: number;
        suppressingBurstCountMax: number;
        coverWaitTime: FB.FloatRange;
        maxAngleDiffForBlindFire: number;
        strafeToCoverProbablity: number;
        maxSuppressTime: number;
        investigateVisualTestDist: number;
        alwaysStrafeToCoversWithinDistance: number;
        chargeSurpriseVelocity: number;
        chargeSurpriseNearDistance: number;
        chargeSurpriseFlankedDistance: number;
        shotAtFireBlindOutChance: number;
        shotAtFireBlindOverChance: number;
        accuracyIncreaseTime: number;
        targetStrengthFactor: number;
        reloadBelowPercent: number;
        targetDistanceFactor: number;
        suppressIndirectProbability: number;
        targetDangerFactor: number;
        targetIsAttackingFactor: number;
        accuracyModifierVsNonHumans: number;
        accuracyModifier: number;
        soldierMovementVolumeOverride: number;
        alwaysUpdate: boolean;
        leaveVehicleOnSearchAndDestroyOrder: boolean;
        shouldFireThroughSmoke: boolean;
        alwaysStrafeToFirstCover: boolean;
        canMeleeFromScriptedCover: boolean;
        alwaysStrafeToCoversBehindMe: boolean;
        useShotAtSettings: boolean;
        stepBackIfBeingShot: boolean;
        disableMissileGravity: boolean;

    }

    class BFAISettingsData extends FB.AISettingsData {

        /**
         * Creates a new BFAISettingsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFAISettingsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AISettingsData to BFAISettingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AISettingsData);
        /**
         * Casts an instance of type Asset to BFAISettingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BFAISettingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BFAISettingsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        movementConstants: FB.MovementConstantData | undefined;
        turretControlConstants: FB.TurretControlConstantData | undefined;
        searchAndDestroyConstants: FB.SearchAndDestroyConstantData | undefined;
        followConstants: FB.FollowConstantData | undefined;
        combatConstants: FB.CombatConstantData | undefined;

    }

    class BFAISystem extends FB.AISystemAsset {

        /**
         * Creates a new BFAISystem frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFAISystem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AISystemAsset to BFAISystem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AISystemAsset);
        /**
         * Casts an instance of type GameAISystem to BFAISystem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameAISystem);
        /**
         * Casts an instance of type Asset to BFAISystem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BFAISystem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BFAISystem type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BFOrderEntityData extends FB.OrderEntityData {

        /**
         * Creates a new BFOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OrderEntityData to BFOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to BFOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BFOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BFOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BFOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BFOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        forbiddenToFire: boolean;

    }

    class BFServerConfiguration extends VUShared.DataContainer {

        /**
         * Creates a new BFServerConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFServerConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BFServerConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BFServerConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        schedules: FB.BFServerConfigurationSchedule[];

    }

    class BFServerConfigurationData {

        /**
         * Creates a new BFServerConfigurationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFServerConfigurationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BFServerConfigurationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scoreMultiplier: number;
        licenses: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BFServerConfigurationData;

    }

    class BFServerConfigurationSchedule {

        /**
         * Creates a new BFServerConfigurationSchedule frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFServerConfigurationSchedule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BFServerConfigurationSchedule type.
         */
        static typeInfo: VUShared.TypeInformation;

        licenses: string[];
        levels: string[];
        data: FB.BFServerConfigurationData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BFServerConfigurationSchedule;

    }

    class BFServerSettings extends FB.SystemSettings {

        /**
         * Creates a new BFServerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFServerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to BFServerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to BFServerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BFServerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        serverMessage: string;
        ctfRoundTimeModifier: number;
        forceTeamForPlayerTag: string;
        forceTeamForPlayerTagTeam: number;
        noInteractivityTimeoutTime: number;
        noInteractivityThresholdLimit: number;
        noInteractivityBanRoundCount: number;
        teamKillCountForKick: number;
        teamKillValueForKick: number;
        teamKillValueIncrease: number;
        teamKillValueDecreasePerSecond: number;
        teamKillKickForBan: number;
        roundMaxPlayerCount: number;
        roundMinPlayerCount: number;
        roundLockdownCountdown: number;
        roundRestartCountdown: number;
        roundWarmupTimeout: number;
        bannerUrl: string;
        serverPreset: string;
        serverDescription: string;
        serverAdministrationSettings: string;
        gameSize: number;
        serverAdministrationMapRotation: string;
        serverAdministrationMapRotationInformation: string;
        serverAdministrationRoundsPerMap: number;
        spectators: string;
        punkBusterVersion: string;
        teamSwitchImbalanceLimit: number;
        gameMod: string;
        pingSite: string;
        overrideServerConfigurationStartTime: string;
        gunMasterWeaponsPresetIndex: number;
        serverConfigurationRefreshInterval: number;
        deathmatchFriendZoneFallbackCount: number;
        defaultVoiceChannel: FB.VoiceChannel;
        mapSequencerEnabled: boolean;
        kickAPlayerOnVIPJoin: boolean;
        isManDownRotationEnabled: boolean;
        isKillerCameraEnabled: boolean;
        premiumStatus: boolean;
        overrideAutoBalance: boolean;
        autoBalance: boolean;

    }

    class BFTargetEvaluatorComponentData extends FB.TargetEvaluatorComponentData {

        /**
         * Creates a new BFTargetEvaluatorComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BFTargetEvaluatorComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TargetEvaluatorComponentData to BFTargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetEvaluatorComponentData);
        /**
         * Casts an instance of type ComponentData to BFTargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to BFTargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BFTargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BFTargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BFTargetEvaluatorComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        settings: FB.TargetEvaluationConstantData | undefined;

    }

    class BigWorldSetting extends VUShared.DataContainer {

        /**
         * Creates a new BigWorldSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new BigWorldSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BigWorldSetting. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BigWorldSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundAsset | undefined;
        minDistance: number;
        maxDistance: number;
        minDelayTimeInMinutes: number;
        maxDelayTimeInMinutes: number;

    }

    class BigWorldSettingsAsset extends FB.Asset {

        /**
         * Creates a new BigWorldSettingsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new BigWorldSettingsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to BigWorldSettingsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BigWorldSettingsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BigWorldSettingsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        settings: FB.BigWorldSetting[];

    }

    class BinaryLogicNode extends FB.UINodeData {

        /**
         * Creates a new BinaryLogicNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new BinaryLogicNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to BinaryLogicNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to BinaryLogicNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BinaryLogicNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        trueValue: FB.UINodePort | undefined;
        falseValue: FB.UINodePort | undefined;
        dataSourceInfo: FB.UIDataSourceInfo;

    }

    class BinaryOption {

        /**
         * Creates a new BinaryOption frostbite instance.
         */
        constructor();
        /**
         * Creates a new BinaryOption frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BinaryOption type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BinaryOption;

    }

    class BlazeCreateGameParameters {

        /**
         * Creates a new BlazeCreateGameParameters frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlazeCreateGameParameters frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BlazeCreateGameParameters type.
         */
        static typeInfo: VUShared.TypeInformation;

        base: FB.MatchmakingCreateGameParameters;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BlazeCreateGameParameters;

    }

    class BlazePresenceBackendData extends FB.PresenceBackendData {

        /**
         * Creates a new BlazePresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlazePresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceBackendData to BlazePresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceBackendData);
        /**
         * Casts an instance of type Asset to BlazePresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BlazePresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlazePresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        matchmakingSessions: FB.MatchmakingSession[];
        useDemanglerService: boolean;

    }

    class BlazeServerBackendData extends FB.ServerBackendData {

        /**
         * Creates a new BlazeServerBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlazeServerBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ServerBackendData to BlazeServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ServerBackendData);
        /**
         * Casts an instance of type Asset to BlazeServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BlazeServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlazeServerBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        createParameters: FB.BlazeCreateGameParameters;
        configUrl: FB.OnlineEnvironmentConsoleUrl;

    }

    export enum BlendShaderMode {
        BsmLerp = 0,
        BsmAdd = 1,
        BsmSubtract = 2,
        BsmMultiply = 3,
        BsmMultiply2x = 4,
        BsmScreen = 5,
        BsmDifference = 6,
        BsmLighten = 7,
        BsmDarken = 8,
        BsmOverlay = 9,
    }
    export enum BlinkType {
        BTHold = 0,
        BTBlink = 1,
        BTCount = 2,
    }
    class Blueprint extends FB.EntityBusData {

        /**
         * Creates a new Blueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new Blueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityBusData to Blueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to Blueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to Blueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to Blueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Blueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BlueprintAndVariationPair extends FB.Asset {

        /**
         * Creates a new BlueprintAndVariationPair frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintAndVariationPair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to BlueprintAndVariationPair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BlueprintAndVariationPair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintAndVariationPair type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseAsset: FB.Asset | undefined;
        variation: FB.ObjectVariation | undefined;

    }

    class BlueprintBundle extends FB.Asset {

        /**
         * Creates a new BlueprintBundle frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintBundle frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to BlueprintBundle. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BlueprintBundle. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintBundle type.
         */
        static typeInfo: VUShared.TypeInformation;

        blueprint: FB.Blueprint | undefined;
        registryContainer: FB.RegistryContainer | undefined;

    }

    class BlueprintBundleLoaderEntityData extends FB.GameEntityData {

        /**
         * Creates a new BlueprintBundleLoaderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintBundleLoaderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to BlueprintBundleLoaderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to BlueprintBundleLoaderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to BlueprintBundleLoaderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BlueprintBundleLoaderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BlueprintBundleLoaderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BlueprintBundleLoaderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintBundleLoaderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BlueprintBundleMetadata extends VUShared.DataContainer {

        /**
         * Creates a new BlueprintBundleMetadata frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintBundleMetadata frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BlueprintBundleMetadata. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintBundleMetadata type.
         */
        static typeInfo: VUShared.TypeInformation;

        bundlePathName: string;
        bundleName: string;
        blueprintName: string;

    }

    class BlueprintBundleMetadataContainer extends FB.Asset {

        /**
         * Creates a new BlueprintBundleMetadataContainer frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintBundleMetadataContainer frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to BlueprintBundleMetadataContainer. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to BlueprintBundleMetadataContainer. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintBundleMetadataContainer type.
         */
        static typeInfo: VUShared.TypeInformation;

        items: FB.BlueprintContainerItem[];

    }

    class BlueprintBundleSelectorEntityData extends FB.GameEntityData {

        /**
         * Creates a new BlueprintBundleSelectorEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintBundleSelectorEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to BlueprintBundleSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to BlueprintBundleSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to BlueprintBundleSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BlueprintBundleSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BlueprintBundleSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BlueprintBundleSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintBundleSelectorEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        blueprintSelector: FB.SpawnEntitySelector | undefined;

    }

    class BlueprintBundleStateLogicEntityData extends FB.GameEntityData {

        /**
         * Creates a new BlueprintBundleStateLogicEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintBundleStateLogicEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to BlueprintBundleStateLogicEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to BlueprintBundleStateLogicEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to BlueprintBundleStateLogicEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BlueprintBundleStateLogicEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BlueprintBundleStateLogicEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BlueprintBundleStateLogicEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintBundleStateLogicEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bundleNames: string[];

    }

    class BlueprintContainerItem extends VUShared.DataContainer {

        /**
         * Creates a new BlueprintContainerItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlueprintContainerItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BlueprintContainerItem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BlueprintContainerItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        metadata: FB.BlueprintBundleMetadata | undefined;

    }

    class BlurEffectData {

        /**
         * Creates a new BlurEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BlurEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BlurEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dispersionStrength: number;
        dispersionThreshhold: number;
        explosionStrength: number;
        bulletStrength: number;
        explosionFalloffSpeed: number;
        bulletFalloffSpeed: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BlurEffectData;

    }

    export enum BlurFilter {
        BfNone = 0,
        BfGaussian3Pixels = 1,
        BfGaussian5Pixels = 2,
        BfGaussian7Pixels = 3,
        BfGaussian9Pixels = 4,
        BfGaussian15Pixels = 5,
        BfGaussian31Pixels = 6,
    }
    class BoatFloatPhysicsData extends FB.HullFloatPhysicsData {

        /**
         * Creates a new BoatFloatPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoatFloatPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type HullFloatPhysicsData to BoatFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.HullFloatPhysicsData);
        /**
         * Casts an instance of type FloatPhysicsData to BoatFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FloatPhysicsData);
        /**
         * Casts an instance of type DataContainer to BoatFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoatFloatPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        frontRatio: number;

    }

    class BoltActionData {

        /**
         * Creates a new BoltActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoltActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BoltActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        boltActionDelay: number;
        boltActionTime: number;
        holdBoltActionUntilFireRelease: boolean;
        holdBoltActionUntilZoomRelease: boolean;
        forceBoltActionOnFireTrigger: boolean;
        unZoomOnBoltAction: boolean;
        returnToZoomAfterBoltAction: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BoltActionData;

    }

    class BoneCollisionComponentData extends FB.ComponentData {

        /**
         * Creates a new BoneCollisionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoneCollisionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to BoneCollisionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to BoneCollisionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BoneCollisionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BoneCollisionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoneCollisionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        skeletonCollisionData: FB.SkeletonCollisionData | undefined;

    }

    class BoneCollisionData {

        /**
         * Creates a new BoneCollisionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoneCollisionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BoneCollisionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugDrawColor: VUShared.Vec4;
        capsuleOffset: VUShared.Vec3;
        boneName: string;
        animationHitReactionType: FB.HitReactionType;
        materialPair: FB.MaterialContainerPair | undefined;
        boneAxis: number;
        capsuleLength: number;
        capsuleRadius: number;
        minPitch: FB.PitchModifier;
        maxPitch: FB.PitchModifier;
        validInHiLod: boolean;
        validInLowLod: boolean;
        usePhysicsRotation: boolean;
        deactivateIfBehindWall: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BoneCollisionData;

    }

    class BoneFakePhysicsData extends VUShared.DataContainer {

        /**
         * Creates a new BoneFakePhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoneFakePhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BoneFakePhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoneFakePhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fakePhysics: FB.FakePhysicsData | undefined;
        boneName: string;
        boneId: number;

    }

    class BoolEntityData extends FB.EntityData {

        /**
         * Creates a new BoolEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to BoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoolEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        defaultValue: boolean;

    }

    class BoolHubEntityData extends FB.EntityData {

        /**
         * Creates a new BoolHubEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolHubEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to BoolHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BoolHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BoolHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BoolHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoolHubEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        inputCount: number;
        inputSelect: number;

    }

    class BoolPropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new BoolPropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolPropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to BoolPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to BoolPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to BoolPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoolPropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: boolean[];

    }

    class BoolRecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new BoolRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to BoolRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to BoolRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoolRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: boolean[];

    }

    class BoolShaderParameter {

        /**
         * Creates a new BoolShaderParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolShaderParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BoolShaderParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

        parameterName: string;
        value: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BoolShaderParameter;

    }

    class BoolToEventEntityData extends FB.EntityData {

        /**
         * Creates a new BoolToEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolToEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to BoolToEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BoolToEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BoolToEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BoolToEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoolToEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        value: boolean;
        initalEvent: boolean;

    }

    class BoolUnlockValuePair extends FB.UnlockValuePair {

        /**
         * Creates a new BoolUnlockValuePair frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoolUnlockValuePair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockValuePair to BoolUnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockValuePair);
        /**
         * Casts an instance of type DataContainer to BoolUnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoolUnlockValuePair type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: boolean;
        unlockedValue: boolean;

    }

    class Boost {

        /**
         * Creates a new Boost frostbite instance.
         */
        constructor();
        /**
         * Creates a new Boost frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Boost type.
         */
        static typeInfo: VUShared.TypeInformation;

        forwardStrength: number;
        reverseStrength: number;
        dissipationTime: number;
        recoveryTime: number;
        crawlStrength: number;
        accelerationScale: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Boost;

    }

    class BotPriorityConfigData extends VUShared.DataContainer {

        /**
         * Creates a new BotPriorityConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BotPriorityConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BotPriorityConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BotPriorityConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugColor: VUShared.Vec3;
        distance: number;
        period: number;
        angleOffset: number;
        appliesToExecution: boolean;
        appliesToDecisions: boolean;

    }

    class BoxEvaluatorData extends FB.EvaluatorData {

        /**
         * Creates a new BoxEvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoxEvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to BoxEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to BoxEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to BoxEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoxEvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dimensions: VUShared.Vec3;
        pivot: VUShared.Vec3;

    }

    class BoxFloatPhysicsData extends FB.FloatPhysicsData {

        /**
         * Creates a new BoxFloatPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BoxFloatPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FloatPhysicsData to BoxFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FloatPhysicsData);
        /**
         * Casts an instance of type DataContainer to BoxFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BoxFloatPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class BreakableControllerComponentData extends FB.DestructionControllerComponentData {

        /**
         * Creates a new BreakableControllerComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BreakableControllerComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DestructionControllerComponentData to BreakableControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DestructionControllerComponentData);
        /**
         * Casts an instance of type ComponentData to BreakableControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to BreakableControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BreakableControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BreakableControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BreakableControllerComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        breakablePartCount: number;
        networkIdCount: number;

    }

    export enum BreakableControllerComponentNetworkId {
        BreakableControllerComponentNetworkId_Collapsed = 0,
        BreakableControllerComponentNetworkId_SpawnPartObjectsOnCollapse = 1,
        BreakableControllerComponentNetworkId_ExtraPartCount = 2,
    }
    export enum BreakableControllerComponentNetworkIdMultiplier {
        BreakableControllerComponentNetworkIdMultiplier_HidePartObjects = 0,
        BreakableControllerComponentNetworkIdMultiplier_DisablePart = 1,
        BreakableControllerComponentNetworkIdMultiplier_PartCount = 2,
    }
    class BreakableModelEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new BreakableModelEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BreakableModelEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BreakableModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BreakableModelEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        decalVolumeShader: FB.SurfaceShaderBaseAsset | undefined;
        decalVolumeScaleFactor: number;
        mesh: FB.MeshAsset | undefined;
        boneCount: number;
        edgeModelLightMapData: FB.EdgeModelLightMapData | undefined;

    }

    class BreakablePartComponentData extends FB.DestructionPartComponentData {

        /**
         * Creates a new BreakablePartComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BreakablePartComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DestructionPartComponentData to BreakablePartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DestructionPartComponentData);
        /**
         * Casts an instance of type ComponentData to BreakablePartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to BreakablePartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BreakablePartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BreakablePartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BreakablePartComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healthPercentage: number;
        collapsable: boolean;
        destroyNearbyStaticEntities: boolean;

    }

    class BreakableRuinComponentData extends FB.ComponentData {

        /**
         * Creates a new BreakableRuinComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BreakableRuinComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to BreakableRuinComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to BreakableRuinComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BreakableRuinComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BreakableRuinComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BreakableRuinComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        ruinModel: FB.ObjectBlueprint | undefined;

    }

    class BreathControlData extends VUShared.DataContainer {

        /**
         * Creates a new BreathControlData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BreathControlData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to BreathControlData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BreathControlData type.
         */
        static typeInfo: VUShared.TypeInformation;

        breathControlTime: number;
        breathControlReleaseTime: number;
        breathControlPenaltyMultiplier: number;
        breathControlPenaltyTimeout: number;

    }

    class BulletEntityData extends FB.MeshProjectileEntityData {

        /**
         * Creates a new BulletEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BulletEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshProjectileEntityData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to BulletEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BulletEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        stamina: number;
        flyBySound: FB.SoundAsset | undefined;
        dudExplosion: FB.ExplosionEntityData | undefined;
        gravity: number;
        impactImpulse: number;
        detonationTimeVariation: number;
        vehicleDetonationRadius: number;
        vehicleDetonationActivationDelay: number;
        flyBySoundRadius: number;
        flyBySoundSpeed: number;
        firstFrameTravelDistance: number;
        distributeDamageOverTime: number;
        startDamage: number;
        endDamage: number;
        damageFalloffStartDistance: number;
        damageFalloffEndDistance: number;
        timeToArmExplosion: number;
        hasVehicleDetonation: boolean;
        instantHit: boolean;
        stopTrailEffectOnUnspawn: boolean;

    }

    class BulletHitInfo {

        /**
         * Creates a new BulletHitInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new BulletHitInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BulletHitInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        direction: VUShared.Vec3;
        spawnPosition: VUShared.Vec3;
        weaponUnlockAsset: FB.SoldierWeaponUnlockAsset | undefined;
        weaponType: FB.AntHitReactionWeaponType;
        boneType: number;
        shooterPlayerId: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BulletHitInfo;

    }

    class BurstLimit {

        /**
         * Creates a new BurstLimit frostbite instance.
         */
        constructor();
        /**
         * Creates a new BurstLimit frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the BurstLimit type.
         */
        static typeInfo: VUShared.TypeInformation;

        min: number;
        max: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.BurstLimit;

    }

    class BusNodeData extends FB.SoundBusData {

        /**
         * Creates a new BusNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new BusNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundBusData to BusNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundBusData);
        /**
         * Casts an instance of type AudioGraphNodeData to BusNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to BusNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the BusNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        out: FB.AudioGraphNodePort;
        vuPlugin: FB.SoundGraphPluginRef;

    }

    export enum Buttons {
        NoneButton = 0,
        XButton = 1,
        SquareButton = 2,
        CircleButton = 3,
        TriangleButton = 4,
    }
    class ByteRasterData extends FB.RasterQuadtreeData {

        /**
         * Creates a new ByteRasterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ByteRasterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterQuadtreeData to ByteRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterQuadtreeData);
        /**
         * Casts an instance of type Asset to ByteRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ByteRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ByteRasterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CameraActionData extends FB.SimpleMovementActionBaseData {

        /**
         * Creates a new CameraActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimpleMovementActionBaseData to CameraActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimpleMovementActionBaseData);
        /**
         * Casts an instance of type MovementActionData to CameraActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovementActionData);
        /**
         * Casts an instance of type DataContainer to CameraActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actionMode: FB.CameraMovementActionMode;

    }

    class CameraBinding {

        /**
         * Creates a new CameraBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CameraBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        render1pInBackground: FB.AntRef;
        forceRender1pInForeground: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CameraBinding;

    }

    class CameraComponentData extends FB.ComponentData {

        /**
         * Creates a new CameraComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cameraTransitionPos: VUShared.Vec3;
        fieldOfView: number;
        forceFieldOfView: number;
        camera: FB.TargetCameraData | undefined;
        alternateView: FB.AlternateCameraViewData | undefined;
        regularView: FB.RegularCameraViewData;
        freezeHeight: number;
        stanceData: FB.StanceCameraData;
        cameraSoundData: FB.CameraComponentSoundData | undefined;
        soldierAnimatedCamera: FB.SoldierAnimatedCameraData;
        cameraTransitionTime: number;
        meshParentComponentNumber: number;
        enableCameraMesh: boolean;
        receiveImpulsesAsThirdPerson: boolean;
        useCameraTransition: boolean;
        alternateViewEnabled: boolean;
        isFirstPerson: boolean;
        ignoreOwnerOrientation: boolean;

    }

    class CameraComponentSoundData extends VUShared.DataContainer {

        /**
         * Creates a new CameraComponentSoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraComponentSoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CameraComponentSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraComponentSoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        switchToAlternateViewSound: FB.SoundAsset | undefined;
        switchToNormalViewSound: FB.SoundAsset | undefined;

    }

    class CameraData extends FB.GameObjectData {

        /**
         * Creates a new CameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to CameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        occlusionRayOffset: VUShared.Vec3;
        shakeFactor: number;
        preFadeTime: number;
        fadeTime: number;
        fadeWaitTime: number;
        soundListenerRadius: number;
        viewFx: FB.ViewFxData | undefined;
        nearPlane: number;
        shadowViewDistanceScale: number;
        soundOcclusion: number;
        stayFadedWhileStreaming: boolean;

    }

    class CameraEnterAreaTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new CameraEnterAreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraEnterAreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CameraEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CameraEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CameraEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CameraEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraEnterAreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        timeTreshold: number;
        updatePass: FB.UpdatePass;
        autoStart: boolean;

    }

    class CameraEntityBaseData extends FB.SpatialEntityData {

        /**
         * Creates a new CameraEntityBaseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraEntityBaseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to CameraEntityBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CameraEntityBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CameraEntityBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CameraEntityBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CameraEntityBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraEntityBaseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameId: string;
        priority: number;
        enabled: boolean;

    }

    class CameraEntityData extends FB.CameraEntityBaseData {

        /**
         * Creates a new CameraEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CameraEntityBaseData to CameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraEntityBaseData);
        /**
         * Casts an instance of type SpatialEntityData to CameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fov: number;

    }

    export enum CameraIds {
        NoCameraId = 0,
        FreeCameraId = 1,
        EntryCameraId = 2,
        CameraIdCount = 3,
    }
    class CameraLeapData {

        /**
         * Creates a new CameraLeapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraLeapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CameraLeapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        time: number;
        fovModifier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CameraLeapData;

    }

    class CameraLoosePartPhysicsData extends FB.LoosePartPhysicsData {

        /**
         * Creates a new CameraLoosePartPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraLoosePartPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LoosePartPhysicsData to CameraLoosePartPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LoosePartPhysicsData);
        /**
         * Casts an instance of type DataContainer to CameraLoosePartPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraLoosePartPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scale: number;

    }

    class CameraModeAsset extends FB.Asset {

        /**
         * Creates a new CameraModeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraModeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CameraModeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CameraModeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraModeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum CameraMovementActionMode {
        CameraMovementActionMode_Start = 0,
        CameraMovementActionMode_Stop = 1,
        CameraMovementActionMode_StartAndStop = 2,
    }
    class CameraParamsComponentData extends FB.ComponentData {

        /**
         * Creates a new CameraParamsComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraParamsComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CameraParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CameraParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CameraParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CameraParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraParamsComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        viewDistance: number;
        nearPlane: number;
        sunShadowmapViewDistance: number;

    }

    class CameraProximityEvaluatorData extends FB.EvaluatorData {

        /**
         * Creates a new CameraProximityEvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraProximityEvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to CameraProximityEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to CameraProximityEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to CameraProximityEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraProximityEvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        size: VUShared.Vec3;
        offset: VUShared.Vec3;
        innerRadiusDirection: VUShared.Vec3;
        innerRadius: number;
        forwardOffset: number;

    }

    class CameraRecoilData extends VUShared.DataContainer {

        /**
         * Creates a new CameraRecoilData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraRecoilData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CameraRecoilData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraRecoilData type.
         */
        static typeInfo: VUShared.TypeInformation;

        springConstant: number;
        springDamping: number;
        springMinThresholdAngle: number;

    }

    class CameraShakeNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new CameraShakeNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraShakeNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to CameraShakeNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to CameraShakeNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraShakeNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pitch: FB.AudioGraphNodePort;
        yaw: FB.AudioGraphNodePort;
        roll: FB.AudioGraphNodePort;

    }

    class CameraSineCurveData {

        /**
         * Creates a new CameraSineCurveData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraSineCurveData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CameraSineCurveData type.
         */
        static typeInfo: VUShared.TypeInformation;

        frequency: number;
        amplitude: number;
        phaseShift: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CameraSineCurveData;

    }

    class CameraTransition extends VUShared.DataContainer {

        /**
         * Creates a new CameraTransition frostbite instance.
         */
        constructor();
        /**
         * Creates a new CameraTransition frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CameraTransition. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CameraTransition type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CancelOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new CancelOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CancelOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to CancelOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to CancelOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to CancelOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CancelOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CancelOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CancelOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CancelOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CannedAnimationBinding {

        /**
         * Creates a new CannedAnimationBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new CannedAnimationBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CannedAnimationBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelIndex: FB.AntRef;
        scenarioIndex: FB.AntRef;
        actorIndex: FB.AntRef;
        partIndex: FB.AntRef;
        triggerCannedAnimation: FB.AntRef;
        exitCannedAnimation: FB.AntRef;
        externalTime: FB.AntRef;
        blendValue: FB.AntRef;
        advanceScenario: FB.AntRef;
        enteredLoop: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CannedAnimationBinding;

    }

    class CannedScenarioEntityData extends FB.EntityData {

        /**
         * Creates a new CannedScenarioEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CannedScenarioEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CannedScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CannedScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CannedScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CannedScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CannedScenarioEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cannedAnimBinding: FB.CannedAnimationBinding;
        animationEntitySpacePriority: number;
        alwaysClearEntitySpaceWhenInScenario: boolean;

    }

    export enum CapturableType {
        CTDefault = 0,
        CTUnableToChangeTeam = 1,
        CTCaptureEnablable = 2,
    }
    class CapturePointEntityData extends FB.GameEntityData {

        /**
         * Creates a new CapturePointEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CapturePointEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to CapturePointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CapturePointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CapturePointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CapturePointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CapturePointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CapturePointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CapturePointEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        enemyTicketLossWhenCaptured: number;
        minNrToTakeControl: number;
        flagTemplates: FB.ObjectBlueprint[];
        capturePoint: FB.ObjectBlueprint | undefined;
        initialOwnerTeam: FB.TeamId;
        captureRadius: number;
        maxCaptureMultiplier: number;
        areaValue: number;
        spawnMenuListOrdinal: number;
        areaValues: FB.AreaValueTeam[];
        timeToGetControl: number;
        timeToLoseControl: number;
        returnMultiplier: number;
        onlyTakeableByTeam: number;
        showRadius: number;
        hideRadius: number;
        addedMultiplierPerPlayer: number;
        modify3DIconVerticalOffset: number;
        capturableType: FB.CapturableType;
        intruderWarningSID: string;
        isCapturedInUpperSphere: boolean;
        disableWhenLosingControl: boolean;
        loseControlWhenNotClose: boolean;
        disableIfEnemyInside: boolean;
        isVisible: boolean;
        forceSnap: boolean;
        useAreaValuesPerTeam: boolean;
        intruderWarning: boolean;
        showOnMinimap: boolean;
        hoistFlag: boolean;
        startAtBottom: boolean;
        removeWhenCaptured: boolean;
        seesawCapturing: boolean;

    }

    class CapturePointScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new CapturePointScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CapturePointScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to CapturePointScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to CapturePointScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CapturePointScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        squadCappingBonus: number;

    }

    class CellDetailSelectionRule extends FB.PackagingRule {

        /**
         * Creates a new CellDetailSelectionRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new CellDetailSelectionRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PackagingRule to CellDetailSelectionRule. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PackagingRule);
        /**
         * Casts an instance of type Asset to CellDetailSelectionRule. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CellDetailSelectionRule. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CellDetailSelectionRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        detail: FB.PackagingDetailLevel;

    }

    export enum ChangeGameSettingType {
        CGSNone = 0,
        CGSInvertVerticalLookAxis = 1,
        CGSCount = 2,
    }
    class ChangeReadinessOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new ChangeReadinessOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChangeReadinessOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to ChangeReadinessOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to ChangeReadinessOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to ChangeReadinessOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ChangeReadinessOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ChangeReadinessOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ChangeReadinessOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChangeReadinessOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pulse: FB.ReadinessLevel;
        minimum: FB.ReadinessLevel;
        allowDecrease: boolean;

    }

    class CharacterAnimationEntityData extends FB.EntityData {

        /**
         * Creates a new CharacterAnimationEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterAnimationEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CharacterAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CharacterAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterAnimationEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entitySpaceTransform: VUShared.LinearTransform;
        controller: FB.AntRef;
        trackLength: number;
        externalTime: number;
        warpAnimationBlendTime: number;
        restoreControllerOnFinish: boolean;

    }

    class CharacterAnimationSpaceEntityData extends FB.EntityData {

        /**
         * Creates a new CharacterAnimationSpaceEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterAnimationSpaceEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CharacterAnimationSpaceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CharacterAnimationSpaceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterAnimationSpaceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterAnimationSpaceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterAnimationSpaceEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        spacePositionGS: FB.AntRef;
        spaceRotationGS: FB.AntRef;
        warpAnimationBlendTime: number;

    }

    class CharacterAsset extends FB.CharacterBlueprint {

        /**
         * Creates a new CharacterAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterBlueprint to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterBlueprint);
        /**
         * Casts an instance of type ObjectBlueprint to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CharacterBlueprint extends FB.ObjectBlueprint {

        /**
         * Creates a new CharacterBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ObjectBlueprint to CharacterBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to CharacterBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to CharacterBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to CharacterBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to CharacterBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CharacterBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CharacterCameraComponentData extends FB.ComponentData {

        /**
         * Creates a new CharacterCameraComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterCameraComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CharacterCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CharacterCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterCameraComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cameras: FB.TargetCameraData[];
        cameraBoneName: string;

    }

    class CharacterCustomizationAsset extends FB.Asset {

        /**
         * Creates a new CharacterCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CharacterCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CharacterCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        labelSid: string;
        uiHudIcon: FB.UIHudIcon;
        voiceOverLabels: FB.VoiceOverLabel[];
        visualTable: FB.CustomizationTable | undefined;
        specializationTable: FB.CustomizationTable | undefined;

    }

    class CharacterCustomizationComponentData extends FB.ComponentData {

        /**
         * Creates a new CharacterCustomizationComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterCustomizationComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CharacterCustomizationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CharacterCustomizationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterCustomizationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterCustomizationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterCustomizationComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        socketList: FB.CharacterSocketListAsset | undefined;
        sharedLodGroup: FB.MeshLodGroup | undefined;

    }

    class CharacterEntityData extends FB.ControllableEntityData {

        /**
         * Creates a new CharacterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ControllableEntityData to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ControllableEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultViewMode: FB.PersonViewMode;
        playerSpawnType: FB.PlayerSpawnType;
        characterLightingEnable: boolean;

    }

    class CharacterHealthComponentData extends FB.ComponentData {

        /**
         * Creates a new CharacterHealthComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterHealthComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CharacterHealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CharacterHealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterHealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterHealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterHealthComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxHealth: number;
        regenerateHealthPerSecond: number;
        regenerateHealth: boolean;
        isImmortal: boolean;

    }

    class CharacterInVehicleScenarioEntityData extends FB.GameEntityData {

        /**
         * Creates a new CharacterInVehicleScenarioEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterInVehicleScenarioEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to CharacterInVehicleScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CharacterInVehicleScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CharacterInVehicleScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CharacterInVehicleScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterInVehicleScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterInVehicleScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterInVehicleScenarioEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        scenarioAntRef: FB.AntRef;
        levelId: number;
        scenarioId: number;
        actorId: number;
        partId: number;

    }

    class CharacterLightingComponentData extends FB.ComponentData {

        /**
         * Creates a new CharacterLightingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterLightingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CharacterLightingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CharacterLightingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterLightingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterLightingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterLightingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bottomLight: VUShared.Vec3;
        topLight: VUShared.Vec3;
        characterLightingMode: FB.CharacterLightingMode;
        cameraUpRotation: number;
        topLightDirY: number;
        blendFactor: number;
        topLightDirX: number;
        lockToCameraDirection: boolean;
        firstPersonEnable: boolean;
        characterLightEnable: boolean;

    }

    export enum CharacterLightingMode {
        CharacterLightingMode_Add = 0,
        CharacterLightingMode_Blend = 1,
    }
    class CharacterMeleeBinding {

        /**
         * Creates a new CharacterMeleeBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterMeleeBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CharacterMeleeBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        triggerMelee: FB.AntRef;
        selfActor: FB.AntRef;
        otherActor: FB.AntRef;
        meleeActive: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CharacterMeleeBinding;

    }

    class CharacterMeleeCommonBinding {

        /**
         * Creates a new CharacterMeleeCommonBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterMeleeCommonBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CharacterMeleeCommonBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        meleeDistance: FB.AntRef;
        meleeAngle: FB.AntRef;
        meleeDefenceTime: FB.AntRef;
        meleeSequenceTime: FB.AntRef;
        meleeAborted: FB.AntRef;
        closeToTarget: FB.AntRef;
        meleeType: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CharacterMeleeCommonBinding;

    }

    class CharacterPhysicsComponentData extends FB.ComponentData {

        /**
         * Creates a new CharacterPhysicsComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterPhysicsComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CharacterPhysicsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CharacterPhysicsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterPhysicsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterPhysicsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterPhysicsComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        characterPhysics: FB.CharacterPhysicsData | undefined;
        enableCollisionOnSpawn: boolean;

    }

    class CharacterPhysicsData extends FB.Asset {

        /**
         * Creates a new CharacterPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CharacterPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CharacterPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poses: FB.CharacterPoseData[];
        states: FB.CharacterStateData[];
        defaultState: FB.CharacterStateType;
        sprint: FB.CharacterSprintData | undefined;
        materialPair: FB.MaterialContainerPair | undefined;
        pushableObjectWeight: number;
        mass: number;
        maxAscendAngle: number;
        physicalRadius: number;
        waterDepthLimit: number;
        inputAcceleration: number;
        ladderAcceptAngle: number;
        ladderAcceptAnglePitch: number;
        jumpPenaltyTime: number;
        jumpPenaltyFactor: number;
        radiusToPredictCollisionOnCharacters: number;
        allowPoseChangeDuringTransition: boolean;

    }

    export enum CharacterPoseAction {
        CPTNoAction = 0,
        CPTForceToStand = 1,
        CPTForceToCroch = 2,
        CPTForceToProne = 3,
    }
    export enum CharacterPoseCollisionType {
        CharacterPoseCollisionType_Capsule = 0,
        CharacterPoseCollisionType_Pencil = 1,
    }
    class CharacterPoseConstraintsData {

        /**
         * Creates a new CharacterPoseConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterPoseConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CharacterPoseConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        standPose: boolean;
        crouchPose: boolean;
        pronePose: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CharacterPoseConstraintsData;

    }

    class CharacterPoseData extends VUShared.DataContainer {

        /**
         * Creates a new CharacterPoseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterPoseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CharacterPoseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterPoseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        eyePosition: VUShared.Vec3;
        collisionBoxMaxExpand: VUShared.Vec3;
        collisionBoxMinExpand: VUShared.Vec3;
        height: number;
        stepHeight: number;
        throttleModifierCurve: VUShared.Vec2[];
        poseType: FB.CharacterPoseType;
        collisionType: FB.CharacterPoseCollisionType;
        lookConstraints: FB.LookConstraintsData;
        transitionTimes: FB.PoseTransitionTime[];

    }

    export enum CharacterPoseType {
        CharacterPoseType_Stand = 0,
        CharacterPoseType_Crouch = 1,
        CharacterPoseType_Prone = 2,
        CharacterPoseTypeCount = 3,
    }
    class CharacterSocketListAsset extends FB.Asset {

        /**
         * Creates a new CharacterSocketListAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterSocketListAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CharacterSocketListAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CharacterSocketListAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterSocketListAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        gameplaySockets: FB.SocketData[];
        rigidVisualSockets: FB.SocketData[];
        skinnedVisualSockets: FB.SocketData[];

    }

    class CharacterSpawnReferenceObjectData extends FB.SpawnReferenceObjectData {

        /**
         * Creates a new CharacterSpawnReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterSpawnReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpawnReferenceObjectData to CharacterSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpawnReferenceObjectData);
        /**
         * Casts an instance of type ReferenceObjectData to CharacterSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to CharacterSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterSpawnReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        playerType: FB.PlayerSpawnType;
        vehicleEntryIndex: number;
        template: FB.SoldierSpawnTemplateData | undefined;
        humanTargetPreference: number;
        minimapIcon: FB.UIHudIcon;
        allowFallbackOnNextAvailabeVehicleEntry: boolean;
        checkMaxPlayersInVehicle: boolean;
        affectMinimapPosition: boolean;
        isTarget: boolean;
        ignoreVehicleIcon: boolean;

    }

    class CharacterSprintData extends VUShared.DataContainer {

        /**
         * Creates a new CharacterSprintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterSprintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CharacterSprintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterSprintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sprintPowerDecreasePerSecond: number;
        sprintPowerIncreasePerSecond: number;
        sprintMinimumPower: number;
        allowContinousSprinting: boolean;

    }

    class CharacterStateData extends VUShared.DataContainer {

        /**
         * Creates a new CharacterStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CharacterStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poseInfo: FB.CharacterStatePoseInfo[];

    }

    class CharacterStatePoseInfo extends VUShared.DataContainer {

        /**
         * Creates a new CharacterStatePoseInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterStatePoseInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CharacterStatePoseInfo. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterStatePoseInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        poseType: FB.CharacterPoseType;
        velocity: number;
        accelerationGain: number;
        decelerationGain: number;
        sprintGain: number;
        sprintMultiplier: number;
        speedModifier: FB.SpeedModifierData;

    }

    class CharacterStateTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new CharacterStateTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterStateTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterStateTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        activeWeaponSlot: number;
        pitch: number;
        characterPose: FB.CharacterPoseAction;
        ammoToSet: number;
        poseToCheck: FB.CharacterPoseAction;
        weapon: FB.SoldierWeaponBlueprint | undefined;
        healthToSet: number;
        healthToCheck: number;
        seatIndex: number;
        excludeConnectedVehicles: boolean;
        continueToCheckIfHoldingWrongWeapon: boolean;
        stayInVehicleOnMove: boolean;
        checkHealthGreaterOrEqual: boolean;
        checkAllWeapons: boolean;
        shouldCheckSeatIndex: boolean;
        useExitPointWhenLeavingVehicle: boolean;
        disablePhysicsWhenLeavingVehicle: boolean;
        usePitch: boolean;

    }

    export enum CharacterStateType {
        CharacterStateType_OnGround = 0,
        CharacterStateType_Jumping = 1,
        CharacterStateType_InAir = 2,
        CharacterStateType_Climbing = 3,
        CharacterStateType_Falling = 4,
        CharacterStateType_User_0 = 5,
        CharacterStateType_Parachute = 5,
        CharacterStateType_User_1 = 6,
        CharacterStateType_Swimming = 6,
        CharacterStateType_User_2 = 7,
        CharacterStateType_AnimationControlled = 7,
        CharacterStateType_User_3 = 8,
        CharacterStateType_Sliding = 8,
        CharacterStateType_User_4 = 9,
        CharacterStateType_User_5 = 10,
        CharacterStateType_StateCount = 11,
    }
    class CharacterWeaponBinding {

        /**
         * Creates a new CharacterWeaponBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterWeaponBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CharacterWeaponBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponId: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CharacterWeaponBinding;

    }

    class CharacterWeaponComponentData extends FB.ComponentData {

        /**
         * Creates a new CharacterWeaponComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CharacterWeaponComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to CharacterWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to CharacterWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CharacterWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CharacterWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CharacterWeaponComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultWeaponBlueprint: FB.SoldierWeaponBlueprint | undefined;
        aimBoneName: string;
        weaponSkeleton: FB.SkeletonAsset | undefined;

    }

    class ChaseCameraData extends FB.TargetCameraData {

        /**
         * Creates a new ChaseCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChaseCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TargetCameraData to ChaseCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetCameraData);
        /**
         * Casts an instance of type CameraData to ChaseCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to ChaseCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ChaseCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ChaseCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChaseCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        targetOffset: VUShared.Vec3;
        toWantedPositionScale: VUShared.Vec3;
        awayFromTargetForceScale: number;
        targetRotationOffset: number;
        maxViewRotationAngleDeg: number;
        wantedAngleDeg: number;
        wantedDistance: number;
        maxDistance: number;
        snapDistance: number;
        forceFieldRadius: number;
        collisionRadius: number;
        forceFieldForceScale: number;
        maxVelocity: number;
        velocityDrag: number;
        pillExpandSizeSpeedAcceleration: number;
        pillMinimumCollisionRadius: number;
        pillMaximumCollisionRadius: number;
        pillMinimumCollisionLength: number;
        lookDistanceScale: number;
        lookDistanceInFrontOfTarget: number;
        updateRate: number;
        keepTargetPitch: boolean;
        inheritTargetVelocity: boolean;
        shouldRollWithTarget: boolean;
        hasCollision: boolean;

    }

    class ChassisComponentData extends FB.PartComponentData {

        /**
         * Creates a new ChassisComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChassisComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to ChassisComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to ChassisComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ChassisComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ChassisComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ChassisComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChassisComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicleConfig: FB.VehicleConfigData | undefined;
        gearboxConfig: FB.GearboxConfigData | undefined;
        waterStreakEffects: FB.VehicleWaterEffectData[];
        waterEffects: FB.VehicleWaterEffectData[];
        triggerGroundEffectImpulse: number;
        landingGearLogic: FB.LandingGearLogicData | undefined;
        alwaysFullThrottle: boolean;
        forceLandingGearsRetract: boolean;
        allowNegativeThrottle: boolean;

    }

    export enum ChatChannelType {
        CctSayAll = 0,
        CctTeam = 1,
        CctSquad = 2,
        CctSquadLeader = 3,
        CctAdmin = 4,
        CctSize = 5,
    }
    class ChatSettings extends FB.Asset {

        /**
         * Creates a new ChatSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChatSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ChatSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ChatSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChatSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        channels: FB.ChatChannelType[];
        antiSpam: FB.AntiSpamConfig;

    }

    class ChildBarrelComponentData extends FB.ChildComponentData {

        /**
         * Creates a new ChildBarrelComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChildBarrelComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ChildComponentData to ChildBarrelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ChildComponentData);
        /**
         * Casts an instance of type PartComponentData to ChildBarrelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to ChildBarrelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ChildBarrelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ChildBarrelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ChildBarrelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChildBarrelComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ChildComponentData extends FB.PartComponentData {

        /**
         * Creates a new ChildComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChildComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to ChildComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to ChildComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ChildComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ChildComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ChildComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChildComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        alignTransform: VUShared.LinearTransform;
        movingBody: FB.MovingBodyData | undefined;
        healthZone: FB.VehicleHealthZoneData;
        soundEffectStartRpm: number;
        soundEffectStopRpm: number;
        alignmentSettings: FB.AlignmentData | undefined;
        soundEffect: FB.SoundAsset | undefined;
        enableAlignToCamera: boolean;
        worldSpacePositionLock: boolean;

    }

    class ChildMovingBodyData extends FB.LinearMovingBodyData {

        /**
         * Creates a new ChildMovingBodyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChildMovingBodyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LinearMovingBodyData to ChildMovingBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LinearMovingBodyData);
        /**
         * Casts an instance of type MovingBodyData to ChildMovingBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovingBodyData);
        /**
         * Casts an instance of type DataContainer to ChildMovingBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChildMovingBodyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputDelay: number;
        speed: number;
        inputAction: FB.EntryInputActionEnum;
        triggerImpulse: number;
        isOneShotInput: boolean;

    }

    class ChildRotationBodyData extends FB.RotationBodyData {

        /**
         * Creates a new ChildRotationBodyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChildRotationBodyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RotationBodyData to ChildRotationBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RotationBodyData);
        /**
         * Casts an instance of type MovingBodyData to ChildRotationBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovingBodyData);
        /**
         * Casts an instance of type DataContainer to ChildRotationBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChildRotationBodyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        forceModifier: number;
        resetForceModifier: number;
        resetForceInputThreshold: number;
        rotationInput: FB.EntryInputActionEnum;
        worldSpaceLockEfficiency: number;
        useLinearInput: boolean;

    }

    class ChildStaticModelNetworkInfo {

        /**
         * Creates a new ChildStaticModelNetworkInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChildStaticModelNetworkInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ChildStaticModelNetworkInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        networkRange: FB.IndexRange;
        parentPartComponentIndex: number;
        parentHealthStateIndex: number;
        instanceIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ChildStaticModelNetworkInfo;

    }

    class ChunkStreamerCell {

        /**
         * Creates a new ChunkStreamerCell frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChunkStreamerCell frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ChunkStreamerCell type.
         */
        static typeInfo: VUShared.TypeInformation;

        shape: VUShared.Vec2[];
        bundleName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ChunkStreamerCell;

    }

    class ChunkStreamerEntityData extends FB.EntityData {

        /**
         * Creates a new ChunkStreamerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ChunkStreamerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ChunkStreamerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ChunkStreamerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ChunkStreamerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ChunkStreamerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ChunkStreamerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cells: FB.ChunkStreamerCell[];

    }

    class ClearAreaTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new ClearAreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClearAreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ClearAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClearAreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        teamOfImmortalSoldiers: FB.TeamId;
        removeBangers: boolean;
        removeVehicles: boolean;
        removeEffects: boolean;
        removeStaticModels: boolean;
        removeDebrisClusters: boolean;
        excludeImmortalSoldiersInTeam: boolean;
        removeMeshProxies: boolean;
        removeSoldiers: boolean;

    }

    class ClientEffectMaskVolumeEntityData extends FB.GameEntityData {

        /**
         * Creates a new ClientEffectMaskVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClientEffectMaskVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to ClientEffectMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ClientEffectMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ClientEffectMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ClientEffectMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ClientEffectMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ClientEffectMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClientEffectMaskVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        applyEffectCurve: VUShared.Vec4;
        lifeTimeInSeconds: number;
        updatePeriodInSeconds: number;
        radius: number;

    }

    export enum ClientGameType {
        ClientGameType_SinglePlayer = 0,
        ClientGameType_Hosted = 1,
        ClientGameType_Joined = 2,
    }
    class ClientJuiceState extends FB.MetricState {

        /**
         * Creates a new ClientJuiceState frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClientJuiceState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricState to ClientJuiceState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricState);
        /**
         * Casts an instance of type MetricEvent to ClientJuiceState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to ClientJuiceState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClientJuiceState type.
         */
        static typeInfo: VUShared.TypeInformation;

        sessionId: number;

    }

    class ClientMetricsSettings extends VUShared.DataContainer {

        /**
         * Creates a new ClientMetricsSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClientMetricsSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ClientMetricsSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClientMetricsSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        enabled: boolean;

    }

    class ClientPlayerInputPlaybackEntityData extends FB.EntityData {

        /**
         * Creates a new ClientPlayerInputPlaybackEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClientPlayerInputPlaybackEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ClientPlayerInputPlaybackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ClientPlayerInputPlaybackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ClientPlayerInputPlaybackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ClientPlayerInputPlaybackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClientPlayerInputPlaybackEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        fileName: string;

    }

    class ClientPlayerInputRecorderEntityData extends FB.EntityData {

        /**
         * Creates a new ClientPlayerInputRecorderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClientPlayerInputRecorderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ClientPlayerInputRecorderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ClientPlayerInputRecorderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ClientPlayerInputRecorderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ClientPlayerInputRecorderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClientPlayerInputRecorderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        fileNameBase: string;

    }

    class ClientSettings extends FB.SystemSettings {

        /**
         * Creates a new ClientSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClientSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to ClientSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to ClientSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClientSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        loadedTimeout: number;
        outgoingRate: number;
        loadingTimeout: number;
        incomingFrequency: number;
        incomingRate: number;
        duplicationChance: number;
        team: number;
        maxDropDuration: number;
        reorderingChance: number;
        dropSpikeChance: number;
        minDropDuration: number;
        maxIncomingLatency: number;
        packetDrops: number;
        maxLatency: number;
        minIncomingLatency: number;
        corruptionChance: number;
        serverIp: string;
        screenshotSuffix: string;
        spawnPointIndex: number;
        minLatency: number;
        screenshotFilename: string;
        ingameTimeout: number;
        aimScale: number;
        secondaryServerIp: string;
        skipFastLevelLoad: boolean;
        screenshotToFile: boolean;
        ignoreClientFireRateMultiplier: boolean;
        inputEnable: boolean;
        loadMenu: boolean;
        pauseGameOnStartUp: boolean;
        debugMenuOnLThumb: boolean;
        invertPitch: boolean;
        occludersEnabled: boolean;
        isPresenceEnabled: boolean;
        invertFreeCamera: boolean;
        scheme2FlipY: boolean;
        invertYaw: boolean;
        lipSyncEnabled: boolean;
        isInternetSimulationEnabled: boolean;
        onDamageSpottingEnabled: boolean;
        emittersEnabled: boolean;
        padRumbleEnabled: boolean;
        overgrowthEnabled: boolean;
        effectsEnabled: boolean;
        terrainEnabled: boolean;
        waterPhysicsEnabled: boolean;
        vegetationEnabled: boolean;
        worldRenderEnabled: boolean;
        renderTags: boolean;
        debrisClusterEnabled: boolean;
        havokVisualDebugger: boolean;
        havokVDBShowsEffectsWorld: boolean;
        havokCaptureToFile: boolean;
        useMouseAndKeyboardSystem: boolean;
        useGlobalGamePadInput: boolean;
        threadedLoadingEnable: boolean;
        showBuildId: boolean;
        extractPersistenceInformation: boolean;
        enableRestTool: boolean;
        localVehicleSimulationEnabled: boolean;
        asyncClientBulletEntity: boolean;
        autoUnspawnDynamicObjects: boolean;
        vsyncEnable: boolean;
        visualFrameInterpolation: boolean;
        invertPadPcRightStick: boolean;
        scheme0FlipY: boolean;
        isSpectator: boolean;
        scheme1FlipY: boolean;
        quitGameOnServerDisconnect: boolean;

    }

    export enum ClientState {
        ClientState_WaitingForStaticBundleLoad = 0,
        ClientState_LoadProfileOptions = 1,
        ClientState_LostConnection = 2,
        ClientState_Startup = 3,
        ClientState_StartServer = 4,
        ClientState_WaitingForLevel = 5,
        ClientState_StartLoadingLevel = 6,
        ClientState_WaitingForLevelLoaded = 7,
        ClientState_WaitingForLevelLink = 8,
        ClientState_LevelLinked = 9,
        ClientState_WaitingUIIngame = 10,
        ClientState_Ingame = 11,
        ClientState_ConnectToServer = 12,
        ClientState_WaitingUILoading = 13,
        ClientState_WaitingUIUnload = 14,
        ClientState_None = 15,
    }
    class ClimbingStateData extends FB.CharacterStateData {

        /**
         * Creates a new ClimbingStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClimbingStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to ClimbingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to ClimbingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClimbingStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lateralInputScale: number;
        downAngleLimit: number;
        dropOffAngle: number;
        attractionVelocity: number;
        pushAwayVelocity: number;
        climbHeightOffset: number;
        climbOffVerticalDistance: number;
        climbOffVerticalTime: number;
        climbOffHorizontalDistance: number;
        climbOffHorizontalTime: number;

    }

    class ClimbLadderBinding {

        /**
         * Creates a new ClimbLadderBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClimbLadderBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ClimbLadderBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        climbLadderPhase: FB.AntRef;
        climbLadderConnectPhase: FB.AntRef;
        climbLadderTransitionPhase: FB.AntRef;
        onLadder: FB.AntRef;
        ladderTopTransition: FB.AntRef;
        fallHigh: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ClimbLadderBinding;

    }

    class ClimbLadderComponentData extends FB.ComponentData {

        /**
         * Creates a new ClimbLadderComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClimbLadderComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to ClimbLadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ClimbLadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ClimbLadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ClimbLadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClimbLadderComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        climbPhase: number;
        connectPhase: number;
        connectJointDisplacement: number;
        binding: FB.ClimbLadderBinding;

    }

    class ClosestInstancesScopeStrategyData extends FB.SoundScopeStrategyData {

        /**
         * Creates a new ClosestInstancesScopeStrategyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ClosestInstancesScopeStrategyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundScopeStrategyData to ClosestInstancesScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundScopeStrategyData);
        /**
         * Casts an instance of type DataContainer to ClosestInstancesScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ClosestInstancesScopeStrategyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        count: number;

    }

    class CollisionData extends VUShared.DataContainer {

        /**
         * Creates a new CollisionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CollisionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CollisionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CollisionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        damageAtVerticalVelocity: FB.ValueAtX[];
        damageAtHorizVelocity: FB.ValueAtX[];

    }

    export enum CollisionMethodEnum {
        CMESimple = 0,
        CMEDetailed = 1,
    }
    class ColorCorrectionComponentData extends FB.ComponentData {

        /**
         * Creates a new ColorCorrectionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ColorCorrectionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to ColorCorrectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ColorCorrectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ColorCorrectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ColorCorrectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ColorCorrectionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        contrast: VUShared.Vec3;
        saturation: VUShared.Vec3;
        brightness: VUShared.Vec3;
        realm: FB.Realm;
        hue: number;
        colorGradingTexture: FB.TextureAsset | undefined;
        colorGradingEnable: boolean;
        enable: boolean;

    }

    class ColorReference extends FB.Asset {

        /**
         * Creates a new ColorReference frostbite instance.
         */
        constructor();
        /**
         * Creates a new ColorReference frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ColorReference. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ColorReference. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ColorReference type.
         */
        static typeInfo: VUShared.TypeInformation;

        color: VUShared.Vec4;

    }

    class ColorTintData {

        /**
         * Creates a new ColorTintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ColorTintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ColorTintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        contrast: VUShared.Vec3;
        brightness: VUShared.Vec3;
        saturation: VUShared.Vec3;
        hue: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ColorTintData;

    }

    class ColorTintScopeFilterData extends FB.ScopeFilterData {

        /**
         * Creates a new ColorTintScopeFilterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ColorTintScopeFilterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScopeFilterData to ColorTintScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScopeFilterData);
        /**
         * Casts an instance of type Asset to ColorTintScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ColorTintScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ColorTintScopeFilterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        colorTintData: FB.ColorTintData;

    }

    class ColorUnlockPartData extends VUShared.DataContainer {

        /**
         * Creates a new ColorUnlockPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ColorUnlockPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ColorUnlockPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ColorUnlockPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

        colorReference: FB.ColorReference | undefined;

    }

    class CombatActionTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new CombatActionTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CombatActionTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CombatActionTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CombatActionTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeToTriggerOnNoAction: number;

    }

    class CombatAreaTriggerEntityData extends FB.GameEntityData {

        /**
         * Creates a new CombatAreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CombatAreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to CombatAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CombatAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CombatAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CombatAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CombatAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CombatAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CombatAreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxRandomSpawnHeight: number;
        spawnHeight: number;
        timeToReturn: number;
        deserterProjectile: FB.BulletEntityData | undefined;
        team: FB.TeamId;
        strikeRadius: number;
        initalSpeed: number;
        isAiAllowedOutside: boolean;
        isTeamSpecific: boolean;

    }

    class CombatConstantData extends FB.Asset {

        /**
         * Creates a new CombatConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CombatConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CombatConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CombatConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CombatConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poseTransitionFireDelay: number;
        changePoseStopDelay: number;
        allowCrouchFiringWaterLevel: number;
        poseChangeLockoutTime: number;
        explosionInterestRange: number;
        explosiveObjectSearchRadius: number;
        explosiveBlastMultiplier: number;
        maxSuppressDistance: number;
        maxSuppressorsRatio: number;
        suppressOffsetXz: number;
        suppressOffsetY: number;
        suppressMinLOFDistance: number;
        suppressMinLOFOffsetDistance: number;
        investigateCoverSearchWidth: number;
        investigateAroundTargetRadius: number;
        investigateFreeLookRadius: number;
        investigatePauseTimeMin: number;
        investigatePauseTimeMax: number;
        avoidC4Time: number;
        standStillMinTime: number;
        stationaryBailDistance: number;
        precisionTimeout: number;
        closeRangeAccuracyDistance: number;
        fightFromPathRadius: number;
        smokeRadius: number;
        smokeLifeTime: number;
        meleeCooldown: number;

    }

    export enum CombatPatrolMode {
        CombatPatrolMode_MustStayOnPath = 0,
        CombatPatrolMode_FreeToFight = 1,
        CombatPatrolMode_FreeToFightAtDestination = 2,
    }
    class CombustionEngineConfigData extends FB.EngineConfigData {

        /**
         * Creates a new CombustionEngineConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CombustionEngineConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EngineConfigData to CombustionEngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EngineConfigData);
        /**
         * Casts an instance of type DataContainer to CombustionEngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CombustionEngineConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CompareBoolEntityData extends FB.EntityData {

        /**
         * Creates a new CompareBoolEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompareBoolEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CompareBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CompareBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CompareBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CompareBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompareBoolEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        bool: boolean;
        triggerOnPropertyChange: boolean;

    }

    class CompareEntityData extends FB.EntityData {

        /**
         * Creates a new CompareEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompareEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CompareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CompareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CompareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CompareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompareEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        operator: FB.CompareOp;
        floatIn0: number;
        floatIn1: number;
        intIn0: number;
        intIn1: number;

    }

    class CompareFloatEntityData extends FB.EntityData {

        /**
         * Creates a new CompareFloatEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompareFloatEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CompareFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CompareFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CompareFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CompareFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompareFloatEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        a: number;
        b: number;
        triggerOnPropertyChange: boolean;
        triggerOnStart: boolean;

    }

    class CompareIntEntityData extends FB.EntityData {

        /**
         * Creates a new CompareIntEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompareIntEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CompareIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CompareIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CompareIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CompareIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompareIntEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        a: number;
        b: number;
        triggerOnPropertyChange: boolean;
        triggerOnStart: boolean;

    }

    export enum CompareOp {
        CompareOp_Equal = 0,
        CompareOp_NotEqual = 1,
        CompareOp_Greater = 2,
        CompareOp_Less = 3,
        CompareOp_GreaterOrEqual = 4,
        CompareOp_LessOrEqual = 5,
    }
    export enum CompareOperation {
        Equal = 0,
        NotEqual = 1,
        LesserEqual = 2,
        GreaterEqual = 3,
        Lesser = 4,
        Greater = 5,
    }
    class ComparisonLogicNode extends FB.UINodeData {

        /**
         * Creates a new ComparisonLogicNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new ComparisonLogicNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to ComparisonLogicNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to ComparisonLogicNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ComparisonLogicNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        outputs: FB.UINodePort[];
        dataSourceInfo: FB.UIDataSourceInfo;
        skipFractionals: boolean;

    }

    class ComponentData extends FB.GameObjectData {

        /**
         * Creates a new ComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to ComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        components: FB.GameObjectData[];
        excluded: boolean;

    }

    class CompositeMeshAsset extends FB.MeshAsset {

        /**
         * Creates a new CompositeMeshAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompositeMeshAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshAsset to CompositeMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshAsset);
        /**
         * Casts an instance of type Asset to CompositeMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CompositeMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompositeMeshAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class CompositeMeshEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new CompositeMeshEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompositeMeshEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to CompositeMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CompositeMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CompositeMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CompositeMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CompositeMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompositeMeshEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mesh: FB.CompositeMeshAsset | undefined;

    }

    export enum CompressorChannelMode {
        CompressorChannelMode_Independent = 0,
        CompressorChannelMode_Grouped = 1,
    }
    class CompressorNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new CompressorNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompressorNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to CompressorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to CompressorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompressorNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        threshold: FB.AudioGraphNodePort;
        ratio: FB.AudioGraphNodePort;
        attackTime: FB.AudioGraphNodePort;
        releaseTime: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        channelMode: FB.CompressorChannelMode;
        plugin: FB.SoundGraphPluginRef;

    }

    class CompressorSettings extends VUShared.DataContainer {

        /**
         * Creates a new CompressorSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new CompressorSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CompressorSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CompressorSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        ratio: number;
        threshold: number;
        attack: number;
        release: number;

    }

    class ConditionGroup extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new ConditionGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConditionGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to ConditionGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to ConditionGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConditionGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: FB.AudioGraphNodePort;
        y: FB.AudioGraphNodePort;
        trueValue: FB.AudioGraphNodePort;
        condition: FB.ConditionType;

    }

    class ConditionNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ConditionNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConditionNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ConditionNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ConditionNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConditionNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        conditions: FB.ConditionGroup[];

    }

    export enum ConditionType {
        ConditionType_And = 0,
        ConditionType_Or = 1,
        ConditionType_XOr = 2,
        ConditionType_Equal = 3,
        ConditionType_Less = 4,
        ConditionType_Greater = 5,
        ConditionType_LessOrEqual = 6,
        ConditionType_GreaterOrEqual = 7,
    }
    class ConeOutputNodeData extends FB.OutputNodeData {

        /**
         * Creates a new ConeOutputNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConeOutputNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OutputNodeData to ConeOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OutputNodeData);
        /**
         * Casts an instance of type AudioGraphNodeData to ConeOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ConeOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConeOutputNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        direction: VUShared.Vec3;
        positionY: FB.AudioGraphNodePort;
        positionX: FB.AudioGraphNodePort;
        positionZ: FB.AudioGraphNodePort;
        outerAngle: FB.AudioGraphNodePort;
        innerAngle: FB.AudioGraphNodePort;
        outsideGain: number;
        panSize: number;
        centerLevel: FB.AudioGraphNodePort;
        lfeLevel: FB.AudioGraphNodePort;
        hfDampingAngle: number;
        reverbGain: number;
        reverbSend: FB.SoundBusData | undefined;
        panPlugin: FB.SoundGraphPluginRef;
        reverbSendPlugin: FB.SoundGraphPluginRef;

    }

    class ConsoleCommandEntityData extends FB.EntityData {

        /**
         * Creates a new ConsoleCommandEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConsoleCommandEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ConsoleCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ConsoleCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ConsoleCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ConsoleCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConsoleCommandEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        commands: string[];
        realm: FB.Realm;

    }

    class ConsoleCommandTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new ConsoleCommandTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConsoleCommandTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ConsoleCommandTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ConsoleCommandTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ConsoleCommandTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ConsoleCommandTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConsoleCommandTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        commandName: string;
        realm: FB.Realm;

    }

    class ConstantEvaluatorData extends FB.EvaluatorData {

        /**
         * Creates a new ConstantEvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConstantEvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to ConstantEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to ConstantEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to ConstantEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConstantEvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scale: number;

    }

    class ConstantForceData {

        /**
         * Creates a new ConstantForceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConstantForceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ConstantForceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: VUShared.Vec3;
        condition: FB.ForceCondition;
        typeOfForce: FB.ForceType;
        space: FB.SpaceType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ConstantForceData;

    }

    class Consumable {

        /**
         * Creates a new Consumable frostbite instance.
         */
        constructor();
        /**
         * Creates a new Consumable frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Consumable type.
         */
        static typeInfo: VUShared.TypeInformation;

        instance: VUShared.Guid;
        group: FB.ConsumableGroup;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Consumable;

    }

    export enum ConsumableGroup {
        ConsumableGroup_0 = 0,
        ConsumableGroup_1 = 1,
        ConsumableGroup_2 = 2,
        ConsumableGroup_3 = 3,
        ConsumableGroup_4 = 4,
        ConsumableGroup_5 = 5,
        ConsumableGroup_6 = 6,
        ConsumableGroup_7 = 7,
        ConsumableGroup_Count = 8,
    }
    class ConsumablesLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new ConsumablesLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConsumablesLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to ConsumablesLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to ConsumablesLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConsumablesLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        consumables: FB.Consumable[];

    }

    class ConsumableTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new ConsumableTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ConsumableTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ConsumableTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ConsumableTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        consumableGroup: FB.ConsumableGroup;
        persistent: boolean;

    }

    class ContinueWeaponAmmoData {

        /**
         * Creates a new ContinueWeaponAmmoData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ContinueWeaponAmmoData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ContinueWeaponAmmoData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minMags: number;
        weaponSlot: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ContinueWeaponAmmoData;

    }

    class ControllableEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new ControllableEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ControllableEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ControllableEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ControllableEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lowHealthThreshold: number;
        defaultTeam: FB.TeamId;
        materialPair: FB.MaterialContainerPair | undefined;
        resetTeamOnLastPlayerExits: boolean;
        fakeImmortal: boolean;
        usePrediction: boolean;
        immortal: boolean;
        forceForegroundRendering: boolean;

    }

    class CoopLobbyEntityData extends FB.GameEntityData {

        /**
         * Creates a new CoopLobbyEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoopLobbyEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to CoopLobbyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to CoopLobbyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CoopLobbyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CoopLobbyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CoopLobbyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CoopLobbyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CoopLobbyEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        clientConnectionTimeout: number;
        isInGame: boolean;

    }

    export enum CoopPlayerEvent {
        CoopPlayerEvent_Connecting = 0,
        CoopPlayerEvent_Connected = 1,
        CoopPlayerEvent_Disconnected = 2,
        CoopPlayerEvent_Stats = 3,
        CoopPlayerEvent_StatsFailed = 4,
    }
    export enum CoreLogLevel {
        CllNone = 0,
        CllEventRecord = 1,
        CllCrash = 2,
        CllError = 3,
        CllAssert = 4,
        CllFatalAssert = 5,
        CllValidate = 6,
        CllWarning = 7,
        CllInfo = 8,
        CllOutput = 9,
        CllDebug = 10,
    }
    class CoreSettings {

        /**
         * Creates a new CoreSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoreSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CoreSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        randomTickSeed: number;
        availableLanguages: string;
        randomSessionId: number;
        randomTimeSeed: number;
        hardwareGpuBias: number;
        hardwareProfile: FB.HardwareProfile;
        jobProcessorCount: number;
        maxJobThreadCount: number;
        host: string;
        hostUser: string;
        hostUserDomain: string;
        initSeed: string;
        logLevel: FB.CoreLogLevel;
        hardwareCpuBias: number;
        gameConfigurationName: string;
        profileDirectoryName: string;
        displayAsserts: boolean;
        liveEditingEnable: boolean;
        useStorageServer: boolean;
        useDiskCaching: boolean;
        crashOnFatalErrors: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CoreSettings;

    }

    class CountDownEntityData extends FB.EntityData {

        /**
         * Creates a new CountDownEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CountDownEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CountDownEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CountDownEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CountDownEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CountDownEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CountDownEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        startValue: number;
        realm: FB.Realm;
        runOnce: boolean;

    }

    class CounterHelper {

        /**
         * Creates a new CounterHelper frostbite instance.
         */
        constructor();
        /**
         * Creates a new CounterHelper frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CounterHelper type.
         */
        static typeInfo: VUShared.TypeInformation;

        dummy: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CounterHelper;

    }

    class CounterStatus {

        /**
         * Creates a new CounterStatus frostbite instance.
         */
        constructor();
        /**
         * Creates a new CounterStatus frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CounterStatus type.
         */
        static typeInfo: VUShared.TypeInformation;

        currentValue: number;
        originalValue: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CounterStatus;

    }

    class CoverConstantData extends FB.Asset {

        /**
         * Creates a new CoverConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoverConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CoverConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CoverConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CoverConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        slotSize: number;
        slotSpacing: number;
        slotEdgeDistance: number;
        slotBlockedEdgeDistance: number;
        minimumOpenCoverWidth: number;
        proneHeight: number;
        crouchHeight: number;
        mediumHeight: number;
        standHeight: number;
        maxCoversInMemory: number;
        searchRadius: number;
        proneCoverModifier: number;
        crouchCoverModifier: number;
        mediumCoverModifier: number;
        standCoverModifier: number;
        intermediateCoverSlotModifier: number;
        distanceEvaluationWeight: number;
        enemiesEvaluationWeight: number;
        attackPositionEvaluationWeight: number;
        optimalWeaponDistanceEvaluationWeight: number;
        dislikePreviousCoverWeight: number;
        maxHeightDifference: number;
        switchCoverUrgencyThreshold: number;
        extraCoverSize: number;
        reevaluationTime: number;
        coverSelectionMethod: FB.CoverSelectionMethod;
        threatRadius: number;
        inCoverDistance: number;
        minAttackableEnemyDistance: number;
        coverFailIgnoreTime: number;
        startMeleeFromCoverDistance: number;
        continueMeleeFromCoverDistance: number;

    }

    export enum CoverEnterStrategy {
        CoverEnterStrategy_EnterNormally = 0,
        CoverEnterStrategy_SkipEnterButAlign = 1,
        CoverEnterStrategy_SkipEnterDontAlign = 2,
    }
    class CoverEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new CoverEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoverEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to CoverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to CoverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CoverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CoverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CoverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CoverEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        width: number;
        coverType: FB.CoverType;
        slots: FB.CoverSlot[];
        rightEdgeBlocked: boolean;
        topBlocked: boolean;
        leftEdgeBlocked: boolean;

    }

    export enum CoverExitStyle {
        CoverExitStyle_ExitCover = 0,
        CoverExitStyle_VaultFromCrouchCover = 1,
        CoverExitStyle_StrafeFire = 2,
        CoverExitStyle_Surprised = 3,
        CoverExitStyle_Sprint = 4,
    }
    export enum CoverFireType {
        CoverFireType_Peek = 0,
        CoverFireType_Out = 1,
        CoverFireType_Over = 2,
        CoverFireType_BlindOut = 3,
        CoverFireType_BlindOver = 4,
        CoverFireType_GrenadeOut = 5,
        CoverFireType_GrenadeBlindOver = 6,
        CoverFireType_NoFire = 7,
        CoverFireType_Flanked = 8,
        CoverFireType_OutSlow = 10,
        CoverFireType_OutUrgent = 11,
        CoverFireType_OutStandToCrouch = 12,
        CoverFireType_Lmg = 13,
        CoverFireType_OutFireFromHip = 14,
        CoverFireType_FlankedSurprised = 15,
    }
    export enum CoverPeekType {
        CoverPeekType_Out = 0,
        CoverPeekType_Over = 1,
        CoverPeekType_None = 2,
    }
    class CoverPrepareFireEntityData extends FB.EntityData {

        /**
         * Creates a new CoverPrepareFireEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoverPrepareFireEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CoverPrepareFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CoverPrepareFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CoverPrepareFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CoverPrepareFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CoverPrepareFireEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum CoverSelectionMethod {
        CSMAgainstThreatPosition = 0,
        CSMAgainstHighestThreat = 1,
        CSMAgainstSelectedTarget = 2,
        CSMAgainstAllEnemies = 3,
        CSMAgainstAllEnemiesWithFallback = 4,
    }
    class CoverSlot {

        /**
         * Creates a new CoverSlot frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoverSlot frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CoverSlot type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CoverSlot;

    }

    export enum CoverType {
        CoverType_Stand = 0,
        CoverType_Medium = 1,
        CoverType_Crouch = 2,
        CoverType_Prone = 3,
    }
    class CoverWaypointData extends FB.AbstractLocoWaypointData {

        /**
         * Creates a new CoverWaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CoverWaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractLocoWaypointData to CoverWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractLocoWaypointData);
        /**
         * Casts an instance of type WaypointData to CoverWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WaypointData);
        /**
         * Casts an instance of type DataContainer to CoverWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CoverWaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        coverTask: FB.AILocoCoverTaskData;

    }

    class CreateDestructionVolumeParams extends VUShared.DataContainer {

        /**
         * Creates a new CreateDestructionVolumeParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new CreateDestructionVolumeParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CreateDestructionVolumeParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CreateDestructionVolumeParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        assetName: string;

    }

    class CreateRawFileParams extends VUShared.DataContainer {

        /**
         * Creates a new CreateRawFileParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new CreateRawFileParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CreateRawFileParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CreateRawFileParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        assetName: string;
        sourceFile: string;
        createResource: boolean;

    }

    class CriteriaAward {

        /**
         * Creates a new CriteriaAward frostbite instance.
         */
        constructor();
        /**
         * Creates a new CriteriaAward frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CriteriaAward type.
         */
        static typeInfo: VUShared.TypeInformation;

        award: FB.AbstractAwardData | undefined;
        count: number;
        sid: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CriteriaAward;

    }

    class CriteriaData extends VUShared.DataContainer {

        /**
         * Creates a new CriteriaData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CriteriaData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CriteriaData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CriteriaData type.
         */
        static typeInfo: VUShared.TypeInformation;

        completionValue: number;
        gateList: FB.CriteriaGateList | undefined;
        measuring: FB.StatEvent;
        paramX: FB.StatsCategoryBaseData | undefined;
        paramY: FB.StatsCategoryBaseData | undefined;
        orParamsX: FB.StatsCategoryBaseData[];
        criteriaType: FB.CriteriaType;
        descriptionSid: string;
        scaleFactor: number;
        scale: number;
        shouldSummarize: boolean;
        shouldHide: boolean;
        countEvents: boolean;

    }

    class CriteriaGateList extends FB.Asset {

        /**
         * Creates a new CriteriaGateList frostbite instance.
         */
        constructor();
        /**
         * Creates a new CriteriaGateList frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CriteriaGateList. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CriteriaGateList. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CriteriaGateList type.
         */
        static typeInfo: VUShared.TypeInformation;

        criteriaGates: number[];

    }

    class CriteriaStarCategoryData extends VUShared.DataContainer {

        /**
         * Creates a new CriteriaStarCategoryData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CriteriaStarCategoryData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CriteriaStarCategoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CriteriaStarCategoryData type.
         */
        static typeInfo: VUShared.TypeInformation;

        criteriaInstances: FB.CriteriaStarCategoryInstance[];

    }

    class CriteriaStarCategoryInstance {

        /**
         * Creates a new CriteriaStarCategoryInstance frostbite instance.
         */
        constructor();
        /**
         * Creates a new CriteriaStarCategoryInstance frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CriteriaStarCategoryInstance type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        paramX: FB.StatsCategoryBaseData | undefined;
        paramY: FB.StatsCategoryBaseData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CriteriaStarCategoryInstance;

    }

    class CriteriaStarData extends FB.CriteriaData {

        /**
         * Creates a new CriteriaStarData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CriteriaStarData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CriteriaData to CriteriaStarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CriteriaData);
        /**
         * Casts an instance of type DataContainer to CriteriaStarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CriteriaStarData type.
         */
        static typeInfo: VUShared.TypeInformation;

        starTemplate: FB.CriteriaStarCategoryData | undefined;

    }

    export enum CriteriaType {
        CriteriaType_IAR_InARound = 0,
        CriteriaType_IAR_InARoundResetIfValueNotChanged = 1,
        CriteriaType_IAS_InASpawn = 2,
        CriteriaType_IAS_InASpawnNotResetable = 3,
        CriteriaType_IAS_InASpawnWithoutTakingDamage = 4,
        CriteriaType_GLOBAL_AllTimeTotal = 5,
        CriteriaType_GLOBAL_HighestValue = 6,
        CriteriaType_GLOBAL_HighestValueAlways = 7,
        CriteriaType_GLOBAL_HighestValueInASpawn = 8,
        CriteriaType_GLOBAL_LowestValueAlways = 9,
        CriteriaType_IfNotTrue = 10,
        CriteriaType_IAD_InADeathStreak = 11,
        CriteriaType_GLOBAL_HighestValuePersistent = 12,
        CriteriaType_LAST_ITEM = 13,
    }
    class Crossfader2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new Crossfader2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Crossfader2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to Crossfader2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to Crossfader2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Crossfader2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        ctrl: FB.AudioGraphNodePort;
        ctrlOut1: FB.AudioGraphNodePort;
        ctrlOut2: FB.AudioGraphNodePort;

    }

    class CrossfaderNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new CrossfaderNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CrossfaderNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to CrossfaderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to CrossfaderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CrossfaderNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in1: FB.AudioGraphNodePort;
        in2: FB.AudioGraphNodePort;
        ctrl: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin1: FB.SoundGraphPluginRef;
        plugin2: FB.SoundGraphPluginRef;

    }

    class CTFScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new CTFScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CTFScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to CTFScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to CTFScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CTFScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxTeams: number;
        pickUpAssistRadius: number;
        captureAssistRadius: number;
        enemyThreatRadius: number;
        enemySuppressionTimeout: number;

    }

    class Curve2D extends VUShared.DataContainer {

        /**
         * Creates a new Curve2D frostbite instance.
         */
        constructor();
        /**
         * Creates a new Curve2D frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to Curve2D. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Curve2D type.
         */
        static typeInfo: VUShared.TypeInformation;

        curve: VUShared.Vec2[];

    }

    export enum CurveInfinityType {
        CurveInfinityType_Constant = 0,
        CurveInfinityType_Linear = 1,
        CurveInfinityType_Cycle = 2,
        CurveInfinityType_CycleWithOffset = 3,
        CurveInfinityType_Oscillate = 4,
    }
    export enum CurveShaderType {
        CstSine = 0,
        CstSineNormalized = 1,
        CstSawtooth = 2,
        CstTriangle = 3,
        CstSquare = 4,
    }
    export enum CustomizationConstants {
        MaxAttachedSockets = 4,
        MaxVisualSockets = 16,
    }
    class CustomizationTable extends VUShared.DataContainer {

        /**
         * Creates a new CustomizationTable frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizationTable frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CustomizationTable. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizationTable type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockParts: FB.CustomizationUnlockParts[];

    }

    class CustomizationUnlockParts extends VUShared.DataContainer {

        /**
         * Creates a new CustomizationUnlockParts frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizationUnlockParts frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CustomizationUnlockParts. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizationUnlockParts type.
         */
        static typeInfo: VUShared.TypeInformation;

        uiCategorySid: string;
        selectableUnlocks: FB.UnlockAssetBase[];

    }

    class CustomizeBaseEntityData extends FB.EntityData {

        /**
         * Creates a new CustomizeBaseEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizeBaseEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CustomizeBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CustomizeBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CustomizeBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CustomizeBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizeBaseEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class CustomizeCharacterData extends FB.Asset {

        /**
         * Creates a new CustomizeCharacterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizeCharacterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to CustomizeCharacterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CustomizeCharacterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizeCharacterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        visualGroups: FB.CustomizeVisual[];
        overrideCriticalHealthThreshold: number;
        unlocks: FB.UnlockAssetBase[];
        overrideMaxHealth: number;
        clearVisualState: boolean;
        restoreToOriginalVisualState: boolean;

    }

    class CustomizeCharacterEntityData extends FB.CustomizeBaseEntityData {

        /**
         * Creates a new CustomizeCharacterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizeCharacterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CustomizeBaseEntityData to CustomizeCharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CustomizeBaseEntityData);
        /**
         * Casts an instance of type EntityData to CustomizeCharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CustomizeCharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CustomizeCharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CustomizeCharacterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizeCharacterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        customizeCharacterData: FB.CustomizeCharacterData | undefined;

    }

    class CustomizedMaterialData extends VUShared.DataContainer {

        /**
         * Creates a new CustomizedMaterialData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizedMaterialData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CustomizedMaterialData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizedMaterialData type.
         */
        static typeInfo: VUShared.TypeInformation;

        materialNames: string[];
        colorParameters: FB.UnlockableColorCollection[];
        textureParameters: FB.UnlockableTextureCollection[];
        textureSliceParameters: FB.UnlockableTextureSliceCollection[];

    }

    class CustomizedMeshMaterialsData {

        /**
         * Creates a new CustomizedMeshMaterialsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizedMeshMaterialsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CustomizedMeshMaterialsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshBlueprint: FB.ObjectBlueprint | undefined;
        materialNames: string[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CustomizedMeshMaterialsData;

    }

    class CustomizeSoldierData extends FB.CustomizeCharacterData {

        /**
         * Creates a new CustomizeSoldierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizeSoldierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CustomizeCharacterData to CustomizeSoldierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CustomizeCharacterData);
        /**
         * Casts an instance of type Asset to CustomizeSoldierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to CustomizeSoldierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizeSoldierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weapons: FB.UnlockWeaponAndSlot[];
        activeSlot: FB.WeaponSlot;
        deathPickup: FB.PickupEntityAsset | undefined;
        removeAllExistingWeapons: boolean;
        disableDeathPickup: boolean;

    }

    class CustomizeSoldierEntityData extends FB.CustomizeBaseEntityData {

        /**
         * Creates a new CustomizeSoldierEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizeSoldierEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CustomizeBaseEntityData to CustomizeSoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CustomizeBaseEntityData);
        /**
         * Casts an instance of type EntityData to CustomizeSoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CustomizeSoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CustomizeSoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CustomizeSoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomizeSoldierEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        customizeSoldierData: FB.CustomizeSoldierData | undefined;

    }

    class CustomizeVisual {

        /**
         * Creates a new CustomizeVisual frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomizeVisual frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CustomizeVisual type.
         */
        static typeInfo: VUShared.TypeInformation;

        visual: FB.UnlockAsset[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CustomizeVisual;

    }

    class CustomReportValueData {

        /**
         * Creates a new CustomReportValueData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomReportValueData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the CustomReportValueData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        kind: FB.CustomReportValueKind;
        dataType: FB.PersistentValueDataType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.CustomReportValueData;

    }

    export enum CustomReportValueKind {
        CustomReportValueKind_ScoreMultiplier = 0,
        CustomReportValueKind_GunMasterLevel = 1,
    }
    class CustomSequenceTrackData extends FB.EntityData {

        /**
         * Creates a new CustomSequenceTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomSequenceTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to CustomSequenceTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to CustomSequenceTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CustomSequenceTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CustomSequenceTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomSequenceTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        trackName: string;
        inputLinkMap: FB.CustomSequenceTrackLinkMapping[];
        outputLinkMap: FB.CustomSequenceTrackLinkMapping[];
        eventMap: FB.CustomSequenceTrackEventMapping[];
        sourcePropertyMap: FB.CustomSequenceTrackPropertyMapping[];
        targetPropertyMap: FB.CustomSequenceTrackPropertyMapping[];
        sourceAndTargetPropertyMap: FB.CustomSequenceTrackPropertyMapping[];

    }

    class CustomSequenceTrackEventMapping extends VUShared.DataContainer {

        /**
         * Creates a new CustomSequenceTrackEventMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomSequenceTrackEventMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CustomSequenceTrackEventMapping. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomSequenceTrackEventMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        trackEventID: number;
        sequenceEventID: number;

    }

    class CustomSequenceTrackLinkMapping extends VUShared.DataContainer {

        /**
         * Creates a new CustomSequenceTrackLinkMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomSequenceTrackLinkMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CustomSequenceTrackLinkMapping. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomSequenceTrackLinkMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        trackLinkID: number;
        sequenceLinkID: number;

    }

    class CustomSequenceTrackPropertyMapping extends VUShared.DataContainer {

        /**
         * Creates a new CustomSequenceTrackPropertyMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomSequenceTrackPropertyMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to CustomSequenceTrackPropertyMapping. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomSequenceTrackPropertyMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        trackPropertyID: number;
        sequencePropertyID: number;

    }

    class CustomSplineData extends FB.VectorShapeData {

        /**
         * Creates a new CustomSplineData frostbite instance.
         */
        constructor();
        /**
         * Creates a new CustomSplineData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VectorShapeData to CustomSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to CustomSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to CustomSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to CustomSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to CustomSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the CustomSplineData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DacNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DacNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DacNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DacNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DacNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DacNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        speakerCount: FB.AudioGraphNodePort;
        sampleRate: FB.AudioGraphNodePort;
        vuPlugin: FB.SoundGraphPluginRef;
        gainPlugin: FB.SoundGraphPluginRef;
        dacPlugin: FB.SoundGraphPluginRef;

    }

    class DamageAreaTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new DamageAreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DamageAreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DamageAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DamageAreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        damagePerSecond: number;
        teamOfImmortalCharacters: FB.TeamId;
        damageTime: number;
        damageVehicles: boolean;
        damageBangers: boolean;
        excludeImmortalCharactersInTeam: boolean;
        damageCharacters: boolean;
        excludeShieldedSoldiers: boolean;

    }

    class DamageEffectComponentData extends FB.ComponentData {

        /**
         * Creates a new DamageEffectComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DamageEffectComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DamageEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DamageEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DamageEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DamageEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DamageEffectComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rightDamage: VUShared.Vec4;
        topDamage: VUShared.Vec4;
        leftDamage: VUShared.Vec4;
        bottomDamage: VUShared.Vec4;
        outerFrameOpacity: number;
        innerFrameOpacity: number;
        frameWidth: number;
        shader: FB.SurfaceShaderBaseAsset | undefined;
        startCriticalEffectHealthThreshold: number;
        endCriticalEffectHealthThreshold: number;
        minDamagePercentageThreshold: number;
        fallofTime: number;
        maxOpacityDamagePercentage: number;
        realm: FB.Realm;
        debugDamage: boolean;

    }

    export enum DamageIndicationType {
        DamageIndicationType_GiverPlayer = 0,
        DamageIndicationType_ExplosionCenter = 1,
    }
    class DamageScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new DamageScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DamageScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to DamageScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to DamageScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DamageScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        repairVehicleLimit: number;
        damageTeamVehicleLimit: number;
        teamHealingLimit: number;
        teamDamageLimit: number;
        killAssistLimit: number;
        killAssistTimeout: number;
        vehicleDestroyAssistLimit: number;
        saviorKillTimeout: number;
        saviorDamageLimit: number;
        hotVehicleTimeout: number;

    }

    class DamageToVehicleEvent extends FB.MetricEvent {

        /**
         * Creates a new DamageToVehicleEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new DamageToVehicleEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to DamageToVehicleEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to DamageToVehicleEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DamageToVehicleEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicleName: string;
        weaponName: string;
        damageAmount: number;

    }

    class DataBusData extends FB.Asset {

        /**
         * Creates a new DataBusData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataBusData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DataBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DataBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataBusData type.
         */
        static typeInfo: VUShared.TypeInformation;

        propertyConnections: FB.PropertyConnection[];
        linkConnections: FB.LinkConnection[];

    }

    class DataContainerAsset extends FB.Asset {

        /**
         * Creates a new DataContainerAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataContainerAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DataContainerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DataContainerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataContainerAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: VUShared.DataContainer | undefined;

    }

    class DataCopSettings {

        /**
         * Creates a new DataCopSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataCopSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DataCopSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: FB.DataCopValueSetting[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DataCopSettings;

    }

    class DataCopValueSetting {

        /**
         * Creates a new DataCopValueSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataCopValueSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DataCopValueSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        dataKey: number;
        frameSpacing: number;
        offset: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DataCopValueSetting;

    }

    class DataField {

        /**
         * Creates a new DataField frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataField frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DataField type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: string;
        valueRef: VUShared.DataContainer | undefined;
        id: number;
        accessType: FB.FieldAccessType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DataField;

    }

    class DataGetNode extends FB.UINodeData {

        /**
         * Creates a new DataGetNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataGetNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to DataGetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to DataGetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataGetNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        dataSource: FB.UIDataSourceInfo;

    }

    class DataIncrementNode extends FB.UINodeData {

        /**
         * Creates a new DataIncrementNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataIncrementNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to DataIncrementNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to DataIncrementNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataIncrementNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        max: number;
        min: number;
        incrementSize: number;
        dataSource: FB.UIDataSourceInfo;

    }

    class DataSetNode extends FB.UINodeData {

        /**
         * Creates a new DataSetNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataSetNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to DataSetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to DataSetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataSetNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        param: string;
        dataSource: FB.UIDataSourceInfo;
        setToEmptyString: boolean;
        forceUpdate: boolean;

    }

    class DataSource {

        /**
         * Creates a new DataSource frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataSource frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DataSource type.
         */
        static typeInfo: VUShared.TypeInformation;

        category: FB.UIComponentData | undefined;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DataSource;

    }

    class DataStepNode extends FB.UINodeData {

        /**
         * Creates a new DataStepNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataStepNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to DataStepNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to DataStepNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataStepNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        steps: number[];
        currentStepDataSource: FB.UIDataSourceInfo;
        dataSource: FB.UIDataSourceInfo;

    }

    class DataToggleNode extends FB.UINodeData {

        /**
         * Creates a new DataToggleNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataToggleNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to DataToggleNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to DataToggleNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DataToggleNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        dataSource: FB.UIDataSourceInfo;

    }

    class DataVisualizerValue {

        /**
         * Creates a new DataVisualizerValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new DataVisualizerValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DataVisualizerValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DataVisualizerValue;

    }

    export enum DeathAnimationOperation {
        DALessThan = 0,
        DAGreaterThan = 1,
        DAEqualTo = 2,
    }
    class DeathAreaTriggerEntityData extends FB.GameEntityData {

        /**
         * Creates a new DeathAreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DeathAreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DeathAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DeathAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DeathAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DeathAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DeathAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DeathAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DeathAreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        damage: number;
        timeToReturn: number;

    }

    class DeathEvent extends FB.MetricEvent {

        /**
         * Creates a new DeathEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new DeathEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to DeathEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to DeathEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DeathEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        killerPosition: VUShared.Vec3;
        killerId: number;
        time: number;
        weapon: string;

    }

    class DebrisClusterData extends FB.GameEntityData {

        /**
         * Creates a new DebrisClusterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebrisClusterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DebrisClusterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DebrisClusterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DebrisClusterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DebrisClusterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DebrisClusterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DebrisClusterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebrisClusterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pushVelocityMul: VUShared.Vec3;
        pushVelocityRndMul: VUShared.Vec3;
        initRotationRndMul: VUShared.Vec3;
        clusterLifetime: number;
        mesh: FB.MeshAsset | undefined;
        compositePartCount: number;
        maxActivePartsCount: number;
        partHierarchy: FB.DebrisClusterPartInfoData[];
        activationPushForceMul: number;
        projectileForceTransferMul: number;
        physicsData: FB.PhysicsEntityData | undefined;
        explosion: FB.GameEntityData | undefined;
        activationEffect: FB.EffectBlueprint | undefined;
        effect: FB.EffectBlueprint | undefined;
        onPartCollisionSpeedThreshold: number;
        partialDestruction: boolean;
        clientSideOnly: boolean;
        onPartCollisionEnable: boolean;
        noCollision: boolean;
        killPartsOnCollision: boolean;
        deactivatePartsOnSleep: boolean;
        activateOnSpawn: boolean;
        inEffectWorldOnly: boolean;
        spawnExplosionOnFirstImpactOnly: boolean;

    }

    class DebrisClusterPartInfoData {

        /**
         * Creates a new DebrisClusterPartInfoData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebrisClusterPartInfoData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DebrisClusterPartInfoData type.
         */
        static typeInfo: VUShared.TypeInformation;

        angularVelocity: VUShared.Vec3;
        linearVelocity: VUShared.Vec3;
        numberOfChildren: number;
        partIndex: number;
        splitSpeedThreshold: number;
        inEffectWorldOnly: boolean;
        syncRestPosition: boolean;
        syncContinous: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DebrisClusterPartInfoData;

    }

    class DebrisHavokInfo {

        /**
         * Creates a new DebrisHavokInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebrisHavokInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DebrisHavokInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        havokAsset: FB.HavokAsset | undefined;
        reserveCount: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DebrisHavokInfo;

    }

    class DebrisSystemAsset extends FB.Asset {

        /**
         * Creates a new DebrisSystemAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebrisSystemAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DebrisSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DebrisSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebrisSystemAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        havokMeshes: FB.DebrisHavokInfo[];
        havokMeshCount: number;

    }

    class DebrisSystemMetrics {

        /**
         * Creates a new DebrisSystemMetrics frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebrisSystemMetrics frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DebrisSystemMetrics type.
         */
        static typeInfo: VUShared.TypeInformation;

        havokParticleCount: number;
        havokParticlePartCount: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DebrisSystemMetrics;

    }

    class DebrisSystemSettings extends VUShared.DataContainer {

        /**
         * Creates a new DebrisSystemSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebrisSystemSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to DebrisSystemSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebrisSystemSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshDrawCountLimit: number;
        timeScale: number;
        meshCullingDistance: number;
        drawStats: number;
        meshBatchCountLimit: number;
        meshStreamingPriorityMultiplier: number;
        meshRenderingEnable: boolean;
        enableJobs: boolean;
        meshShadowEnable: boolean;
        meshViewCullingEnable: boolean;
        meshHavokRenderingEnable: boolean;
        meshDrawTransforms: boolean;
        enable: boolean;
        meshDrawBoundingBoxes: boolean;
        meshDrawCullStats: boolean;

    }

    class DebugComponentData extends FB.ComponentData {

        /**
         * Creates a new DebugComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DebugComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DebugComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DebugComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DebugComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        debugTexture: FB.TextureAsset | undefined;
        fullscreen: boolean;
        enable: boolean;

    }

    class DebugConstantData extends FB.Asset {

        /**
         * Creates a new DebugConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DebugConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DebugConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        botDebugDistance: number;
        inViewModeFOV: number;
        graphDataBuffer: number;
        minDecisionTime: number;
        inaccuracyEnabled: boolean;

    }

    class DebugEventInput extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new DebugEventInput frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugEventInput frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to DebugEventInput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to DebugEventInput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugEventInput type.
         */
        static typeInfo: VUShared.TypeInformation;

        e: FB.AudioGraphNodePort;
        name: string;
        requireTriggeredAndSet: boolean;

    }

    class DebugMenuItemEntityData extends FB.GameEntityData {

        /**
         * Creates a new DebugMenuItemEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugMenuItemEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DebugMenuItemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DebugMenuItemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DebugMenuItemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DebugMenuItemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DebugMenuItemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DebugMenuItemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugMenuItemEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        itemType: FB.DebugMenuItemType;
        text: string;

    }

    export enum DebugMenuItemType {
        DmitItem = 0,
        DmitToggle = 1,
    }
    class DebugMenuSubMenuEntityData extends FB.GameEntityData {

        /**
         * Creates a new DebugMenuSubMenuEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugMenuSubMenuEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DebugMenuSubMenuEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DebugMenuSubMenuEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DebugMenuSubMenuEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DebugMenuSubMenuEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DebugMenuSubMenuEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DebugMenuSubMenuEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugMenuSubMenuEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        text: string;

    }

    class DebugRenderSettings extends VUShared.DataContainer {

        /**
         * Creates a new DebugRenderSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugRenderSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to DebugRenderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugRenderSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        textQueueTimeVisible: number;
        ps3SpuFrameBufferSize: number;
        textViewDistance: number;
        textQueueMaxLineCount: number;
        dxMaxVertexCount: number;
        processJobCount: number;
        drawStatsEnable: boolean;
        ps3SpuEnable: boolean;
        enable: boolean;
        textQueueLocationTop: boolean;
        dxLine2dAntialiasingEnable: boolean;
        dxLine3dAntialiasingEnable: boolean;

    }

    export enum DebugRenderType {
        DebugRenderType_Text = 0,
        DebugRenderType_Plot = 1,
        DebugRenderType_Bar = 2,
    }
    class DebugSurveyEvent extends FB.MetricEvent {

        /**
         * Creates a new DebugSurveyEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugSurveyEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to DebugSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to DebugSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugSurveyEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        playerName: string;
        surveyMetricLink: VUShared.Guid;

    }

    class DebugTestEntityData extends FB.GameEntityData {

        /**
         * Creates a new DebugTestEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugTestEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DebugTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DebugTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DebugTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DebugTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DebugTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DebugTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugTestEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DebugTextEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new DebugTextEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugTextEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to DebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugTextEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        textColor: VUShared.Vec3;
        debugText: string;
        realm: FB.Realm;
        scale: number;
        visible: boolean;
        centered: boolean;
        depthTest: boolean;
        scaleWithDistance: boolean;

    }

    class DebugValueInput extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new DebugValueInput frostbite instance.
         */
        constructor();
        /**
         * Creates a new DebugValueInput frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to DebugValueInput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to DebugValueInput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DebugValueInput type.
         */
        static typeInfo: VUShared.TypeInformation;

        v: FB.AudioGraphNodePort;
        name: string;
        renderType: FB.DebugRenderType;
        min: number;
        max: number;

    }

    class DecalAtlasTile {

        /**
         * Creates a new DecalAtlasTile frostbite instance.
         */
        constructor();
        /**
         * Creates a new DecalAtlasTile frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DecalAtlasTile type.
         */
        static typeInfo: VUShared.TypeInformation;

        tileIndexX: number;
        tileIndexY: number;
        tileCountX: number;
        tileCountY: number;
        flipX: boolean;
        flipY: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DecalAtlasTile;

    }

    class DecalEntityData extends FB.GameEntityData {

        /**
         * Creates a new DecalEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DecalEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DecalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DecalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DecalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DecalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DecalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DecalEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DecalEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shader: FB.SurfaceShaderBaseAsset | undefined;
        atlasTile: FB.DecalAtlasTile;
        materialIndex: number;
        sortingPriority: number;
        projected: boolean;

    }

    class DecalSettings extends FB.SystemSettings {

        /**
         * Creates a new DecalSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DecalSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to DecalSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to DecalSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DecalSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        staticBufferMaxVertexCount: number;
        ringBufferMaxVertexCount: number;
        drawEnable: boolean;
        systemEnable2: boolean;
        systemEnable: boolean;
        enable: boolean;
        debugMemUsageEnable: boolean;
        debugWarningsEnable: boolean;
        nvidiaStreamOutputWorkaroundEnable: boolean;

    }

    class DecalTemplateData extends FB.Asset {

        /**
         * Creates a new DecalTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DecalTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DecalTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DecalTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DecalTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        size: number;
        randomSize: number;
        rotation: number;
        randomRotation: number;
        clipAngle: number;
        proximityRadiusFactor: number;
        normalOffset: number;
        shader: FB.SurfaceShaderBaseAsset | undefined;
        meshUVIndex: number;
        atlasTile: FB.DecalAtlasTile;
        sortingPriority: number;
        projected: boolean;
        projectMultiple: boolean;
        materialIndex: number;

    }

    class DecalVolumeEntityData extends FB.RenderVolumeEntityData {

        /**
         * Creates a new DecalVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DecalVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RenderVolumeEntityData to DecalVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RenderVolumeEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DecalVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DecalVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DecalVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DecalVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DecalVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DecalVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DecisionConstantData extends FB.Asset {

        /**
         * Creates a new DecisionConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DecisionConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DecisionConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DecisionConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DecisionConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        newEnemyDecideMaxDistance: number;
        allowEmergencyGoalInterrupt: boolean;
        allowUninterruptibleBehaviours: boolean;

    }

    class DefaultSelectionItem {

        /**
         * Creates a new DefaultSelectionItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new DefaultSelectionItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DefaultSelectionItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultSelectionQuery: FB.UIDataSourceInfo;
        defaultSelectionIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DefaultSelectionItem;

    }

    class DefibrillatorWeaponData extends FB.WeaponData {

        /**
         * Creates a new DefibrillatorWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DefibrillatorWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to DefibrillatorWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to DefibrillatorWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to DefibrillatorWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DefibrillatorWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        reviveTime: number;
        attackTime: number;

    }

    class DelayEntityData extends FB.EntityData {

        /**
         * Creates a new DelayEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DelayEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to DelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DelayEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        delay: number;
        realm: FB.Realm;
        autoStart: boolean;
        runOnce: boolean;
        removeDuplicateEvents: boolean;

    }

    class DelayNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DelayNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DelayNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DelayNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DelayNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DelayNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        delayTime: FB.AudioGraphNodePort;
        feedback: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        maxDelayTime: number;
        plugin: FB.SoundGraphPluginRef;

    }

    class DelayTriggerEntityData extends FB.TriggerEventEntityData {

        /**
         * Creates a new DelayTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DelayTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEventEntityData to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEventEntityData);
        /**
         * Casts an instance of type TriggerEntityData to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DelayTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DelayTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        autoTriggerEvent: boolean;

    }

    class DeltaGroup extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new DeltaGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new DeltaGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to DeltaGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to DeltaGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DeltaGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        delta: FB.AudioGraphNodePort;

    }

    class DeltaNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DeltaNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DeltaNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DeltaNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DeltaNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DeltaNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        deltas: FB.DeltaGroup[];

    }

    class DemoSettings extends VUShared.DataContainer {

        /**
         * Creates a new DemoSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DemoSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to DemoSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DemoSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        recordDemoFileName: string;
        playbackDemoFileName: string;
        timeDemo: string;
        lockToPlayerName: string;
        changePlayerInterval: number;
        forcedDeltaTickCount: number;
        startProfilingOnFrame: number;
        stopProfilingOnFrame: number;
        takeScreenshotOnFrame: number;
        allowOverwrite: boolean;
        logPerformance: boolean;
        suppressDebugLog: boolean;
        shutdownOnDemoComplete: boolean;
        loopingDemo: boolean;
        lockToRandomPlayer: boolean;
        pauseOnStartup: boolean;

    }

    class DeMuxNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DeMuxNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DeMuxNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DeMuxNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DeMuxNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DeMuxNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outputs: FB.DeMuxOutput[];
        trigger: FB.AudioGraphNodePort;
        value: FB.AudioGraphNodePort;
        wrapValue: boolean;

    }

    class DeMuxOutput extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new DeMuxOutput frostbite instance.
         */
        constructor();
        /**
         * Creates a new DeMuxOutput frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to DeMuxOutput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to DeMuxOutput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DeMuxOutput type.
         */
        static typeInfo: VUShared.TypeInformation;

        trigger: FB.AudioGraphNodePort;

    }

    export enum DepthStencilCompareFunc {
        DepthStencilCompareFunc_Never = 0,
        DepthStencilCompareFunc_Less = 1,
        DepthStencilCompareFunc_Equal = 2,
        DepthStencilCompareFunc_LessEqual = 3,
        DepthStencilCompareFunc_Greater = 4,
        DepthStencilCompareFunc_NotEqual = 5,
        DepthStencilCompareFunc_GreaterEqual = 6,
        DepthStencilCompareFunc_Always = 7,
    }
    class DestroyAllInSquadScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new DestroyAllInSquadScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestroyAllInSquadScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to DestroyAllInSquadScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to DestroyAllInSquadScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestroyAllInSquadScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DestroyLevelCommandEntityData extends FB.GameEntityData {

        /**
         * Creates a new DestroyLevelCommandEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestroyLevelCommandEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DestroyLevelCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DestroyLevelCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DestroyLevelCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DestroyLevelCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestroyLevelCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestroyLevelCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestroyLevelCommandEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        instanceCountDestroyedPerFrame: number;
        destroyDelay: number;

    }

    class DestructionCommandEntityData extends FB.GameEntityData {

        /**
         * Creates a new DestructionCommandEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionCommandEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DestructionCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DestructionCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DestructionCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DestructionCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestructionCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestructionCommandEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionCommandEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        instanceCountDestroyedPerFrame: number;
        instanceCountDestroyedPerType: number;

    }

    export enum DestructionConnectivityType {
        DestructionConnectivityType_Full = 0,
        DestructionConnectivityType_Partial = 1,
        DestructionConnectivityType_None = 2,
        DestructionConnectivityType_Inherited = 3,
    }
    class DestructionControllerComponentData extends FB.ComponentData {

        /**
         * Creates a new DestructionControllerComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionControllerComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DestructionControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DestructionControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestructionControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestructionControllerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionControllerComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        debrisClusters: FB.ObjectBlueprint[];
        attachToNearbyObjects: boolean;

    }

    class DestructionDepthRasterData extends FB.RasterQuadtreeData {

        /**
         * Creates a new DestructionDepthRasterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionDepthRasterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterQuadtreeData to DestructionDepthRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterQuadtreeData);
        /**
         * Casts an instance of type Asset to DestructionDepthRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DestructionDepthRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionDepthRasterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DestructionDepthTreeAsset extends FB.RasterTreeAsset {

        /**
         * Creates a new DestructionDepthTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionDepthTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterTreeAsset to DestructionDepthTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterTreeAsset);
        /**
         * Casts an instance of type DataContainer to DestructionDepthTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionDepthTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DestructionEdgeModelComponentData extends FB.ComponentData {

        /**
         * Creates a new DestructionEdgeModelComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionEdgeModelComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DestructionEdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DestructionEdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestructionEdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestructionEdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionEdgeModelComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DestructionMaskVolumeEntityData extends FB.GameEntityData {

        /**
         * Creates a new DestructionMaskVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionMaskVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to DestructionMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DestructionMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DestructionMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DestructionMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestructionMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestructionMaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionMaskVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dustAccumulationCurve: VUShared.Vec4;
        shaderUserMasks: VUShared.Vec4;
        dustAccumulationLifeTime: number;
        shader: FB.SurfaceShaderInstanceDataStruct;
        radius: number;

    }

    class DestructionPartComponentData extends FB.ComponentData {

        /**
         * Creates a new DestructionPartComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionPartComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DestructionPartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DestructionPartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestructionPartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestructionPartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionPartComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        objects: FB.GameObjectData[];
        partIndex: number;
        connectivityType: FB.DestructionConnectivityType;
        fixed: boolean;
        fragile: boolean;

    }

    class DestructionVolumeAsset extends FB.Asset {

        /**
         * Creates a new DestructionVolumeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionVolumeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DestructionVolumeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DestructionVolumeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionVolumeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        diffuseAtlas: FB.TextureAsset | undefined;
        normalmapAtlas: FB.TextureAsset | undefined;
        atlasTextureScale: number;

    }

    class DestructionVolumeAtlasTextureData {

        /**
         * Creates a new DestructionVolumeAtlasTextureData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionVolumeAtlasTextureData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DestructionVolumeAtlasTextureData type.
         */
        static typeInfo: VUShared.TypeInformation;

        atlasAlphaInfluence: number;
        maskEdgeThickness: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DestructionVolumeAtlasTextureData;

    }

    class DestructionVolumeComponentData extends FB.ComponentData {

        /**
         * Creates a new DestructionVolumeComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionVolumeComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DestructionVolumeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DestructionVolumeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DestructionVolumeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DestructionVolumeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionVolumeComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        destructionVolumeData: FB.DestructionVolumeData | undefined;

    }

    class DestructionVolumeData extends VUShared.DataContainer {

        /**
         * Creates a new DestructionVolumeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionVolumeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to DestructionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DestructionVolumeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        boundingBox: VUShared.AxisAlignedBox;
        asset: FB.DestructionVolumeAsset | undefined;
        impacts: VUShared.Vec4[];
        partToImpactIndices: number[];

    }

    class DestructionVolumeProjectionData {

        /**
         * Creates a new DestructionVolumeProjectionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DestructionVolumeProjectionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DestructionVolumeProjectionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        normal: VUShared.Vec3;
        tangentAngle: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DestructionVolumeProjectionData;

    }

    class DetonatedWeaponData extends FB.WeaponData {

        /**
         * Creates a new DetonatedWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DetonatedWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to DetonatedWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to DetonatedWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to DetonatedWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DetonatedWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lockingController: FB.LockingControllerData | undefined;
        range: number;

    }

    class DialogNode extends FB.StateNode {

        /**
         * Creates a new DialogNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new DialogNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StateNode to DialogNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StateNode);
        /**
         * Casts an instance of type UINodeData to DialogNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to DialogNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DialogNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        dialogTitle: string;
        dialogText: string;
        buttons: FB.UIPopupButton[];

    }

    class DialogSamplerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DialogSamplerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DialogSamplerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DialogSamplerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DialogSamplerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DialogSamplerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pitch: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        continue: FB.AudioGraphNodePort;
        output: FB.AudioGraphNodePort;
        triggered: FB.AudioGraphNodePort;
        finished: FB.AudioGraphNodePort;
        sndPlayerPlugin: FB.SoundGraphPluginRef;
        resamplePlugin: FB.SoundGraphPluginRef;
        pausePlugin: FB.SoundGraphPluginRef;
        gainPlugin: FB.SoundGraphPluginRef;
        tailLength: number;

    }

    export enum Difficulty {
        Difficulty_Easy = 0,
        Difficulty_Medium = 1,
        Difficulty_Hard = 2,
        Difficulty_Hardcore = 3,
        Difficulty_None = 4,
    }
    class DifficultyData extends VUShared.DataContainer {

        /**
         * Creates a new DifficultyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DifficultyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to DifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DifficultyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        stickyBoxModifier: VUShared.Vec3;
        snapBoxModifier: VUShared.Vec3;
        humanHealthModifier: number;
        gameType: FB.PersistenceGameType;
        friendsHealthModifier: number;
        friendlyDamageModifier: number;
        vehicleDamageModifier: number;
        humanInCriticalHealth: number;
        enemiesHealthModifier: number;
        humanRegenerationRateModifier: number;
        humanInCriticalHealthDamageModifier: number;
        interactiveManDownDamageModifier: number;
        interactiveManDownTimeMultiplier: number;
        interactiveManDownReviveTime: number;
        adrenalineKillLimit: number;
        criticalHealthJesusModeTimeModifier: number;
        difficulty: FB.Difficulty;
        criticalFakeImmortalModifier: number;
        suckZoomModifier: number;
        aiData: FB.GameAIDifficultyData | undefined;
        aiBulletDamageHumanCooldown: number;
        usePitchZoomSnap: boolean;

    }

    class DifficultyDatas extends FB.Asset {

        /**
         * Creates a new DifficultyDatas frostbite instance.
         */
        constructor();
        /**
         * Creates a new DifficultyDatas frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DifficultyDatas. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DifficultyDatas. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DifficultyDatas type.
         */
        static typeInfo: VUShared.TypeInformation;

        difficulties: FB.DifficultyData[];

    }

    class DifficultyIndexEntityData extends FB.EntityData {

        /**
         * Creates a new DifficultyIndexEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DifficultyIndexEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to DifficultyIndexEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DifficultyIndexEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DifficultyIndexEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DifficultyIndexEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DifficultyIndexEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class DirectOutputNodeData extends FB.OutputNodeData {

        /**
         * Creates a new DirectOutputNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DirectOutputNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OutputNodeData to DirectOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OutputNodeData);
        /**
         * Casts an instance of type AudioGraphNodeData to DirectOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DirectOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DirectOutputNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DirectWeaponSwitchingMapData {

        /**
         * Creates a new DirectWeaponSwitchingMapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DirectWeaponSwitchingMapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DirectWeaponSwitchingMapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        action: FB.EntryInputActionEnum;
        toWeapon: FB.WeaponSwitchingEnum;
        preventMeleeRepeatTime: number;
        switchBackToPrevMaxTimePressed: number;
        useQuickSwitch: boolean;
        fireAndSwitchBackToPrev: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DirectWeaponSwitchingMapData;

    }

    class DirtySockPresenceBackendData extends FB.PresenceBackendData {

        /**
         * Creates a new DirtySockPresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DirtySockPresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceBackendData to DirtySockPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceBackendData);
        /**
         * Casts an instance of type Asset to DirtySockPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DirtySockPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DirtySockPresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum DisableTeamType {
        DttDisable = 0,
        DttUnspawn = 1,
    }
    class DiscComponentData extends FB.UIComponentData {

        /**
         * Creates a new DiscComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DiscComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to DiscComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to DiscComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DiscComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DiscComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DistortionClipNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DistortionClipNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DistortionClipNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DistortionClipNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DistortionClipNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DistortionClipNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        clipLevel: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class DivisibleLoopPlayerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new DivisibleLoopPlayerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DivisibleLoopPlayerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to DivisibleLoopPlayerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to DivisibleLoopPlayerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DivisibleLoopPlayerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        start: FB.AudioGraphNodePort;
        stop: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        freezeSegment: FB.AudioGraphNodePort;
        output: FB.AudioGraphNodePort;
        wave: FB.SoundWaveAsset | undefined;
        externalWave: FB.AudioGraphNodePort;
        plugins: FB.DivisibleLoopPlayerPlugins[];
        crossFadeLength: number;
        startAtRandomPosition: boolean;

    }

    class DivisibleLoopPlayerPlugins {

        /**
         * Creates a new DivisibleLoopPlayerPlugins frostbite instance.
         */
        constructor();
        /**
         * Creates a new DivisibleLoopPlayerPlugins frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DivisibleLoopPlayerPlugins type.
         */
        static typeInfo: VUShared.TypeInformation;

        sndPlayer: FB.SoundGraphPluginRef;
        pause: FB.SoundGraphPluginRef;
        gain: FB.SoundGraphPluginRef;
        gainFader: FB.SoundGraphPluginRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DivisibleLoopPlayerPlugins;

    }

    class DofComponentData extends FB.ComponentData {

        /**
         * Creates a new DofComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DofComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DofComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DofComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DofComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DofComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DofComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        nearDistanceScale: number;
        focusDistance: number;
        blurFilter: FB.BlurFilter;
        blurFilterDeviation: number;
        farDistanceScale: number;
        blurAdd: number;
        scale: number;
        diffusionDofFocalLength: number;
        diffusionDofAperture: number;
        diffusionDofEnable: boolean;
        enable: boolean;

    }

    export enum DogTagCategory {
        DTC_Invalid = 0,
        DTC_Ribbons = 1,
        DTC_Medals = 2,
        DTC_Ranks = 3,
        DTC_ServiceStars = 4,
        DTC_Weapons = 5,
        DTC_Misc = 6,
        DTC_Assassin = 7,
    }
    class DogTagData extends FB.UnlockAssetBase {

        /**
         * Creates a new DogTagData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DogTagData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockAssetBase to DogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockAssetBase);
        /**
         * Casts an instance of type Asset to DogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DogTagData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DogTagData type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameSID: string;
        descriptionSID: string;
        imageName: string;
        smallImageName: string;
        category: FB.DogTagCategory;
        invertText: boolean;
        isAlwaysAvailable: boolean;
        excludedOnXenon: boolean;
        excludedOnPs3: boolean;
        excludedOnWin32: boolean;

    }

    class DogTagsAsset extends FB.Asset {

        /**
         * Creates a new DogTagsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new DogTagsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DogTagsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DogTagsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DogTagsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        meleeKillWeapon: FB.StatsCategoryWeaponData | undefined;
        basicDogTags: FB.BasicDogTagData[];
        advancedDogTags: FB.AdvancedDogTagData[];

    }

    class DriverComponentData extends FB.ComponentData {

        /**
         * Creates a new DriverComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DriverComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DriverComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DriverComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DriverComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DriverComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DriverComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        wantedSpeed: number;
        settings: FB.DriverSettings | undefined;

    }

    class DriverSettings extends FB.Asset {

        /**
         * Creates a new DriverSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DriverSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to DriverSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to DriverSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DriverSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        minRadius: number;
        radiusGrowthSpeed: number;
        stoppingDeceleration: number;
        steeringSensitivity: number;
        maxBrakeOutput: number;
        maxDec: number;
        lookAheadTime: number;
        angleDiffForNoSlowdown: number;
        angleDiffForFullSlowdown: number;
        velocityAtFullSlowdown: number;
        velDiffAtMinAcc: number;
        velDiffAtMaxAcc: number;
        maxYawToApplySprint: number;
        minAcc: number;
        maxAcc: number;
        velDiffAtMinDec: number;
        velDiffAtMaxDec: number;
        accDiffAtMinThrottleVelocityDecelerating: number;
        minDec: number;
        minThrottleVelocityDecelerating: number;
        accDiffAtMinThrottleVelocityAccelerating: number;
        accDiffAtMaxThrottleVelocityAccelerating: number;
        maxThrottleVelocityDecelerating: number;
        minThrottleVelocityAccelerating: number;
        maxThrottleVelocityAccelerating: number;
        maxPTerm: number;
        accDiffAtMaxThrottleVelocityDecelerating: number;
        p: number;
        i: number;
        maxError: number;
        maxITerm: number;
        maxSumError: number;
        d: number;
        useSquareVelDiffCurveDec: boolean;
        useSquareAccDiffCurveDec: boolean;
        squareBrakeOutput: boolean;
        useSquareVelDiffCurveAcc: boolean;
        usePIDRegulator: boolean;
        useSquareAccDiffCurveAcc: boolean;

    }

    class DriverStaticObjectComponentData extends FB.DriverComponentData {

        /**
         * Creates a new DriverStaticObjectComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DriverStaticObjectComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DriverComponentData to DriverStaticObjectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DriverComponentData);
        /**
         * Casts an instance of type ComponentData to DriverStaticObjectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DriverStaticObjectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DriverStaticObjectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DriverStaticObjectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DriverStaticObjectComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        acceleration: number;
        deceleration: number;
        turningRadius: number;
        turnWhileStill: boolean;
        alignWithGroundNormal: boolean;

    }

    class DropWeaponComponentData extends FB.ComponentData {

        /**
         * Creates a new DropWeaponComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DropWeaponComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DropWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DropWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DropWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DropWeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DropWeaponComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        deathPickup: FB.PickupEntityAsset | undefined;
        actionIdentifier: FB.EntryInputActionEnum;
        dropWeaponAfterTime: number;
        pickup: FB.PickupEntityAsset | undefined;
        excludedWeaponSlots: FB.WeaponSlot[];
        weaponDropTime: number;
        listenToAnimationWeaponDropSignal: boolean;
        allowDropWeaponOnAction: boolean;
        requireWeaponSlotEmpty: boolean;

    }

    export enum DTagUploadPolicy {
        DTUP_FirstTimeSeenAndEndOfRound = 0,
        DTUP_Always = 1,
    }
    class DuplicateSpawnScopeStrategyData extends FB.SoundScopeStrategyData {

        /**
         * Creates a new DuplicateSpawnScopeStrategyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DuplicateSpawnScopeStrategyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundScopeStrategyData to DuplicateSpawnScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundScopeStrategyData);
        /**
         * Casts an instance of type DataContainer to DuplicateSpawnScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DuplicateSpawnScopeStrategyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        time: number;
        distance: number;
        closestCount: number;
        groupTypes: boolean;

    }

    class DxDisplaySettings extends FB.SystemSettings {

        /**
         * Creates a new DxDisplaySettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new DxDisplaySettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to DxDisplaySettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to DxDisplaySettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DxDisplaySettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        fullscreenWidth: number;
        fullscreenHeight: number;
        amdMinDriverVersion: string;
        nvidiaMinDriverVersion: number;
        fullscreenRefreshRate: number;
        stereoSeparationScale: number;
        stereoDepth: number;
        fullscreenOutputIndex: number;
        debugBreakIgnoredIDs: number[];
        stereoConvergenceScale: number;
        stereoSoldierZoomConvergenceScale: number;
        forceRenderAheadLimit: number;
        presentInterval: number;
        debugBreakOnWarningEnable: boolean;
        debugInfoEnable: boolean;
        fullscreen: boolean;
        debugBreakOnErrorEnable: boolean;
        createMinimalWindow: boolean;
        driverInternalThreadingEnable: boolean;
        debugBreakOnInfoEnable: boolean;
        fullscreenModeEnable: boolean;
        vSyncEnable: boolean;
        tripleBufferingEnable: boolean;
        dx10PlusEnable: boolean;
        nvApiEnable: boolean;
        nvPerfHudEnable: boolean;
        stereoEnable: boolean;
        dx11Enable: boolean;
        dx10Dot0Enable: boolean;
        refDriverEnable: boolean;
        dx10Dot1Enable: boolean;
        minDriverRequired: boolean;
        warpDriverEnable: boolean;
        nullDriverEnable: boolean;
        multiGpuValidationEnable: boolean;

    }

    class DynamicAOComponentData extends FB.ComponentData {

        /**
         * Creates a new DynamicAOComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicAOComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DynamicAOComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DynamicAOComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicAOComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicAOComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicAOComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        ssaoMaxDistanceOuter: number;
        ssaoFade: number;
        ssaoRadius: number;
        ssaoMaxDistanceInner: number;
        hbaoRadius: number;
        hbaoAttenuation: number;
        hbaoAngleBias: number;
        hbaoPowerExponent: number;
        hbaoContrast: number;
        hbaoMaxFootprintRadius: number;
        enable: boolean;

    }

    export enum DynamicAOMethod {
        DynamicAOMethod_SSAO = 0,
        DynamicAOMethod_HBAO = 1,
    }
    class DynamicAvoidanceEntityData extends FB.EntityData {

        /**
         * Creates a new DynamicAvoidanceEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicAvoidanceEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to DynamicAvoidanceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DynamicAvoidanceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicAvoidanceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicAvoidanceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicAvoidanceEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        repelOthers: FB.DynamicAvoidanceMode;
        reportPredictedCollision: FB.DynamicAvoidanceMode;
        collisionRadius: number;
        realm: FB.Realm;
        antBinding: FB.AntDynamicAvoidanceBinding;
        affectedByRepellingForce: boolean;
        predictedByOthers: boolean;

    }

    export enum DynamicAvoidanceMode {
        DynamicAvoidanceMode_Never = 0,
        DynamicAvoidanceMode_WhenScripted = 1,
        DynamicAvoidanceMode_WhenNotScripted = 2,
        DynamicAvoidanceMode_Always = 3,
    }
    class DynamicDataContainer extends VUShared.DataContainer {

        /**
         * Creates a new DynamicDataContainer frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicDataContainer frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to DynamicDataContainer. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicDataContainer type.
         */
        static typeInfo: VUShared.TypeInformation;

        fields: FB.DataField[];

    }

    class DynamicEnlightenEntityData extends FB.EnlightenEntityData {

        /**
         * Creates a new DynamicEnlightenEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicEnlightenEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EnlightenEntityData to DynamicEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EnlightenEntityData);
        /**
         * Casts an instance of type EntityData to DynamicEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DynamicEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicEnlightenEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        enlightenData: FB.EnlightenDataAsset | undefined;

    }

    class DynamicEnvmapComponentData extends FB.ComponentData {

        /**
         * Creates a new DynamicEnvmapComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicEnvmapComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to DynamicEnvmapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to DynamicEnvmapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicEnvmapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicEnvmapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicEnvmapComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        keyColorEnvmap: VUShared.Vec3;
        groundColorEnvmap: VUShared.Vec3;
        skyColorEnvmap: VUShared.Vec3;
        enable: boolean;

    }

    class DynamicEvent {

        /**
         * Creates a new DynamicEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DynamicEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DynamicEvent;

    }

    class DynamicGamePhysicsEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new DynamicGamePhysicsEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicGamePhysicsEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicGamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicGamePhysicsEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class DynamicLink {

        /**
         * Creates a new DynamicLink frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicLink frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DynamicLink type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DynamicLink;

    }

    class DynamicModelEntityData extends FB.DynamicGamePhysicsEntityData {

        /**
         * Creates a new DynamicModelEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicModelEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DynamicGamePhysicsEntityData to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DynamicGamePhysicsEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicModelEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        part: FB.PartComponentData | undefined;
        mesh: FB.MeshAsset | undefined;
        noCollision: boolean;

    }

    class DynamicWeaponPickupEntityData extends FB.PickupEntityData {

        /**
         * Creates a new DynamicWeaponPickupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicWeaponPickupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PickupEntityData to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PickupEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to DynamicWeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the DynamicWeaponPickupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponSlots: FB.DynamicWeaponPickupSlotData[];
        keepAmmoState: boolean;

    }

    class DynamicWeaponPickupSlotData {

        /**
         * Creates a new DynamicWeaponPickupSlotData frostbite instance.
         */
        constructor();
        /**
         * Creates a new DynamicWeaponPickupSlotData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the DynamicWeaponPickupSlotData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponSlot: number;
        altWeaponSlot: number;
        linkedToWeaponSlot: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.DynamicWeaponPickupSlotData;

    }

    class EdgeModelComponentData extends FB.DestructionEdgeModelComponentData {

        /**
         * Creates a new EdgeModelComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EdgeModelComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DestructionEdgeModelComponentData to EdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DestructionEdgeModelComponentData);
        /**
         * Casts an instance of type ComponentData to EdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to EdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EdgeModelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EdgeModelComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rigidMeshes: FB.RigidMeshAsset[];
        maxInstanceCount: number;

    }

    class EdgeModelInstance {

        /**
         * Creates a new EdgeModelInstance frostbite instance.
         */
        constructor();
        /**
         * Creates a new EdgeModelInstance frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EdgeModelInstance type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EdgeModelInstance;

    }

    class EdgeModelLightMapData extends VUShared.DataContainer {

        /**
         * Creates a new EdgeModelLightMapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EdgeModelLightMapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EdgeModelLightMapData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EdgeModelLightMapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lightMapUvs: VUShared.Vec4[];

    }

    class EdgeModelLightMapInstance {

        /**
         * Creates a new EdgeModelLightMapInstance frostbite instance.
         */
        constructor();
        /**
         * Creates a new EdgeModelLightMapInstance frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EdgeModelLightMapInstance type.
         */
        static typeInfo: VUShared.TypeInformation;

        lightMapUv: VUShared.Vec4;
        position: VUShared.Vec3;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EdgeModelLightMapInstance;

    }

    class EdgePointerData {

        /**
         * Creates a new EdgePointerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EdgePointerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EdgePointerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        negativeXLimit: number;
        positiveXLimit: number;
        negativeYLimit: number;
        positiveYLimit: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EdgePointerData;

    }

    class EditableAction extends VUShared.DataContainer {

        /**
         * Creates a new EditableAction frostbite instance.
         */
        constructor();
        /**
         * Creates a new EditableAction frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EditableAction. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EditableAction type.
         */
        static typeInfo: VUShared.TypeInformation;

        concept: FB.InputConceptIdentifiers;

    }

    class EditableActionMap {

        /**
         * Creates a new EditableActionMap frostbite instance.
         */
        constructor();
        /**
         * Creates a new EditableActionMap frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EditableActionMap type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: string;
        nameId: string;
        actionMap: FB.EntryInputActionMapsData | undefined;
        configurationLayout: FB.EditableActions;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EditableActionMap;

    }

    class EditableActions {

        /**
         * Creates a new EditableActions frostbite instance.
         */
        constructor();
        /**
         * Creates a new EditableActions frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EditableActions type.
         */
        static typeInfo: VUShared.TypeInformation;

        actions: FB.EditableAction[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EditableActions;

    }

    class EffectAsset extends FB.EffectBlueprint {

        /**
         * Creates a new EffectAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new EffectAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EffectBlueprint to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EffectBlueprint);
        /**
         * Casts an instance of type ObjectBlueprint to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EffectAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EffectAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EffectBlueprint extends FB.ObjectBlueprint {

        /**
         * Creates a new EffectBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new EffectBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ObjectBlueprint to EffectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to EffectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to EffectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to EffectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to EffectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EffectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EffectBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EffectComponentData extends FB.ComponentData {

        /**
         * Creates a new EffectComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EffectComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to EffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to EffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EffectComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        effect: FB.EffectBlueprint | undefined;
        emitterParameter1: number;
        emitterParameter3: number;
        emitterParameter2: number;
        autoStart: boolean;
        snapToWaterSurface: boolean;

    }

    class EffectEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new EffectEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EffectEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to EffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to EffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EffectEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        components: FB.GameObjectData[];
        maxInstanceCount: number;
        cullDistance: number;
        startDelay: number;
        highEndPc: boolean;
        mediumPc: boolean;
        lowEndPc: boolean;
        resetInstanceWhenStarted: boolean;

    }

    class EffectManagerSettings extends FB.SystemSettings {

        /**
         * Creates a new EffectManagerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new EffectManagerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to EffectManagerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to EffectManagerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EffectManagerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxNewEffectsPerFrameCount: number;
        sizeToGrowNewEffectsContainer: number;
        effectQuality: number;

    }

    class EffectReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new EffectReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EffectReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to EffectReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to EffectReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EffectReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EffectReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EffectReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        autoStart: boolean;

    }

    class EloExpectedFunctionPoint {

        /**
         * Creates a new EloExpectedFunctionPoint frostbite instance.
         */
        constructor();
        /**
         * Creates a new EloExpectedFunctionPoint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EloExpectedFunctionPoint type.
         */
        static typeInfo: VUShared.TypeInformation;

        xValue: number;
        yValue: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EloExpectedFunctionPoint;

    }

    class EloFunctionPoint {

        /**
         * Creates a new EloFunctionPoint frostbite instance.
         */
        constructor();
        /**
         * Creates a new EloFunctionPoint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EloFunctionPoint type.
         */
        static typeInfo: VUShared.TypeInformation;

        xValue: number;
        yValue: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EloFunctionPoint;

    }

    class EloParameters {

        /**
         * Creates a new EloParameters frostbite instance.
         */
        constructor();
        /**
         * Creates a new EloParameters frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EloParameters type.
         */
        static typeInfo: VUShared.TypeInformation;

        kWinner: FB.EloFunctionPoint[];
        kLoser: FB.EloFunctionPoint[];
        kNewbie: FB.EloFunctionPoint[];
        kCompetitor: FB.EloFunctionPoint[];
        expected: FB.EloExpectedFunctionPoint[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EloParameters;

    }

    export enum EmittableField {
        EfZero = 0,
        EfOne = 1,
        EfNormTime = 2,
        EfEmitterNormTime = 3,
        EfSpawnAnimationSpeed = 4,
        EfSpawnAnimationFrameIndex = 5,
        EfVelocity = 6,
        EfParameters = 7,
        EfRotation = 8,
        EfSpeed = 9,
        EfUserDefined = 10,
        EfConstantFloat = 11,
        EfConstantVec = 12,
        EfNone = 13,
    }
    export enum EmittableType {
        Point = 0,
        Quad = 1,
        ScreenAlignedQuad = 2,
        DirectionAlignedQuad = 3,
        WorldAlignedQuad = 4,
        Trail = 5,
        ParticleMesh = 6,
        EmittableTypeCount = 7,
    }
    class EmitterAsset extends FB.Asset {

        /**
         * Creates a new EmitterAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EmitterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EmitterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EmitterComponentData extends VUShared.DataContainer {

        /**
         * Creates a new EmitterComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EmitterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EmitterData extends FB.ProcessorData {

        /**
         * Creates a new EmitterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to EmitterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to EmitterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to EmitterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        emitterAssets: FB.EmitterDocument[];

    }

    class EmitterDocument extends FB.EmitterAsset {

        /**
         * Creates a new EmitterDocument frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterDocument frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EmitterAsset to EmitterDocument. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterAsset);
        /**
         * Casts an instance of type Asset to EmitterDocument. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EmitterDocument. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterDocument type.
         */
        static typeInfo: VUShared.TypeInformation;

        rootProcessor: FB.ProcessorData | undefined;
        templateData: FB.EmitterTemplateData | undefined;

    }

    class EmitterEntityData extends FB.EffectEntityData {

        /**
         * Creates a new EmitterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EffectEntityData to EmitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EffectEntityData);
        /**
         * Casts an instance of type SpatialEntityData to EmitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to EmitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EmitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EmitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EmitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        emitter: FB.EmitterAsset | undefined;
        spawnProbability: number;

    }

    class EmitterExclusionVolumeData extends FB.OBBData {

        /**
         * Creates a new EmitterExclusionVolumeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterExclusionVolumeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OBBData to EmitterExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OBBData);
        /**
         * Casts an instance of type BaseShapeData to EmitterExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to EmitterExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EmitterExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EmitterExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterExclusionVolumeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum EmitterParameter {
        EmitterParameterNone = 0,
        EmitterParameter1 = 1,
        EmitterParameter2 = 2,
        EmitterParameter3 = 3,
        EmitterParameter4 = 4,
        EmitterParameterVec = 5,
        EmitterParameterDistance = 6,
        EmitterParameterVecAverage = 7,
    }
    class EmitterSystemAsset extends FB.Asset {

        /**
         * Creates a new EmitterSystemAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterSystemAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EmitterSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EmitterSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterSystemAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        textureInfos: FB.EmitterTextureAtlasInfo[];
        baseAtlasTexture: FB.TextureAsset | undefined;
        normalAtlasTexture: FB.TextureAsset | undefined;

    }

    class EmitterSystemSettings extends VUShared.DataContainer {

        /**
         * Creates a new EmitterSystemSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterSystemSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EmitterSystemSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterSystemSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshDrawCountLimit: number;
        timeScale: number;
        globalResetStartTimeInterval: number;
        quadHalfResSlice2ThresholdLow: number;
        quadHalfResSlice2ThresholdHigh: number;
        quadHalfResSlice1ThresholdLow: number;
        quadHalfResSlice1ThresholdHigh: number;
        debugOverdrawCount: number;
        drawStats: number;
        meshStreamingPriorityMultiplier: number;
        quadZOcclusionBias: number;
        drawBoundingBoxes: number;
        minScreenArea: number;
        quadNearFadeDistance: number;
        quadTechnique: number;
        meshCullingDistance: number;
        enableFixedTimeStep: boolean;
        zBufferCullEnable: boolean;
        quadEnableOverdrawRendering: boolean;
        quadColorShaderCostsEnable: boolean;
        drawProjectedBoxes: boolean;
        quadSimpleRenderingEnable: boolean;
        enableJobs: boolean;
        enableRendering: boolean;
        quadHalfResEnable: boolean;
        quadEnableRendering: boolean;
        enableFixedDelta: boolean;
        quadClipScaleEnable: boolean;
        quadNiceRenderingEnable: boolean;
        quadGroupsJoinAll: boolean;
        quadGroupsJoinNone: boolean;
        quadGroupsJoinNiceAndSimple: boolean;
        quadEnableOpaque: boolean;
        quadVertexShadowsEnable: boolean;
        quadPointLightsEnable: boolean;
        quadSpotLightsEnable: boolean;
        quadEnableSorting: boolean;
        meshRenderingEnable: boolean;
        meshDrawTransforms: boolean;
        meshDrawBoundingBoxes: boolean;
        meshShadowEnable: boolean;
        quadEnableWireframe: boolean;
        enable: boolean;
        quadEnableZOcclusion: boolean;
        meshDrawCullStats: boolean;

    }

    class EmitterTemplateData extends VUShared.DataContainer {

        /**
         * Creates a new EmitterTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EmitterTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EmitterTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pointLightIntensity: VUShared.Vec4;
        pointLightPivot: VUShared.Vec3;
        pointLightColor: VUShared.Vec3;
        maxCount: number;
        name: string;
        timeScale: number;
        lifetimeFrameCount: number;
        lifetime: number;
        rootProcessor: FB.ProcessorData | undefined;
        visibleAfterDistance: number;
        zOcclusionLookup: number[];
        emittableType: FB.EmittableType;
        mesh: FB.MeshAsset | undefined;
        distanceScaleNearValue: number;
        pointLightRadius: number;
        vertexPixelLightingBlendFactor: number;
        globalLocalNormalBlendFactor: number;
        softParticlesFadeDistanceMultiplier: number;
        lightWrapAroundFactor: number;
        lightMultiplier: number;
        distanceScaleFarValue: number;
        pointLightRandomIntensityMin: number;
        meshCullingDistance: number;
        pointLightRandomIntensityMax: number;
        maxSpawnDistance: number;
        minScreenArea: number;
        distanceScaleLength: number;
        pointLightMaxClamp: number;
        particleCullingFactor: number;
        pointLightMinClamp: number;
        followSpawnSource: boolean;
        repeatParticleSpawning: boolean;
        emissive: boolean;
        exclusionVolumeCullEnable: boolean;
        transparencySunShadowEnable: boolean;
        forceFullRes: boolean;
        localSpace: boolean;
        opaque: boolean;
        actAsPointLight: boolean;
        killParticlesWithEmitter: boolean;
        forceNiceSorting: boolean;

    }

    class EmitterTextureAtlasInfo {

        /**
         * Creates a new EmitterTextureAtlasInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterTextureAtlasInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EmitterTextureAtlasInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        minUv: VUShared.Vec2;
        maxUv: VUShared.Vec2;
        textureName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EmitterTextureAtlasInfo;

    }

    class EmitterTextureInfo {

        /**
         * Creates a new EmitterTextureInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new EmitterTextureInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EmitterTextureInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        textureName: string;
        normalmapName: string;
        animationFrameCount: number;
        animationFrameColumnCount: number;
        enableAnimation: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EmitterTextureInfo;

    }

    class EndPointData {

        /**
         * Creates a new EndPointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EndPointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EndPointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pos: number;
        endDamping: number;
        springLength: number;
        springAcceleration: number;
        springDamping: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EndPointData;

    }

    class EngineComponentData extends FB.ComponentData {

        /**
         * Creates a new EngineComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EngineComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to EngineComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to EngineComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EngineComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EngineComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EngineComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        config: FB.EngineConfigData | undefined;
        soundEffect: FB.SoundAsset | undefined;
        surfaceSoundEffect: FB.SoundAsset | undefined;
        useFirstPersonSounds: boolean;
        outputIsEngineInWater: boolean;

    }

    class EngineConfigData extends VUShared.DataContainer {

        /**
         * Creates a new EngineConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EngineConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EngineConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        rpmCurvePoints: number[];
        torqueCurvePoints: number[];
        rpmMin: number;
        rpmMax: number;
        rpmCut: number;
        enginePowerMultiplier: number;
        internalAccelerationFactor: number;
        internalDeaccelerationFactor: number;
        boost: FB.Boost;

    }

    class EnlightenBuildRadiosityParams extends VUShared.DataContainer {

        /**
         * Creates a new EnlightenBuildRadiosityParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenBuildRadiosityParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EnlightenBuildRadiosityParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenBuildRadiosityParams type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EnlightenBuildRadiositySceneDesc extends VUShared.DataContainer {

        /**
         * Creates a new EnlightenBuildRadiositySceneDesc frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenBuildRadiositySceneDesc frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EnlightenBuildRadiositySceneDesc. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenBuildRadiositySceneDesc type.
         */
        static typeInfo: VUShared.TypeInformation;

        lightProbeSets: FB.EnlightenLightProbeSet[];
        instances: FB.EnlightenInputInstance[];
        staticLightProbes: VUShared.Vec3[];
        terrain: string;
        samplesPerCluster: number;
        systemInfluenceRadius: number;
        systemSize: number;
        irBudget: number;
        clusterSize: number;
        saveDebugData: boolean;
        distributedBuild: boolean;
        cacheEnable: boolean;

    }

    export enum EnlightenColorMode {
        EnlightenColorMode_Multiply = 0,
        EnlightenColorMode_Override = 1,
    }
    class EnlightenComponentData extends FB.ComponentData {

        /**
         * Creates a new EnlightenComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to EnlightenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to EnlightenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EnlightenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EnlightenComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        skyBoxSkyColor: VUShared.Vec3;
        skyBoxBackLightColor: VUShared.Vec3;
        skyBoxGroundColor: VUShared.Vec3;
        terrainColor: VUShared.Vec3;
        skyBoxSunLightColor: VUShared.Vec3;
        bounceScale: number;
        cullDistance: number;
        sunScale: number;
        realm: FB.Realm;
        skyBoxBackLightRotationY: number;
        skyBoxSunLightColorSize: number;
        skyBoxBackLightColorSize: number;
        skyBoxBackLightRotationX: number;
        skyBoxEnable: boolean;
        enable: boolean;

    }

    class EnlightenDataAsset extends FB.Asset {

        /**
         * Creates a new EnlightenDataAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenDataAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EnlightenDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EnlightenDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenDataAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugBackFaceTexture: FB.TextureAsset | undefined;
        maxResolutionY: number;
        debugChartTexture: FB.TextureAsset | undefined;
        skyVisibilityTexture: FB.TextureAsset | undefined;
        visibilityThreshold: number;
        maxResolutionX: number;
        loadDebugData: boolean;
        dynamicEnable: boolean;

    }

    class EnlightenDatabaseAsset extends FB.Asset {

        /**
         * Creates a new EnlightenDatabaseAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenDatabaseAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EnlightenDatabaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EnlightenDatabaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenDatabaseAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        dataVersion: number;
        debugMeshDataVersion: number;
        outputSizeX: number;
        outputSizeY: number;
        systems: FB.EnlightenDbSystem[];
        lightProbeSets: FB.EnlightenLightProbeSet[];

    }

    class EnlightenDataCreatorParams extends VUShared.DataContainer {

        /**
         * Creates a new EnlightenDataCreatorParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenDataCreatorParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EnlightenDataCreatorParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenDataCreatorParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        assetName: string;

    }

    class EnlightenDbInstance {

        /**
         * Creates a new EnlightenDbInstance frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenDbInstance frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EnlightenDbInstance type.
         */
        static typeInfo: VUShared.TypeInformation;

        worldBoundingbox: VUShared.AxisAlignedBox;
        worldTransform: VUShared.LinearTransform;
        uvTranslation: VUShared.Vec2;
        uvTransform: VUShared.Vec4;
        geometryId: number;
        objectVariation: string;
        guidString: string;
        uvSizeX: number;
        uvSizeY: number;
        pixelSize: number;
        enlightenMeshName: string;
        meshAsset: string;
        instanceAlbedos: number[];
        cacheKey: VUShared.Guid;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EnlightenDbInstance;

    }

    class EnlightenDbSystem {

        /**
         * Creates a new EnlightenDbSystem frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenDbSystem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EnlightenDbSystem type.
         */
        static typeInfo: VUShared.TypeInformation;

        boundingBox: VUShared.AxisAlignedBox;
        atlasStartX: number;
        atlasStartY: number;
        outputWidth: number;
        outputHeight: number;
        pixelCount: number;
        pixelSize: number;
        systemId: number;
        instances: FB.EnlightenDbInstance[];
        inputSystems: number[];
        systemCache: FB.PrecomputeCache;
        clusteringCache: FB.PrecomputeCache;
        preClusteringCache: FB.PrecomputeCache;
        lightTransportCache: FB.PrecomputeCache;
        visibilityCache: FB.PrecomputeCache;
        terrainSystem: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EnlightenDbSystem;

    }

    class EnlightenEntityData extends FB.EntityData {

        /**
         * Creates a new EnlightenEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        priority: number;
        realm: FB.Realm;
        enable: boolean;

    }

    class EnlightenInputInstance {

        /**
         * Creates a new EnlightenInputInstance frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenInputInstance frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EnlightenInputInstance type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        asset: string;
        objectVariation: string;
        systemId: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EnlightenInputInstance;

    }

    class EnlightenLightProbeSet {

        /**
         * Creates a new EnlightenLightProbeSet frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenLightProbeSet frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EnlightenLightProbeSet type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        boundingBox: VUShared.AxisAlignedBox;
        sizeX: number;
        sizeZ: number;
        sizeY: number;
        systemId: number;
        blendDistance: number;
        priority: number;
        positions: VUShared.Vec3[];
        validIndices: number[];
        inputSystems: number[];
        cache: FB.PrecomputeCache;
        staticProbeSet: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EnlightenLightProbeSet;

    }

    class EnlightenPipelineParams extends VUShared.DataContainer {

        /**
         * Creates a new EnlightenPipelineParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenPipelineParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EnlightenPipelineParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenPipelineParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        dynamicEnable: boolean;

    }

    class EnlightenPipelineTerrain extends FB.Asset {

        /**
         * Creates a new EnlightenPipelineTerrain frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenPipelineTerrain frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EnlightenPipelineTerrain. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EnlightenPipelineTerrain. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenPipelineTerrain type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshes: FB.EnlightenPipelineTerrainMesh[];

    }

    class EnlightenPipelineTerrainMesh {

        /**
         * Creates a new EnlightenPipelineTerrainMesh frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenPipelineTerrainMesh frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EnlightenPipelineTerrainMesh type.
         */
        static typeInfo: VUShared.TypeInformation;

        uvTranslation: VUShared.Vec2;
        boundingBox: VUShared.AxisAlignedBox;
        uvTransform: VUShared.Vec4;
        lightMapResolution: number;
        terrainMeshName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EnlightenPipelineTerrainMesh;

    }

    class EnlightenRuntimeConfig extends FB.Asset {

        /**
         * Creates a new EnlightenRuntimeConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenRuntimeConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EnlightenRuntimeConfig. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EnlightenRuntimeConfig. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenRuntimeConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        jobCount: number;

    }

    class EnlightenRuntimeSettings extends FB.SystemSettings {

        /**
         * Creates a new EnlightenRuntimeSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenRuntimeSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to EnlightenRuntimeSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to EnlightenRuntimeSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenRuntimeSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        albedoDefaultColor: VUShared.Vec3;
        localLightForceRadius: number;
        drawDebugSystemDependenciesEnable: number;
        temporalCoherenceThreshold: number;
        skyBoxScale: number;
        minSystemUpdateCount: number;
        jobCount: number;
        drawDebugSystemBoundingBoxEnable: number;
        lightProbeMaxUpdateSolveCount: number;
        drawDebugLightProbeSize: number;
        compensateSunShadowHeightScale: boolean;
        saveRadiosityTexturesEnable: boolean;
        shadowsEnable: boolean;
        lightMapsEnable: boolean;
        localLightsEnable: boolean;
        localLightCullingEnable: boolean;
        localLightCustumFalloff: boolean;
        lightProbeForceUpdate: boolean;
        forceDynamic: boolean;
        drawDebugSystemsEnable: boolean;
        lightProbeEnable: boolean;
        lightProbeJobsEnable: boolean;
        drawDebugLightProbes: boolean;
        drawDebugLightProbeOcclusion: boolean;
        drawDebugLightProbeStats: boolean;
        drawDebugLightProbeBoundingBoxes: boolean;
        enable: boolean;
        drawSolveTaskPerformance: boolean;
        drawDebugColoringEnable: boolean;
        drawDebugTextures: boolean;
        drawDebugBackFaces: boolean;
        drawDebugTargetMeshes: boolean;
        drawWarningsEnable: boolean;
        albedoForceUpdateEnable: boolean;
        albedoForceColorEnable: boolean;
        drawDebugEntities: boolean;
        terrainMapEnable: boolean;
        emissiveEnable: boolean;

    }

    class EnlightenShaderDatabaseAsset extends FB.Asset {

        /**
         * Creates a new EnlightenShaderDatabaseAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenShaderDatabaseAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EnlightenShaderDatabaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EnlightenShaderDatabaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenShaderDatabaseAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EnlightenState extends VUShared.DataContainer {

        /**
         * Creates a new EnlightenState frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnlightenState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EnlightenState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnlightenState type.
         */
        static typeInfo: VUShared.TypeInformation;

        skyBoxGroundColor: VUShared.Vec3;
        skyBoxSunLightColor: VUShared.Vec3;
        skyBoxBackLightColor: VUShared.Vec3;
        skyBoxSkyColor: VUShared.Vec3;
        sunScale: number;
        outputScale: number;
        bounceScale: number;
        skyBoxSunLightColorSize: number;
        skyBoxBackLightRotationY: number;
        skyBoxBackLightColorSize: number;
        skyBoxBackLightRotationX: number;
        skyBoxEnable: boolean;

    }

    export enum EnlightenType {
        EnlightenType_Dynamic = 0,
        EnlightenType_LightProbe = 1,
        EnlightenType_Static = 2,
    }
    class EnterVehicleSurveyEvent extends FB.MetricEvent {

        /**
         * Creates a new EnterVehicleSurveyEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnterVehicleSurveyEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to EnterVehicleSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to EnterVehicleSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnterVehicleSurveyEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicleName: string;
        surveyMetricLink: VUShared.Guid;

    }

    class EntitlementData {

        /**
         * Creates a new EntitlementData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntitlementData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EntitlementData type.
         */
        static typeInfo: VUShared.TypeInformation;

        license: string;
        entitlementTag: string;
        groupName: string;
        productId: string;
        projectId: string;
        usageType: FB.EntitlementType;
        verifyOwnership: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EntitlementData;

    }

    class EntitlementQuery extends FB.Asset {

        /**
         * Creates a new EntitlementQuery frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntitlementQuery frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EntitlementQuery. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EntitlementQuery. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntitlementQuery type.
         */
        static typeInfo: VUShared.TypeInformation;

        entitlementsData: FB.EntitlementData[];
        groupNames: string[];
        platform: FB.GamePlatform;
        entitlementTag: string;
        productId: string;
        projectId: string;

    }

    export enum EntitlementType {
        EntitlementType_Ignored = 0,
        EntitlementType_Write = 1,
        EntitlementType_Read = 2,
    }
    class EntityBusData extends FB.DataBusData {

        /**
         * Creates a new EntityBusData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityBusData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataBusData to EntityBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to EntityBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EntityBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntityBusData type.
         */
        static typeInfo: VUShared.TypeInformation;

        eventConnections: FB.EventConnection[];
        descriptor: FB.InterfaceDescriptorData | undefined;
        needNetworkId: boolean;
        interfaceHasConnections: boolean;
        alwaysCreateEntityBusClient: boolean;
        alwaysCreateEntityBusServer: boolean;

    }

    export enum EntityCreatorType {
        EntityCreatorType_Unknown = 0,
        EntityCreatorType_Level = 1,
        EntityCreatorType_Spawner = 2,
        EntityCreatorType_Owner = 3,
        EntityCreatorType_Ghost = 4,
    }
    class EntityData extends FB.GameObjectData {

        /**
         * Creates a new EntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum EntityInitPass {
        EntityInitPass_Early = 0,
        EntityInitPass_Normal = 1,
        EntityInitPass_Count = 2,
    }
    class EntityInteractionComponentData extends FB.ComponentData {

        /**
         * Creates a new EntityInteractionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityInteractionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to EntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to EntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntityInteractionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pickupRadius: number;
        maxAmmoPickupTimer: number;
        maxAmmoCrateTimer: number;
        interactWithTypes: FB.InteractionTypesData;
        maxLookAtAngle: number;
        soldierInteractRadius: number;
        soldierInteractInputAction: FB.EntryInputActionEnum;
        allowInteractionWithSoldiers: boolean;
        onlyAllowInteractionWithManDownSoldiers: boolean;

    }

    class EntityRecordingData extends VUShared.DataContainer {

        /**
         * Creates a new EntityRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EntityRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntityRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entityGuid: VUShared.Guid;
        data: FB.PropertyRecordingData[];

    }

    class EntitySettings extends FB.SystemSettings {

        /**
         * Creates a new EntitySettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntitySettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to EntitySettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to EntitySettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntitySettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        outOfEntityBusNetworkIdThreshold: number;
        executionMode: FB.ExecutionModeType;
        spawnSubLevelsFromLogic: boolean;
        editorGameViewEnable: boolean;

    }

    class EntityTransformData extends VUShared.DataContainer {

        /**
         * Creates a new EntityTransformData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityTransformData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EntityTransformData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntityTransformData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entityTransforms: VUShared.LinearTransform[];

    }

    class EntityUid {

        /**
         * Creates a new EntityUid frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityUid frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EntityUid type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EntityUid;

    }

    export enum EntityUpdateOrder {
        EntityUpdateOrder_Async = 1,
        EntityUpdateOrder_Sync = 2,
        EntityUpdateOrder_Both = 3,
    }
    class EntityVoiceOverInfo extends VUShared.DataContainer {

        /**
         * Creates a new EntityVoiceOverInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntityVoiceOverInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EntityVoiceOverInfo. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntityVoiceOverInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        voiceOverType: FB.VoiceOverObject | undefined;
        labels: FB.VoiceOverLabel[];

    }

    export enum EntropyCodecType {
        EntropyCodecType_Arithmetic = 0,
    }
    export enum EntryClass {
        ecPrimary = 0,
        ecSecondary = 1,
    }
    class EntryComponentData extends FB.ComponentData {

        /**
         * Creates a new EntryComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntryComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to EntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to EntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntryComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soldierOffset: VUShared.Vec3;
        aiData: FB.GameAIEntryData | undefined;
        entryClass: FB.EntryClass;
        inputConceptDefinition: FB.EntryInputActionMapsData | undefined;
        inputMapping: FB.InputActionMappingsData | undefined;
        inputCurves: FB.InputCurveData[];
        hudData: FB.EntryComponentHudData;
        entryOrderNumber: number;
        enterImpulse: number;
        entryRadius: number;
        triggerEventOnKey: FB.EntryInputActionEnum;
        entrySpottingSettings: FB.EntrySpottingSettings;
        poseConstraints: FB.PoseConstraintsData;
        soldierTransitionInvisbleTime: number;
        numberOfStances: number;
        entryComponentSound: FB.EntryComponentSoundData | undefined;
        lockSoldierAimingToEntry: boolean;
        isAllowedToExitInAir: boolean;
        show1pSoldierInEntry: boolean;
        stancesEnabled: boolean;
        show1pSoldierInEntryForPlayerOnly: boolean;
        hideSoldierForPassengers: boolean;
        show3pSoldierWeaponInEntry: boolean;
        showSoldierGearInEntry: boolean;
        isShielded: boolean;
        forbiddenForHuman: boolean;
        showSoldierWeaponInEntry: boolean;
        showSoldierInEntry: boolean;

    }

    class EntryComponentHudData {

        /**
         * Creates a new EntryComponentHudData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntryComponentHudData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EntryComponentHudData type.
         */
        static typeInfo: VUShared.TypeInformation;

        index: number;
        seatType: FB.EntrySeatType;
        frustum: boolean;
        visible: boolean;
        maximizeMiniMapOnEntry: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EntryComponentHudData;

    }

    class EntryComponentSoundData extends VUShared.DataContainer {

        /**
         * Creates a new EntryComponentSoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntryComponentSoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EntryComponentSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntryComponentSoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        stanceSounds: FB.StanceSwitchSoundData[];
        stanceSwitchSound: FB.SoundAsset | undefined;

    }

    export enum EntryEnterRestriction {
        EntryEnterRestriction_NoRestriction = 0,
        EntryEnterRestriction_OnlyPrimaryEntry = 1,
    }
    export enum EntryInputActionEnum {
        EIAThrottle = 0,
        EIAStrafe = 1,
        EIABrake = 2,
        EIASwitchPrimaryInventory = 3,
        EIAYaw = 4,
        EIAPitch = 5,
        EIARoll = 6,
        EIAFire = 7,
        EIACameraPitch = 8,
        EIACameraYaw = 9,
        EIAFireCountermeasure = 10,
        EIAZoom = 11,
        EIAJump = 12,
        EIAChangePose = 13,
        EIAProne = 14,
        EIAReload = 15,
        EIASelectWeapon1 = 16,
        EIASelectWeapon2 = 17,
        EIASelectWeapon3 = 18,
        EIASelectWeapon4 = 19,
        EIASelectWeapon5 = 20,
        EIASelectWeapon6 = 21,
        EIASelectWeapon7 = 22,
        EIASelectWeapon8 = 23,
        EIASelectWeapon9 = 24,
        EIASwitchPrimaryWeapon = 25,
        EIAGrenadeLauncher = 26,
        EIAStaticGadget = 27,
        EIADynamicGadget1 = 28,
        EIADynamicGadget2 = 29,
        EIAMeleeAttack = 30,
        EIAThrowGrenade = 31,
        EIASprint = 32,
        EIACrawlSpeed = 33,
        EIACycleFireMode = 34,
        EIAInteract = 35,
        EIAToggleParachute = 36,
        EIACycleRadioChannel = 37,
        EIAToggleCamera = 38,
        EIAScoreboardMenu = 39,
        EIAGearUp = 40,
        EIAGearUpOrToggleWeaponLight = 40,
        EIAGearDown = 41,
        EIAGearDownOrExitSupportedShooting = 41,
        EIAClutch = 42,
        EIAHandBrake = 43,
        EIAGiveOrder = 44,
        EIABreathControl = 45,
        EIAMapZoom = 46,
        EIAChangeVehicle = 47,
        EIAChangeEntry = 48,
        EIAChangeEntry1 = 49,
        EIAChangeEntry2 = 50,
        EIAChangeEntry3 = 51,
        EIAChangeEntry4 = 52,
        EIAChangeEntry5 = 53,
        EIAChangeEntry6 = 54,
        EIAChangeEntry7 = 55,
        EIAChangeEntry8 = 56,
        EIAThreeDimensionalMap = 57,
        EIAShowCommoRose = 58,
        EIAShowLeaderCommoRose = 59,
        EIAQuicktimeInteractDrag = 60,
        EIAQuicktimeFire = 61,
        EIAQuicktimeBlock = 62,
        EIAQuicktimeFastMelee = 63,
        EIAQuicktimeJumpClimb = 64,
        EIAQuicktimeCrouchDuck = 65,
        EIAUndefined = 128,
        EIANoInput = 128,
    }
    class EntryInputActionMapData extends FB.InputActionMapData {

        /**
         * Creates a new EntryInputActionMapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntryInputActionMapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type InputActionMapData to EntryInputActionMapData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionMapData);
        /**
         * Casts an instance of type DataContainer to EntryInputActionMapData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntryInputActionMapData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EntryInputActionMappingData extends FB.InputActionMappingData {

        /**
         * Creates a new EntryInputActionMappingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntryInputActionMappingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type InputActionMappingData to EntryInputActionMappingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionMappingData);
        /**
         * Casts an instance of type DataContainer to EntryInputActionMappingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntryInputActionMappingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actionIdentifier: FB.EntryInputActionEnum;
        conceptIdentifier: FB.InputConceptIdentifiers;

    }

    class EntryInputActionMapsData extends FB.Asset {

        /**
         * Creates a new EntryInputActionMapsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EntryInputActionMapsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to EntryInputActionMapsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to EntryInputActionMapsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EntryInputActionMapsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actionMapSettingsScheme: number;
        defaultInputActionMap: FB.InputActionMapSlot;
        inputActionMaps: FB.EntryInputActionMapData[];

    }

    export enum EntrySeatType {
        EST_Driver = 0,
        EST_Gunner = 1,
        EST_Passenger = 2,
    }
    export enum EntrySpottingSettings {
        ESSDefault = 0,
        ESSSendAndReceive = 1,
        ESSReceive = 2,
        ESSCount = 3,
    }
    class EnvmapEntityData extends FB.EntityData {

        /**
         * Creates a new EnvmapEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EnvmapEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EnvmapEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EnvmapEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EnvmapEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EnvmapEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EnvmapEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class EqualizerSettings extends VUShared.DataContainer {

        /**
         * Creates a new EqualizerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new EqualizerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to EqualizerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EqualizerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        lowShelfFrequency: number;
        lowShelfGain: number;
        highShelfFrequency: number;
        highShelfGain: number;
        hpCutoffFrequency: number;

    }

    class EulerTransformEntityData extends FB.EntityData {

        /**
         * Creates a new EulerTransformEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EulerTransformEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EulerTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EulerTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EulerTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EulerTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EulerTransformEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in1: VUShared.Vec3;
        realm: FB.Realm;
        inValue: number;
        euler: FB.ModifierEuler;

    }

    class EulerTransformSplitterEntityData extends FB.EntityData {

        /**
         * Creates a new EulerTransformSplitterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EulerTransformSplitterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EulerTransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EulerTransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EulerTransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EulerTransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EulerTransformSplitterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        realm: FB.Realm;

    }

    class EvaluatorData extends FB.EmitterComponentData {

        /**
         * Creates a new EvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EmitterComponentData to EvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to EvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        emitterParameter: FB.EmitterParameter;

    }

    export enum EvaluatorType {
        EtDefault = 0,
        EtBox = 1,
        EtPolynomial = 2,
        EtPolynomialOperator = 3,
        EtRandom = 4,
        EtRandomXYZ = 5,
        EtRotateVector = 6,
        EtSampleTexture = 7,
        EtSphere = 8,
        EtConstant = 9,
        EtPolynomialColorInterp = 10,
        EtCamProx = 11,
        EvaluatorTypeCount = 12,
    }
    class EventAndGateEntityData extends FB.EntityData {

        /**
         * Creates a new EventAndGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventAndGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventAndGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventAndGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventAndGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventAndGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventAndGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        eventCount: number;

    }

    class EventCompareGateEntityData extends FB.EntityData {

        /**
         * Creates a new EventCompareGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventCompareGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventCompareGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventCompareGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventCompareGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventCompareGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventCompareGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: number;
        compareType: FB.EventCompareGateType;
        realm: FB.Realm;

    }

    export enum EventCompareGateType {
        EventCompareGate_Equals = 0,
        EventCompareGate_NotEquals = 1,
        EventCompareGate_Less = 2,
        EventCompareGate_LessEquals = 3,
        EventCompareGate_Greater = 4,
        EventCompareGate_GreaterEquals = 5,
    }
    class EventConnection {

        /**
         * Creates a new EventConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EventConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: VUShared.DataContainer | undefined;
        target: VUShared.DataContainer | undefined;
        sourceEvent: FB.EventSpec;
        targetEvent: FB.EventSpec;
        targetType: FB.EventConnectionTargetType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EventConnection;

    }

    export enum EventConnectionTargetType {
        EventConnectionTargetType_Invalid = 0,
        EventConnectionTargetType_ClientAndServer = 1,
        EventConnectionTargetType_Client = 2,
        EventConnectionTargetType_Server = 3,
        EventConnectionTargetType_NetworkedClient = 4,
        EventConnectionTargetType_NetworkedClientAndServer = 5,
    }
    class EventDebugNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new EventDebugNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventDebugNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to EventDebugNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to EventDebugNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventDebugNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        events: FB.DebugEventInput[];

    }

    class EventGateEntityData extends FB.EntityData {

        /**
         * Creates a new EventGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        default: boolean;

    }

    class EventGateNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new EventGateNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventGateNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to EventGateNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to EventGateNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventGateNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        coolDownTime: FB.AudioGraphNodePort;
        enable: FB.AudioGraphNodePort;

    }

    export enum EventGateState {
        EGSInvalid = 0,
        EGSUpright = 1,
        EGSCrouched = 2,
        EGSProne = 3,
        EGSZoomed = 4,
        EGSCount = 5,
    }
    class EventIfSwitchEntityData extends FB.GameEntityData {

        /**
         * Creates a new EventIfSwitchEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventIfSwitchEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to EventIfSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to EventIfSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to EventIfSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventIfSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventIfSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventIfSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventIfSwitchEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        runOnce: boolean;
        startState: boolean;

    }

    class EventMemoryEntityData extends FB.GameEntityData {

        /**
         * Creates a new EventMemoryEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventMemoryEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to EventMemoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to EventMemoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to EventMemoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventMemoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventMemoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventMemoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventMemoryEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class EventQueueEntityData extends FB.EntityData {

        /**
         * Creates a new EventQueueEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventQueueEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventQueueEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventQueueEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventQueueEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventQueueEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventQueueEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class EventScaleData {

        /**
         * Creates a new EventScaleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventScaleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EventScaleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        event: FB.StatEvent;
        scale: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EventScaleData;

    }

    class EventSpec {

        /**
         * Creates a new EventSpec frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventSpec frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the EventSpec type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.EventSpec;

    }

    class EventSplitterEntityData extends FB.EntityData {

        /**
         * Creates a new EventSplitterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventSplitterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventSplitterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        runOnce: boolean;

    }

    class EventSwitchEntityData extends FB.EntityData {

        /**
         * Creates a new EventSwitchEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventSwitchEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventSwitchEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        outEvents: number;
        autoIncrement: boolean;

    }

    class EventSwitcherEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new EventSwitcherEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventSwitcherEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to EventSwitcherEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to EventSwitcherEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventSwitcherEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        caseTrigger: FB.AudioGraphNodePort;
        value: number;

    }

    class EventSwitcherNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new EventSwitcherNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventSwitcherNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to EventSwitcherNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to EventSwitcherNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventSwitcherNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputs: FB.EventSwitcherEntry[];
        value: FB.AudioGraphNodePort;

    }

    class EventSyncEntityData extends FB.EntityData {

        /**
         * Creates a new EventSyncEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new EventSyncEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to EventSyncEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to EventSyncEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to EventSyncEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to EventSyncEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the EventSyncEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ExampleVehicleBlueprintBundleMetadata extends FB.BlueprintBundleMetadata {

        /**
         * Creates a new ExampleVehicleBlueprintBundleMetadata frostbite instance.
         */
        constructor();
        /**
         * Creates a new ExampleVehicleBlueprintBundleMetadata frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BlueprintBundleMetadata to ExampleVehicleBlueprintBundleMetadata. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BlueprintBundleMetadata);
        /**
         * Casts an instance of type DataContainer to ExampleVehicleBlueprintBundleMetadata. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ExampleVehicleBlueprintBundleMetadata type.
         */
        static typeInfo: VUShared.TypeInformation;

        exampleVehicleType: FB.ExampleVehicleType;

    }

    export enum ExampleVehicleType {
        ExampleVehicleType_Small = 0,
        ExampleVehicleType_Medium = 1,
        ExampleVehicleType_Large = 2,
    }
    export enum ExecutionModeType {
        ExecutionMode_Play = 0,
        ExecutionMode_GameView = 1,
        ExecutionMode_PlayFromHere = 2,
    }
    export enum ExitToMenuReason {
        ExitToMenuReason_None = 0,
        ExitToMenuReason_UserDisconnected = 1,
        ExitToMenuReason_DisconnectedFromServer = 2,
        ExitToMenuReason_UnableToConnectToServer = 3,
        ExitToMenuReason_ClientDisconnected = 4,
        ExitToMenuReason_FirstPartyConnectionFailed = 5,
        ExitToMenuReason_MissingContent = 6,
        ExitToMenuReason_TeamKills = 7,
        ExitToMenuReason_KickedByAdmin = 8,
        ExitToMenuReason_Banned = 9,
        ExitToMenuReason_InteractivityTimeout = 10,
        ExitToMenuReason_KickedOutServerFull = 11,
        ExitToMenuReason_ESportsMatchStarting = 12,
        ExitToMenuReason_NotInESportsRosters = 13,
        ExitToMenuReason_ESportsMatchEnding = 14,
        ExitToMenuReason_VirtualServerExpired = 15,
        ExitToMenuReason_VirtualServerRecreate = 16,
        ExitToMenuReason_ESportsTeamFull = 17,
        ExitToMenuReason_ESportsMatchAborted = 18,
        ExitToMenuReason_ESportsMatchWalkover = 19,
        ExitToMenuReason_ESportsMatchWarmupTimedOut = 20,
        ExitToMenuReason_PremiumStatusMismatch = 21,
    }
    export enum ExpanderChannelMode {
        ExpanderChannelMode_Independent = 0,
        ExpanderChannelMode_Grouped = 1,
    }
    class ExpanderNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ExpanderNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ExpanderNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ExpanderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ExpanderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ExpanderNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        threshold: FB.AudioGraphNodePort;
        ratio: FB.AudioGraphNodePort;
        attackTime: FB.AudioGraphNodePort;
        releaseTime: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        channelMode: FB.ExpanderChannelMode;
        plugin: FB.SoundGraphPluginRef;

    }

    class ExplosionEntityData extends FB.GameEntityData {

        /**
         * Creates a new ExplosionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ExplosionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to ExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ExplosionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        detonationEffect: FB.EffectBlueprint | undefined;
        blastImpulse: number;
        maskVolume: FB.MaskVolumeEntityData | undefined;
        destructionMaskVolume: FB.DestructionMaskVolumeEntityData | undefined;
        materialPair: FB.MaterialContainerPair | undefined;
        damageIndicationType: FB.DamageIndicationType;
        empTime: number;
        maxOcclusionRaycastRadius: number;
        innerBlastRadius: number;
        blastDamage: number;
        blastRadius: number;
        shockwaveImpulse: number;
        spawnDelay: number;
        shockwaveDamage: number;
        shockwaveRadius: number;
        cameraShockwaveRadius: number;
        shockwaveTime: number;
        disableOcclusion: boolean;
        disableStaticEntityOcclusion: boolean;
        useEntityTransformForDetonationEffect: boolean;
        hasStunEffect: boolean;
        triggerImpairedHearing: boolean;
        detonateOnce: boolean;
        showOnMinimap: boolean;

    }

    class ExplosionPackEntityData extends FB.MeshProjectileEntityData {

        /**
         * Creates a new ExplosionPackEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ExplosionPackEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshProjectileEntityData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ExplosionPackEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ExplosionPackEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeToLiveOnPlayerDeath: number;
        soldierDetonationData: FB.SoldierDetonationData;
        vehicleDetonationActivationDelay: number;
        vehicleDetonationRadius: number;
        icon: FB.UIHudIcon;
        spottedTime: number;
        defuseRadius: number;
        health: number;
        hasRemoteDetonator: boolean;
        isDestructible: boolean;
        hasVehicleDetonation: boolean;
        receivesExplosionDamage: boolean;

    }

    class ExtendedConstraintsData extends VUShared.DataContainer {

        /**
         * Creates a new ExtendedConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ExtendedConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ExtendedConstraintsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ExtendedConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        heading: number;
        width: number;
        falloff: number;
        angularConstraintMin: number;
        angularConstraintMax: number;

    }

    export enum EyeVectorSpace {
        EyeVectorSpace_World = 0,
        EyeVectorSpace_Object = 1,
        EyeVectorSpace_Tangent = 2,
    }
    class FaceAnimationWaveMapping {

        /**
         * Creates a new FaceAnimationWaveMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new FaceAnimationWaveMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FaceAnimationWaveMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        waveNameHash: number;
        antEnumValue: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FaceAnimationWaveMapping;

    }

    class FaceAnimationWaveMappings extends VUShared.DataContainer {

        /**
         * Creates a new FaceAnimationWaveMappings frostbite instance.
         */
        constructor();
        /**
         * Creates a new FaceAnimationWaveMappings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to FaceAnimationWaveMappings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FaceAnimationWaveMappings type.
         */
        static typeInfo: VUShared.TypeInformation;

        antAsset: FB.AntRef;
        onStartedTalking: FB.AntRef;
        mappings: FB.FaceAnimationWaveMapping[];

    }

    class FaceposerComponentData extends FB.ComponentData {

        /**
         * Creates a new FaceposerComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FaceposerComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to FaceposerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to FaceposerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FaceposerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FaceposerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FaceposerComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        facePoserEnabled: FB.AntRef;
        lodDistance: number;
        facePoseLibraryReference: FB.AntRef;
        facePoseLibrary: FB.AntRef[];
        facePoserDofSetName: string;
        shaderExposedValues: string[];
        facePoseLibraryIndex: number;

    }

    export enum FactionId {
        FactionNeutral = 0,
        FactionUS = 1,
        FactionRUS = 2,
        FactionMEC = 3,
        FactionIdCount = 4,
        FactionInvalid = 5,
    }
    export enum FadeCurveType {
        FadeCurveType_LinearAmplitude = 0,
        FadeCurveType_SineAmplitude = 1,
        FadeCurveType_LinearDecibel = 2,
    }
    class FadeEntityData extends FB.EntityData {

        /**
         * Creates a new FadeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FadeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FadeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fadeTime: number;
        maxWaitFadedWhileStreamingTime: number;
        fadeScreen: boolean;
        fadeUI: boolean;
        fadeRumble: boolean;
        fadeAudio: boolean;
        fadeMovie: boolean;
        startFaded: boolean;

    }

    export enum FaderType {
        FaderType_Linear = 0,
        FaderType_Cosine = 1,
    }
    class FakeHingeData extends FB.FakePhysicsData {

        /**
         * Creates a new FakeHingeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FakeHingeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FakePhysicsData to FakeHingeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FakePhysicsData);
        /**
         * Casts an instance of type DataContainer to FakeHingeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FakeHingeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pivot: VUShared.Vec3;
        rotationAxis: VUShared.Vec3;
        extensionAxis: VUShared.Vec3;
        minAngle: number;
        maxAngle: number;
        angularDampening: number;
        pullbackAcceleration: number;
        progressiveExponent: number;
        inertiaModifier: number;

    }

    class FakePhysicsData extends VUShared.DataContainer {

        /**
         * Creates a new FakePhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FakePhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to FakePhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FakePhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        childFakePhysics: FB.FakePhysicsData | undefined;
        startSpeed: number;
        gravityModifier: number;
        startDampening: number;
        endDampening: number;
        minSpeed: number;
        maxSpeed: number;
        mass: number;

    }

    class FakeSpringData extends FB.FakePhysicsData {

        /**
         * Creates a new FakeSpringData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FakeSpringData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FakePhysicsData to FakeSpringData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FakePhysicsData);
        /**
         * Casts an instance of type DataContainer to FakeSpringData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FakeSpringData type.
         */
        static typeInfo: VUShared.TypeInformation;

        direction: VUShared.Vec3;
        length: number;
        acceleration: number;
        progressiveExponent: number;
        damping: number;

    }

    class FallingStateData extends FB.CharacterStateData {

        /**
         * Creates a new FallingStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FallingStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to FallingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to FallingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FallingStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class FenceModelEntityData extends FB.StaticModelEntityData {

        /**
         * Creates a new FenceModelEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FenceModelEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StaticModelEntityData to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StaticModelEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FenceModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FenceModelEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        width: number;
        angle: number;

    }

    export enum FieldAccessType {
        FieldAccessType_Source = 0,
        FieldAccessType_Target = 1,
        FieldAccessType_SourceAndTarget = 2,
    }
    class FilmGrainComponentData extends FB.ComponentData {

        /**
         * Creates a new FilmGrainComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FilmGrainComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to FilmGrainComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to FilmGrainComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FilmGrainComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FilmGrainComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FilmGrainComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        colorScale: VUShared.Vec3;
        textureScale: VUShared.Vec2;
        realm: FB.Realm;
        texture: FB.TextureAsset | undefined;
        linearFilteringEnable: boolean;
        randomEnable: boolean;
        enable: boolean;

    }

    class FireEffectData {

        /**
         * Creates a new FireEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FireEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FireEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotation: VUShared.Vec3;
        offset: VUShared.Vec3;
        zoomRotation: VUShared.Vec3;
        zoomOffset: VUShared.Vec3;
        effect: FB.EffectBlueprint | undefined;
        useZoomOffset: boolean;
        useZoomRotation: boolean;
        disableDuringZoom: boolean;
        updateTransform: boolean;
        stopLoopingEffects: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FireEffectData;

    }

    class FireLogicData {

        /**
         * Creates a new FireLogicData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FireLogicData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FireLogicData type.
         */
        static typeInfo: VUShared.TypeInformation;

        holdAndRelease: FB.HoldAndReleaseData;
        boltAction: FB.BoltActionData;
        recoil: FB.RecoilData;
        fireInputAction: FB.EntryInputActionEnum;
        reloadInputAction: FB.EntryInputActionEnum;
        cycleFireModeInputAction: FB.EntryInputActionEnum;
        triggerPullWeight: number;
        rateOfFire: number;
        rateOfFireForBurst: number;
        clientFireRateMultiplier: number;
        reloadDelay: number;
        fireLogicTypeArray: FB.FireLogicType[];
        reloadThreshold: number;
        preFireDelay: number;
        reloadTime: number;
        reloadTimeBulletsLeft: number;
        fireLogicType: FB.FireLogicType;
        reloadLogic: FB.ReloadLogic;
        automaticDelay: number;
        reloadType: FB.ReloadType;
        holdOffReloadUntilZoomRelease: boolean;
        forceReloadActionOnFireTrigger: boolean;
        holdOffReloadUntilFireRelease: boolean;
        alwaysAutoReload: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FireLogicData;

    }

    export enum FireLogicType {
        fltSingleFire = 0,
        fltSingleFireWithBoltAction = 1,
        fltAutomaticFire = 2,
        fltBurstFire = 3,
        fltHoldAndRelease = 4,
        fltDetonatedFiring = 5,
        fltCount = 6,
    }
    class FiringDispersionData {

        /**
         * Creates a new FiringDispersionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FiringDispersionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FiringDispersionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngle: number;
        maxAngle: number;
        increasePerShot: number;
        decreasePerSecond: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FiringDispersionData;

    }

    class FiringFunctionData extends FB.GameDataContainer {

        /**
         * Creates a new FiringFunctionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FiringFunctionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainer to FiringFunctionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FiringFunctionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FiringFunctionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dispersion: FB.FiringDispersionData[];
        weaponDispersion: FB.SoldierWeaponDispersion;
        fireEffects1p: FB.FireEffectData[];
        fireEffects3p: FB.FireEffectData[];
        sound: FB.SoundAsset | undefined;
        shot: FB.ShotConfigData;
        fireLogic: FB.FireLogicData;
        ammo: FB.AmmoConfigData;
        overHeat: FB.OverHeatData;
        selfHealTimeWhenDeployed: number;
        ammoCrateReloadDelay: number;
        unlimitedAmmoForAI: boolean;
        usePrimaryAmmo: boolean;

    }

    class FirstPersonCameraData extends VUShared.DataContainer {

        /**
         * Creates a new FirstPersonCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FirstPersonCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to FirstPersonCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FirstPersonCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        offset: VUShared.Vec3;
        weaponBaseOffset: VUShared.Vec3;
        weaponLagRotationOffset: VUShared.Vec3;
        rotation: VUShared.Vec3;
        weaponSpringEffect: FB.WeaponLagSpringEffectData | undefined;
        cameraSpringEffect: FB.WeaponLagSpringEffectData | undefined;
        moveStrafeModifier: number;
        moveForwardModifier: number;
        rotateYawModifier: number;
        rotatePitchModifier: number;
        rotateRollModifier: number;
        zoomMoveStrafeModifier: number;
        zoomMoveForwardModifier: number;
        zoomRotateYawModifier: number;
        zoomRotatePitchModifier: number;
        zoomRotateRollModifier: number;
        releaseModifier: number;
        releaseModifierPitch: number;
        releaseModifierYaw: number;
        releaseModifierRoll: number;
        offsetReleaseModifier: number;
        zoomReleaseModifierPitch: number;
        zoomReleaseModifierYaw: number;
        zoomReleaseModifierRoll: number;
        zoomOffsetReleaseModifier: number;
        rotationAdditionToOffset: number;

    }

    class FlagComponentData extends FB.ComponentData {

        /**
         * Creates a new FlagComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FlagComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to FlagComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to FlagComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FlagComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FlagComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FlagComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        flag_Team1: FB.ObjectBlueprint | undefined;
        flag_Team2: FB.ObjectBlueprint | undefined;

    }

    class FlagCounterEntityData extends FB.GameEntityData {

        /**
         * Creates a new FlagCounterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FlagCounterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to FlagCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to FlagCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to FlagCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FlagCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FlagCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FlagCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FlagCounterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        teamId: FB.TeamId;
        enemyFlagProgress: number;
        roundTime: number;
        objectiveFlagCount: number;
        visibleInMinimap: boolean;

    }

    class FlapComponentData extends FB.PartComponentData {

        /**
         * Creates a new FlapComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FlapComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to FlapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to FlapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to FlapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FlapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FlapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FlapComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotationAxis: FB.RotationAxisEnum;
        rotationScale: number;

    }

    class FlareEntityData extends FB.GrenadeEntityData {

        /**
         * Creates a new FlareEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FlareEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GrenadeEntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GrenadeEntityData);
        /**
         * Casts an instance of type MeshProjectileEntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FlareEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        flareRange: number;

    }

    class FlashlightWeaponData extends FB.WeaponData {

        /**
         * Creates a new FlashlightWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FlashlightWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to FlashlightWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to FlashlightWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to FlashlightWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FlashlightWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        updateFrequency: number;
        range: number;
        angle: number;

    }

    class FlatOutputNodeData extends FB.OutputNodeData {

        /**
         * Creates a new FlatOutputNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FlatOutputNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OutputNodeData to FlatOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OutputNodeData);
        /**
         * Casts an instance of type AudioGraphNodeData to FlatOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to FlatOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FlatOutputNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        angle: number;
        reverbGain: number;
        reverbSend: FB.SoundBusData | undefined;
        centerLevel: FB.AudioGraphNodePort;
        lfeLevel: FB.AudioGraphNodePort;
        panPlugin: FB.SoundGraphPluginRef;
        reverbSendPlugin: FB.SoundGraphPluginRef;

    }

    class FloatEntityData extends FB.EntityData {

        /**
         * Creates a new FloatEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FloatEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        defaultValue: number;
        incDecValue: number;

    }

    class FloatHubEntityData extends FB.EntityData {

        /**
         * Creates a new FloatHubEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatHubEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FloatHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FloatHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FloatHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FloatHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FloatHubEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        inputCount: number;
        inputSelect: number;

    }

    class FloatOption {

        /**
         * Creates a new FloatOption frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatOption frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FloatOption type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        value: number;
        min: number;
        max: number;
        step: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FloatOption;

    }

    class FloatPhysicsData extends VUShared.DataContainer {

        /**
         * Creates a new FloatPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to FloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FloatPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        density: number;
        filledDensity: number;

    }

    class FloatPropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new FloatPropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatPropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to FloatPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to FloatPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to FloatPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FloatPropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: number[];

    }

    class FloatRange {

        /**
         * Creates a new FloatRange frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatRange frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FloatRange type.
         */
        static typeInfo: VUShared.TypeInformation;

        min: number;
        max: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FloatRange;

    }

    class FloatRangeDefaultZero {

        /**
         * Creates a new FloatRangeDefaultZero frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatRangeDefaultZero frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FloatRangeDefaultZero type.
         */
        static typeInfo: VUShared.TypeInformation;

        min: number;
        max: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FloatRangeDefaultZero;

    }

    class FloatRecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new FloatRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to FloatRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to FloatRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FloatRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: number[];

    }

    class FloatUnlockValuePair extends FB.UnlockValuePair {

        /**
         * Creates a new FloatUnlockValuePair frostbite instance.
         */
        constructor();
        /**
         * Creates a new FloatUnlockValuePair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockValuePair to FloatUnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockValuePair);
        /**
         * Casts an instance of type DataContainer to FloatUnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FloatUnlockValuePair type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: number;
        unlockedValue: number;

    }

    class FogComponentData extends FB.ComponentData {

        /**
         * Creates a new FogComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FogComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to FogComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to FogComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FogComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FogComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FogComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        curve: VUShared.Vec4;
        fogColorCurve: VUShared.Vec4;
        fogColor: VUShared.Vec3;
        fogColorStart: number;
        fogDistanceMultiplier: number;
        realm: FB.Realm;
        endValue: number;
        transparencyFadeStart: number;
        start: number;
        transparencyFadeEnd: number;
        fogColorEnd: number;
        transparencyFadeClamp: number;
        heightFogVisibilityRange: number;
        heightFogAltitude: number;
        heightFogDepth: number;
        heightFogFollowCamera: number;
        fogGradientEnable: boolean;
        enable: boolean;
        heightFogEnable: boolean;
        fogColorEnable: boolean;

    }

    class FogEffectState extends VUShared.DataContainer {

        /**
         * Creates a new FogEffectState frostbite instance.
         */
        constructor();
        /**
         * Creates a new FogEffectState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to FogEffectState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FogEffectState type.
         */
        static typeInfo: VUShared.TypeInformation;

        fogColorCurve: VUShared.Vec4;
        curve: VUShared.Vec4;
        fogColor: VUShared.Vec3;
        start: number;
        endValue: number;
        fogColorStart: number;
        fogColorEnd: number;
        heightFogVisibilityRange: number;
        transparencyFadeStart: number;
        transparencyFadeEnd: number;
        transparencyFadeClamp: number;
        heightFogDepth: number;
        heightFogFollowCamera: number;
        heightFogAltitude: number;
        heightFogEnable: boolean;
        enable: boolean;

    }

    class FollowAISoldierOrderEntityData extends FB.FollowPlayerOrderEntityData {

        /**
         * Creates a new FollowAISoldierOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FollowAISoldierOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FollowPlayerOrderEntityData to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FollowPlayerOrderEntityData);
        /**
         * Casts an instance of type BFOrderEntityData to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FollowAISoldierOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FollowAISoldierOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class FollowClosestHumanOrderEntityData extends FB.FollowPlayerOrderEntityData {

        /**
         * Creates a new FollowClosestHumanOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FollowClosestHumanOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FollowPlayerOrderEntityData to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FollowPlayerOrderEntityData);
        /**
         * Casts an instance of type BFOrderEntityData to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FollowClosestHumanOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FollowClosestHumanOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class FollowConstantData extends FB.Asset {

        /**
         * Creates a new FollowConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FollowConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to FollowConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to FollowConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FollowConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        distanceFromPlayerBeforeTeleport: number;
        followHumanMaxDistance: number;
        followHumanInCombatMaxDistance: number;
        followAiMaxDistance: number;
        followAiInCombatMaxDistance: number;
        followMimicPoseDistance: number;
        followInertia: number;
        lookAwayAngle: number;

    }

    class FollowEnvelopeNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new FollowEnvelopeNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FollowEnvelopeNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to FollowEnvelopeNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to FollowEnvelopeNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FollowEnvelopeNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: FB.AudioGraphNodePort;
        y: FB.AudioGraphNodePort;
        base: number;
        scale: number;
        pivot: number;

    }

    class FollowPlayerOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new FollowPlayerOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FollowPlayerOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to FollowPlayerOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to FollowPlayerOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to FollowPlayerOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FollowPlayerOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FollowPlayerOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FollowPlayerOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FollowPlayerOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        formation: FB.FormationData | undefined;
        combatForbidden: boolean;

    }

    class FollowWaypointsEntityData extends FB.EntityData {

        /**
         * Creates a new FollowWaypointsEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FollowWaypointsEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FollowWaypointsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FollowWaypointsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FollowWaypointsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FollowWaypointsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FollowWaypointsEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        typeOfRoute: FB.RouteType;
        usePathFinding: boolean;
        startAtGeometricallyClosestWaypoint: boolean;

    }

    class FootStepTrigger {

        /**
         * Creates a new FootStepTrigger frostbite instance.
         */
        constructor();
        /**
         * Creates a new FootStepTrigger frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FootStepTrigger type.
         */
        static typeInfo: VUShared.TypeInformation;

        time: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FootStepTrigger;

    }

    export enum ForceCondition {
        FCNever = 0,
        FCNotCriticalDamaged = 1,
        FCCriticalDamaged = 2,
        FCNotOccupied = 3,
        FCOccupied = 4,
        FCAlways = 5,
    }
    export enum ForceMagnitudeInputType {
        FMITYaw = 0,
        FMITPitch = 1,
        FMITRoll = 2,
        FMITThrottle = 3,
    }
    export enum ForceType {
        FTForce = 0,
        FTTorque = 1,
    }
    class FormationData extends FB.GameDataContainer {

        /**
         * Creates a new FormationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FormationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainer to FormationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FormationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FormationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        positions: VUShared.Vec3[];
        name: string;

    }

    class FormationHolder extends FB.Asset {

        /**
         * Creates a new FormationHolder frostbite instance.
         */
        constructor();
        /**
         * Creates a new FormationHolder frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to FormationHolder. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to FormationHolder. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FormationHolder type.
         */
        static typeInfo: VUShared.TypeInformation;

        formations: FB.FormationData[];

    }

    class FPSCameraData extends FB.TargetCameraData {

        /**
         * Creates a new FPSCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FPSCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TargetCameraData to FPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetCameraData);
        /**
         * Casts an instance of type CameraData to FPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to FPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FPSCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        turnEffectSettings: FB.TurnEffectData;
        blurEffectSettings: FB.BlurEffectData;
        fov: number;

    }

    class FramerateHistogramPerformanceEvent extends FB.MetricEvent {

        /**
         * Creates a new FramerateHistogramPerformanceEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new FramerateHistogramPerformanceEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to FramerateHistogramPerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to FramerateHistogramPerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FramerateHistogramPerformanceEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        spikeAverage: number;
        below5: number;
        below10: number;
        below15: number;
        below20: number;
        below25: number;
        below30: number;
        below60: number;
        above60: number;
        performanceLink: VUShared.Guid;

    }

    export enum FrequencyShiftSsbFilter {
        FrequencyShiftSsbFilter_None = 0,
        FrequencyShiftSsbFilter_Fir64 = 1,
    }
    class FrequencyShiftSsbNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new FrequencyShiftSsbNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FrequencyShiftSsbNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to FrequencyShiftSsbNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to FrequencyShiftSsbNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FrequencyShiftSsbNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        filter: FB.FrequencyShiftSsbFilter;
        plugin: FB.SoundGraphPluginRef;

    }

    class FrictionScaleAtVelocity {

        /**
         * Creates a new FrictionScaleAtVelocity frostbite instance.
         */
        constructor();
        /**
         * Creates a new FrictionScaleAtVelocity frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the FrictionScaleAtVelocity type.
         */
        static typeInfo: VUShared.TypeInformation;

        frictionScale: number;
        velocity: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.FrictionScaleAtVelocity;

    }

    class FriendlyFireEntityData extends FB.EntityData {

        /**
         * Creates a new FriendlyFireEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FriendlyFireEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FriendlyFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FriendlyFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FriendlyFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FriendlyFireEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FriendlyFireEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        teams: FB.TeamId[];
        enemyCommitmentAllocation: number;
        friendlyCommitmentAllocation: number;
        maxCommitment: number;
        failureThreshold: number;
        decayRate: number;

    }

    class FriendZoneDebugRenderEntityData extends FB.EntityData {

        /**
         * Creates a new FriendZoneDebugRenderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FriendZoneDebugRenderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FriendZoneDebugRenderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FriendZoneDebugRenderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FriendZoneDebugRenderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FriendZoneDebugRenderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FriendZoneDebugRenderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class FriendZoneEntityData extends FB.EntityData {

        /**
         * Creates a new FriendZoneEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FriendZoneEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to FriendZoneEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to FriendZoneEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to FriendZoneEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to FriendZoneEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FriendZoneEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        enemyWeight: number;
        friendlyWeight: number;
        corpsTimeout: number;
        corpsWeight: number;
        countCorpsesForAllTeams: boolean;
        initialZoneRandomized: boolean;

    }

    class FrontEndComponentData extends FB.UIComponentData {

        /**
         * Creates a new FrontEndComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new FrontEndComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to FrontEndComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to FrontEndComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to FrontEndComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the FrontEndComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum GainFaderFadeType {
        GainFaderFadeType_LinearAmplitude = 0,
        GainFaderFadeType_LinearPower = 1,
        GainFaderFadeType_SineAmplitude = 2,
    }
    class GainFaderNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new GainFaderNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GainFaderNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to GainFaderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to GainFaderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GainFaderNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        start: FB.AudioGraphNodePort;
        startTime: FB.AudioGraphNodePort;
        fadeTime: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        fadeType: FB.GainFaderFadeType;
        plugin: FB.SoundGraphPluginRef;

    }

    class GainNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new GainNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GainNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to GainNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to GainNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GainNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class GameAIDifficultyData extends VUShared.DataContainer {

        /**
         * Creates a new GameAIDifficultyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameAIDifficultyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to GameAIDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameAIDifficultyData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameAIEntryData extends FB.Asset {

        /**
         * Creates a new GameAIEntryData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameAIEntryData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameAIEntryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameAIEntryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameAIEntryData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameAISystem extends FB.Asset {

        /**
         * Creates a new GameAISystem frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameAISystem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameAISystem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameAISystem. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameAISystem type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameAIWeaponData extends FB.Asset {

        /**
         * Creates a new GameAIWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameAIWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameAIWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameAIWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameAIWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameAnimationConfig extends FB.Asset {

        /**
         * Creates a new GameAnimationConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameAnimationConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameAnimationConfig. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameAnimationConfig. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameAnimationConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        serverEnable: boolean;
        clientEnable: boolean;
        useRawGamepadInput: boolean;

    }

    class GameAnimationSettings extends FB.SystemSettings {

        /**
         * Creates a new GameAnimationSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameAnimationSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to GameAnimationSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to GameAnimationSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameAnimationSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        temporalLoddingFourthDeltaTime: number;
        antOnClientOnlyGamemodes: string[];
        temporalLoddingFarDistance: number;
        temporalLoddingSixthDeltaTime: number;
        temporalLoddingFifthDeltaTime: number;
        temporalLoddingFirstDeltaTime: number;
        temporalLoddingSecondDeltaTime: number;
        temporalLoddingThirdDeltaTime: number;
        temporalLoddingSixthDistance: number;
        temporalLoddingSecondDistance: number;
        temporalLoddingFifthDistance: number;
        temporalLoddingFirstDistance: number;
        temporalLoddingThirdDistance: number;
        temporalLoddingFourthDistance: number;
        serverEnable: boolean;
        useRawGamepadInput: boolean;
        clientEnable: boolean;
        useAnimationDrivenCharacter: boolean;

    }

    class GameBehaviourTemplateData extends FB.Asset {

        /**
         * Creates a new GameBehaviourTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameBehaviourTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameBehaviourTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameBehaviourTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameBehaviourTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameDataContainer extends VUShared.DataContainer {

        /**
         * Creates a new GameDataContainer frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameDataContainer frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to GameDataContainer. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameDataContainer type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameDataContainerAsset extends FB.Asset {

        /**
         * Creates a new GameDataContainerAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameDataContainerAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameDataContainerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameDataContainerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameDataContainerAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: FB.GameDataContainer | undefined;

    }

    class GameEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new GameEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to GameEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GameEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GameEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GameEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GameEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        components: FB.GameObjectData[];
        enabled: boolean;
        runtimeComponentCount: number;

    }

    class GameInteractionEntityData extends FB.InteractionEntityData {

        /**
         * Creates a new GameInteractionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameInteractionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type InteractionEntityData to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InteractionEntityData);
        /**
         * Casts an instance of type GameEntityData to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GameInteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameInteractionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        blink: FB.BlinkType;
        capturepointVerticalOffset: number;
        delayBetweenUses: number;
        teamId: FB.TeamId;
        inputAction: FB.EntryInputActionEnum;
        holdToInteractTime: number;
        interactionEntityType: FB.InteractionEntityType;
        interactionSid: string;
        interactingSid: string;
        friendlyTextSid: string;
        nameSid: string;
        interactionVerticalOffset: number;
        enemyTextSid: string;
        shrinkSnap: boolean;
        showAsCapturePoint: boolean;

    }

    class GameModeConfiguration extends FB.Asset {

        /**
         * Creates a new GameModeConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameModeConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameModeConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameModeConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameModeConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        information: FB.GameModeInformation[];

    }

    class GameModeInformation {

        /**
         * Creates a new GameModeInformation frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameModeInformation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GameModeInformation type.
         */
        static typeInfo: VUShared.TypeInformation;

        platform: FB.GamePlatform;
        sizes: FB.GameModeSize[];
        defaultSize: FB.GameModeSize;
        allowFallbackToDefault: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GameModeInformation;

    }

    class GameModeSettings extends FB.SystemSettings {

        /**
         * Creates a new GameModeSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameModeSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to GameModeSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to GameModeSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameModeSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        information: FB.GameModeInformation[];

    }

    class GameModeSize {

        /**
         * Creates a new GameModeSize frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameModeSize frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GameModeSize type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        shortName: string;
        metaIdentifier: string;
        playerCount: number;
        teams: FB.GameModeTeamSize[];
        roundsPerMap: number;
        forceSquad: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GameModeSize;

    }

    class GameModeTeamSize {

        /**
         * Creates a new GameModeTeamSize frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameModeTeamSize frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GameModeTeamSize type.
         */
        static typeInfo: VUShared.TypeInformation;

        playerCount: number;
        squadSize: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GameModeTeamSize;

    }

    class GameModeVariation {

        /**
         * Creates a new GameModeVariation frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameModeVariation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GameModeVariation type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        name: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GameModeVariation;

    }

    class GameObjectData extends FB.GameDataContainer {

        /**
         * Creates a new GameObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainer to GameObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GameObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        indexInBlueprint: number;
        isEventConnectionTarget: number;
        isPropertyConnectionTarget: number;

    }

    export enum GameOverResult {
        GameOver_MajorDefeat = 1,
        GameOver_Defeat = 2,
        GameOver_MinorDefeat = 3,
        GameOver_MajorVictory = 4,
        GameOver_Victory = 5,
        GameOver_MinorVictory = 6,
        GameOver_Draw = 7,
    }
    class GamePhysicsEntityData extends FB.GameEntityData {

        /**
         * Creates a new GamePhysicsEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GamePhysicsEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to GamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to GamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GamePhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GamePhysicsEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        physicsData: FB.PhysicsEntityData | undefined;

    }

    export enum GamePlatform {
        GamePlatform_Ps3 = 0,
        GamePlatform_Win32 = 1,
        GamePlatform_Xenon = 2,
        GamePlatform_Any = 3,
        GamePlatform_Invalid = 4,
        GamePlatform_Count = 5,
    }
    class GameplayBone {

        /**
         * Creates a new GameplayBone frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameplayBone frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GameplayBone type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        bone: FB.GameplayBones;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GameplayBone;

    }

    export enum GameplayBones {
        GameplayBones_UndefinedBone = 0,
        GameplayBones_HeadBone = 1,
        GameplayBones_AimBone = 2,
        GameplayBones_RootBone = 3,
        GameplayBones_WeaponBone = 4,
        GameplayBones_ConnectBone = 5,
        GameplayBones_RootMeshBone = 6,
        GameplayBones_MagazineBone = 7,
        GameplayBones_Count = 8,
    }
    class GameRenderSettings extends VUShared.DataContainer {

        /**
         * Creates a new GameRenderSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameRenderSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to GameRenderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameRenderSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        stereoCrosshairDampingFactor: number;
        inactiveSkipFrameCount: number;
        forceOrthoViewSize: number;
        stereoCrosshairRadius: number;
        stereoCrosshairMaxHitDepth: number;
        forceBlurAmount: number;
        drawFpsMethod: number;
        forceFov: number;
        fovMultiplier: number;
        staticModelPartOcclusionMaxScreenArea: number;
        staticModelCullJobCount: number;
        edgeModelLodScale: number;
        edgeModelScreenAreaScale: number;
        xenonRingBufferSize: number;
        splitScreenTestViewCount: number;
        xenonPresentImmediateThreshold: number;
        xenonGammaRampType: number;
        ps3VSyncMethod: number;
        ps3VideoGamma: number;
        ps3FrameMainBufferSize: number;
        ps3FrameLocalBufferSize: number;
        viewDistance: number;
        cameraCutMaxFrameTranslation: number;
        nearPlane: number;
        forceWorldFadeAmount: number;
        edgeModelMaxVisibleInstanceCount: number;
        edgeModelForceLod: number;
        edgeModelViewDistance: number;
        ps3LinearFrameCmdBufEnable: boolean;
        xenonRes1280x704Enable: boolean;
        perfOverlayEnable: boolean;
        gcmHudEnable: boolean;
        movieVSyncEnable: boolean;
        ps3Res1280x704Enable: boolean;
        initialClearEnable: boolean;
        gpuProfilerEnable: boolean;
        ps3CellMemoryTexturesEnable: boolean;
        xenonBufferTwoFramesEnable: boolean;
        drawFpsHistogram: boolean;
        fullscreen: boolean;
        perfOverlayLatestFrameTimeEnable: boolean;
        jobEnable: boolean;
        perfOverlayVisible: boolean;
        emittersEnable: boolean;
        edgeModelsEnable: boolean;
        edgeModelCastShadowsEnable: boolean;
        edgeModelDepthBiasEnable: boolean;
        edgeModelShadowDepthBiasEnable: boolean;
        vSyncFlashTestEnable: boolean;
        entityRenderEnable: boolean;
        edgeModelSpuInstancingEnable: boolean;
        edgeModelUseMainLodEnable: boolean;
        debugRenderServiceEnable: boolean;
        edgeModelUseLodBox: boolean;
        debugRendererEnable: boolean;
        forceVSyncEnable: boolean;
        edgeModelCullEnable: boolean;
        edgeModelFrustumCullEnable: boolean;
        edgeModelOcclusionCullEnable: boolean;
        edgeModelAdditionalCullEnable: boolean;
        edgeModelDrawBoxes: boolean;
        edgeModelDrawStats: boolean;
        staticModelEnable: boolean;
        staticModelMeshesEnable: boolean;
        staticModelZPassEnable: boolean;
        staticModelPartCullEnable: boolean;
        staticModelPartFrustumCullEnable: boolean;
        staticModelPartOcclusionCullEnable: boolean;
        staticModelPartShadowCullEnable: boolean;
        staticModelDrawBoxes: boolean;
        staticModelDrawStats: boolean;
        drawScreenInfo: boolean;
        forceOrthoViewEnable: boolean;
        staticModelCullSpuJobEnable: boolean;
        lockView: boolean;
        resetLockedView: boolean;
        drawInfo: boolean;
        fadeEnable: boolean;
        fadeWaitingEnable: boolean;
        drawFps: boolean;
        destructionVolumeDrawEnable: boolean;
        blurEnable: boolean;
        buildJobSyncEnable: boolean;
        forceSquareOrthoView: boolean;
        enable: boolean;

    }

    class GameSensingTemplateData extends FB.Asset {

        /**
         * Creates a new GameSensingTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameSensingTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameSensingTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameSensingTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameSensingTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GameSettings extends FB.SystemSettings {

        /**
         * Creates a new GameSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to GameSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to GameSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxPlayerCount: number;
        maxSpectatorCount: number;
        layerInclusionTable: FB.SubWorldInclusion | undefined;
        logFileCollisionMode: FB.LogFileCollisionMode;
        logFileRotationHistoryLength: number;
        level: string;
        defaultLayerInclusion: string;
        inputConfiguration: FB.InputConfigurationAsset[];
        defaultTeamId: FB.TeamId;
        levelWarmUpTime: number;
        timeToWaitForQuitTaskCompletion: number;
        platform: FB.GamePlatform;
        version: FB.VersionData | undefined;
        pS3ContentRatingAge: number;
        difficultyIndex: number;
        timeBeforeSpawnIsAllowed: number;
        soldierWeaponSwitching: FB.SoldierWeaponSwitchingData | undefined;
        logHistory: number;
        difficultySettings: FB.DifficultyDatas | undefined;
        metadataContainers: FB.BlueprintBundleMetadataContainer[];
        currentSKU: FB.SKU;
        player: FB.PlayerData | undefined;
        logFileEnable: boolean;
        rotateLogs: boolean;
        enableLoadingProfile: boolean;
        adjustVehicleCenterOfMass: boolean;
        autoAimEnabled: boolean;
        hasUnlimitedAmmo: boolean;
        hasUnlimitedMags: boolean;
        resourceRefreshAlwaysAllowed: boolean;
        useSpeedBasedDetailedCollision: boolean;
        aimAssistEnabled: boolean;
        aimAssistUsePolynomials: boolean;
        forceFreeStreaming: boolean;
        forceDisableFreeStreaming: boolean;
        isGodMode: boolean;
        isJesusMode: boolean;
        isJesusModeAi: boolean;
        useSingleWeaponSelector: boolean;
        gameAdministrationEnabled: boolean;
        allowDestructionOutsideCombatArea: boolean;

    }

    class GameSoundEntityData extends FB.GameEntityData {

        /**
         * Creates a new GameSoundEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameSoundEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to GameSoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to GameSoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GameSoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GameSoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GameSoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GameSoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameSoundEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundAsset | undefined;
        playOnCreation: boolean;

    }

    class GameSplineData extends FB.CustomSplineData {

        /**
         * Creates a new GameSplineData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameSplineData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CustomSplineData to GameSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CustomSplineData);
        /**
         * Casts an instance of type VectorShapeData to GameSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to GameSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to GameSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GameSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GameSplineData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameSplineData type.
         */
        static typeInfo: VUShared.TypeInformation;

        splineType: FB.GameSplineType;

    }

    class GameSplineEntityData extends FB.GameEntityData {

        /**
         * Creates a new GameSplineEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameSplineEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to GameSplineEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to GameSplineEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GameSplineEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GameSplineEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GameSplineEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GameSplineEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameSplineEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        splineType: FB.GameSplineType;
        localPoints: VUShared.Vec3[];
        normals: VUShared.Vec3[];

    }

    export enum GameSplineType {
        GameSplineType_Generic = 0,
        GameSplineType_Pipe = 1,
        GameSplineType_Zipline = 2,
        GameSplineType_Swing = 3,
    }
    class GameTimeSettings extends FB.SystemSettings {

        /**
         * Creates a new GameTimeSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameTimeSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to GameTimeSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to GameTimeSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameTimeSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        vSyncSubtractTime: number;
        joinJobsTimeLimit: number;
        yieldTimeLimit: number;
        yieldTime: number;
        maxInactiveVariableFps: number;
        maxSimFps: number;
        maxVariableFps: number;
        clampTicks: number;
        forceDeltaTime: number;
        forceDeltaTickCount: number;
        timeScale: number;
        useWaitableTimers: boolean;
        forceUseSleepTimer: boolean;
        forceSinglePlayerFixedTick: boolean;
        forceMultiplayerOneTickMin: boolean;
        variableSimTickTimeEnable: boolean;

    }

    class GameTipAsset extends FB.Asset {

        /**
         * Creates a new GameTipAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameTipAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GameTipAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GameTipAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GameTipAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        tips: FB.GameTipData[];

    }

    class GameTipData {

        /**
         * Creates a new GameTipData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GameTipData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GameTipData type.
         */
        static typeInfo: VUShared.TypeInformation;

        text: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GameTipData;

    }

    class GearBagSpec extends FB.Asset {

        /**
         * Creates a new GearBagSpec frostbite instance.
         */
        constructor();
        /**
         * Creates a new GearBagSpec frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GearBagSpec. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GearBagSpec. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GearBagSpec type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxPrimaryWeapons: number;
        maxSecondaryWeapons: number;
        maxSidearms: number;
        maxGadgetsPerSlot: number;
        gadgetSlots: number;
        childSpecs: FB.GearBagSpec[];

    }

    class GearboxConfigData extends VUShared.DataContainer {

        /**
         * Creates a new GearboxConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GearboxConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to GearboxConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GearboxConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        forwardGearRatios: number[];
        forwardGearSpeeds: number[];
        reverseGearRatios: number[];
        reverseGearSpeeds: number[];
        gearboxType: number;
        gearboxMode: number;
        gearChangeTime: number;
        gearDownSpeedFactor: number;
        oppositeDirGearChangeMaxSpeed: number;
        oppositeDirGearChangeTime: number;
        clutchSpeedFactor: number;
        transmissionEfficiency: number;
        backwardThrottleLimit: number;
        useClassicGearBoxAutoClutch: boolean;
        useNeutralGear: boolean;
        limitBackwardThrottle: boolean;
        useAutoClutch: boolean;

    }

    export enum GearSlot {
        GearSlot_Melee = 0,
        GearSlot_Sidearm = 1,
        GearSlot_Primary = 2,
        GearSlot_Auxiliary = 3,
        GearSlot_Secondary = 4,
        GearSlot_Gadget1 = 5,
        GearSlot_Gadget2 = 6,
        GearSlot_Gadget3 = 7,
        GearSlot_Gadget4 = 8,
        GearSlot_Gadget5 = 9,
        GearSlot_Gadget6 = 10,
        GearSlot_Gadget7 = 11,
        GearSlot_GearSlotCount = 12,
        GearSlot_NotEquipped = 13,
    }
    class GeographicalData extends VUShared.DataContainer {

        /**
         * Creates a new GeographicalData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GeographicalData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to GeographicalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GeographicalData type.
         */
        static typeInfo: VUShared.TypeInformation;

        latitude: FB.UIGeoLatitude;
        longitude: FB.UIGeoLongitude;
        seaLevelOffset: number;

    }

    class GeographicalLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new GeographicalLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new GeographicalLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to GeographicalLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to GeographicalLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GeographicalLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        geographicalData: FB.GeographicalData | undefined;

    }

    class GeometryTriggerEntityData extends FB.AreaTriggerEntityData {

        /**
         * Creates a new GeometryTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GeometryTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AreaTriggerEntityData to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AreaTriggerEntityData);
        /**
         * Casts an instance of type TriggerEntityData to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GeometryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GeometryTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class GlobalNode extends FB.UINodeData {

        /**
         * Creates a new GlobalNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new GlobalNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to GlobalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to GlobalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GlobalNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        outputs: FB.UINodePort[];

    }

    class GlobalPostProcessSettings extends VUShared.DataContainer {

        /**
         * Creates a new GlobalPostProcessSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new GlobalPostProcessSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to GlobalPostProcessSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GlobalPostProcessSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        brightness: VUShared.Vec3;
        forceBloomScale: VUShared.Vec3;
        forceVignetteColor: VUShared.Vec4;
        contrast: VUShared.Vec3;
        saturation: VUShared.Vec3;
        filmGrainTextureScale: VUShared.Vec2;
        forceVignetteScale: VUShared.Vec2;
        filmGrainColorScale: VUShared.Vec3;
        ps3EdgeMlaaJobPriority: number;
        bloomBlurIterationCount: number;
        debugModeStep: number;
        bloomBlurFilter: FB.BlurFilter;
        ldrBloomRange: number;
        debugMode: FB.PostProcessDebugMode;
        userBrightnessMin: number;
        uiBrightnessNorm: number;
        ps3EdgeMlaaJobCount: number;
        ps3EdgeMlaaAbsoluteThreshold: number;
        bloomPyramidLevelCount: number;
        bloomPyramidFinalLevel: number;
        userBrightnessMax: number;
        userBrightnessMulScale: number;
        userBrightnessAddScale: number;
        downsampleAverageStartMipmap: number;
        ps3EdgeMlaaThresholdFactor: number;
        ps3EdgeMlaaThresholdBase: number;
        ps3TiledLdrMipmapCount: number;
        ps3TiledFloatMipmapCount: number;
        ps3TiledBloomMipmapCount: number;
        hbaoGaussianBlurSize: FB.BlurFilter;
        forceExposure: number;
        forceBlurAdd: number;
        forceDofEnable: number;
        forceDofFocusDistance: number;
        forceDofNearDistanceScale: number;
        forceDofFarDistanceScale: number;
        forceDofScale: number;
        forceDofBlurFilterDeviation: number;
        hbaoTemporalFilterMaxNumFrames: number;
        hbaoForceVendor: number;
        forceVignetteExponent: number;
        hbaoTemporalFilterThreshold: number;
        forceTonemapMethod: number;
        lutGammaR: number;
        lutGammaG: number;
        hbaoTemporalFilterThreshold2: number;
        forceChromostereopsisEnable: number;
        forceChromostereopsisOffset: number;
        forceChromostereopsisScale: number;
        hbaoBilateralBlurRadius: number;
        forceMiddleGray: number;
        lutGammaB: number;
        lutGammaCurbOffset: number;
        hbaoBilateralBlurSharpness: number;
        hbaoRandomTextureWidth: number;
        lensScopeFilterColorScale: number;
        hbaoStepCount: number;
        hbaoMaxFootprintRadius: number;
        hbaoDirCount: number;
        hue: number;
        hbaoQuality: number;
        hbaoRandomDirVariationCount: number;
        forceDiffusionDofPlaneInFocus: number;
        diffusionDofLuminance: number;
        hbaoTemporalFilterDebugMode: number;
        forceDiffusionDofAperture: number;
        forceDiffusionDofFocalLength: number;
        dynamicAOMethod: FB.DynamicAOMethod;
        drawDebugInfo: boolean;
        colorGradingForceUpdateAlways: boolean;
        bloomBlurEnable: boolean;
        hdrBlurEnable: boolean;
        blurBlendEnable: boolean;
        downsampleAverageFromBloomEnable: boolean;
        filmGrainEnable: boolean;
        ldr16BitBloomEnable: boolean;
        dynamicAOEnable: boolean;
        diffusionDofEnable: boolean;
        hbaoHalfResEnable: boolean;
        hbaoHalfResDepthEnable: boolean;
        hbaoVectorizedEnable: boolean;
        ps3CompressedRenderTargetsEnable: boolean;
        hdrBloomEnable: boolean;
        filmGrainRandomEnable: boolean;
        directExposureEnable: boolean;
        exposureClampEnable: boolean;
        filmGrainLinearFilteringEnable: boolean;
        hbaoBilateralBlurEnable: boolean;
        colorGradingEnable: boolean;
        colorTransformEnable: boolean;
        hbaoBilateralBlurCsEnable: boolean;
        hbaoTemporalFilterEnable: boolean;
        quarterDownsamplingEnable: boolean;
        drawDebugUserBrightnessLUT: boolean;
        bloomPyramidAttenuateEnable: boolean;
        downsampleBeforeBlurEnable: boolean;
        hbaoGaussianBlurEnable: boolean;
        hbaoGaussianBlurHalfResEnable: boolean;
        bloomPyramidEnable: boolean;
        userBrightnessLUTEnable: boolean;
        ps3EdgeMlaaEnable: boolean;
        ps3EdgeMlaaCopyOnly: boolean;
        ps3EdgeMlaaShowEdges: boolean;
        ps3EdgeMlaaRelativeEdgeDetection: boolean;
        ps3EdgeMlaaGpuBlockEnable: boolean;
        ps3BackBufferAsLdrTargetEnable: boolean;
        downsampleLogAverageEnable: boolean;
        bloomQuarterResEnable: boolean;
        bloomEnable: boolean;
        lensScopeFilterEnable: boolean;

    }

    class GravityData extends FB.ProcessorData {

        /**
         * Creates a new GravityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GravityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to GravityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to GravityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to GravityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GravityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        gravity: number;

    }

    class GrenadeEntityData extends FB.MeshProjectileEntityData {

        /**
         * Creates a new GrenadeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GrenadeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshProjectileEntityData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GrenadeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GrenadeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        collisionSpeedMultiplier: number;
        gravity: number;
        grenadeType: FB.GrenadeType;
        minBounceSpeed: number;

    }

    export enum GrenadeType {
        GrenadeType_NotSet = 0,
        GrenadeType_Frag = 1,
        GrenadeType_Smoke = 2,
        GrenadeType_Flash = 3,
    }
    class GroundHeightData {

        /**
         * Creates a new GroundHeightData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GroundHeightData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GroundHeightData type.
         */
        static typeInfo: VUShared.TypeInformation;

        heightSpan: VUShared.Vec2;
        worldSize: number;
        data: number[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GroundHeightData;

    }

    class GroundHeightEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new GroundHeightEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GroundHeightEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to GroundHeightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to GroundHeightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GroundHeightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GroundHeightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GroundHeightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GroundHeightEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: FB.GroundHeightData;

    }

    class GroupHavokAsset extends FB.HavokAsset {

        /**
         * Creates a new GroupHavokAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new GroupHavokAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type HavokAsset to GroupHavokAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.HavokAsset);
        /**
         * Casts an instance of type Asset to GroupHavokAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GroupHavokAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GroupHavokAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        aabb: FB.AssetAabbs[];
        externalAssetScaleIndex: number[];

    }

    class GunMasterKillCounterEntityData extends FB.EntityData {

        /**
         * Creates a new GunMasterKillCounterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunMasterKillCounterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to GunMasterKillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to GunMasterKillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to GunMasterKillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to GunMasterKillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GunMasterKillCounterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponsPreset: FB.GunMasterWeaponsPreset[];

    }

    class GunMasterLevelInfo {

        /**
         * Creates a new GunMasterLevelInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunMasterLevelInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunMasterLevelInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        customizeData: FB.CustomizeSoldierData | undefined;
        killsNeeded: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunMasterLevelInfo;

    }

    export enum GunMasterNotificationType {
        GunMasterNotificationType_LevelUp = 0,
        GunMasterNotificationType_Demoted = 1,
        GunMasterNotificationType_ReachedLevel = 2,
        GunMasterNotificationType_TookLead = 3,
        GunMasterNotificationType_LostLead = 4,
    }
    class GunMasterWeaponsPreset {

        /**
         * Creates a new GunMasterWeaponsPreset frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunMasterWeaponsPreset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunMasterWeaponsPreset type.
         */
        static typeInfo: VUShared.TypeInformation;

        gunMasterLevelInfos: FB.GunMasterLevelInfo[];
        levelOverrides: FB.CustomizeSoldierData[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunMasterWeaponsPreset;

    }

    class GunnerSpottingTrackerData extends FB.HudTrackerData {

        /**
         * Creates a new GunnerSpottingTrackerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunnerSpottingTrackerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type HudTrackerData to GunnerSpottingTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.HudTrackerData);
        /**
         * Casts an instance of type UIPartData to GunnerSpottingTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to GunnerSpottingTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GunnerSpottingTrackerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        spottedInfantryIcon: FB.UIHudIcon;
        spottedVehicleIcon: FB.UIHudIcon;

    }

    class GunSwayBaseData {

        /**
         * Creates a new GunSwayBaseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayBaseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayBaseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseValue: FB.GunSwayDispersionData;
        recoil: FB.GunSwayRecoilData;
        gunSwayLag: FB.GunSwayLagData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayBaseData;

    }

    class GunSwayBaseMoveData {

        /**
         * Creates a new GunSwayBaseMoveData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayBaseMoveData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayBaseMoveData type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseValue: FB.GunSwayDispersionData;
        moving: FB.GunSwayDispersionData;
        recoil: FB.GunSwayRecoilData;
        gunSwayLag: FB.GunSwayLagData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayBaseMoveData;

    }

    class GunSwayBaseMoveJumpData {

        /**
         * Creates a new GunSwayBaseMoveJumpData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayBaseMoveJumpData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayBaseMoveJumpData type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseValue: FB.GunSwayDispersionData;
        moving: FB.GunSwayDispersionData;
        jumping: FB.GunSwayDispersionData;
        sprinting: FB.GunSwayDispersionData;
        vaultingSmallObject: FB.GunSwayDispersionData;
        vaultingMediumObject: FB.GunSwayDispersionData;
        recoil: FB.GunSwayRecoilData;
        gunSwayLag: FB.GunSwayLagData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayBaseMoveJumpData;

    }

    class GunSwayCrouchProneData {

        /**
         * Creates a new GunSwayCrouchProneData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayCrouchProneData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayCrouchProneData type.
         */
        static typeInfo: VUShared.TypeInformation;

        noZoom: FB.GunSwayBaseMoveData;
        zoom: FB.GunSwayBaseMoveData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayCrouchProneData;

    }

    class GunSwayData extends FB.WeaponSwayData {

        /**
         * Creates a new GunSwayData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponSwayData to GunSwayData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponSwayData);
        /**
         * Casts an instance of type DataContainer to GunSwayData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GunSwayData type.
         */
        static typeInfo: VUShared.TypeInformation;

        stand: FB.GunSwayStandData;
        crouch: FB.GunSwayCrouchProneData;
        prone: FB.GunSwayCrouchProneData;
        proneToCrouch: FB.GunSwayStanceTransition;
        proneToStand: FB.GunSwayStanceTransition;
        crouchToProne: FB.GunSwayStanceTransition;
        crouchToStand: FB.GunSwayStanceTransition;
        standToProne: FB.GunSwayStanceTransition;
        standToCrouch: FB.GunSwayStanceTransition;
        suppressionModifierUnzoomed: FB.GunSwayStanceZoomModifierData;
        suppressionModifierZoomed: FB.GunSwayStanceZoomModifierData;
        modifiers: FB.GunSwayModifierData[];
        deviationScaleFactorZoom: number;
        gameplayDeviationScaleFactorZoom: number;
        deviationScaleFactorNoZoom: number;
        gameplayDeviationScaleFactorNoZoom: number;
        shootingRecoilDecreaseScale: number;
        firstShotRecoilMultiplier: number;
        cameraRecoil: FB.CameraRecoilData | undefined;

    }

    class GunSwayDispersionData {

        /**
         * Creates a new GunSwayDispersionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayDispersionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayDispersionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngle: number;
        maxAngle: number;
        increasePerShot: number;
        decreasePerSecond: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayDispersionData;

    }

    class GunSwayDispersionModData {

        /**
         * Creates a new GunSwayDispersionModData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayDispersionModData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayDispersionModData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngleModifier: number;
        maxAngleModifier: number;
        increasePerShotModifier: number;
        decreasePerSecondModifier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayDispersionModData;

    }

    class GunSwayLagData {

        /**
         * Creates a new GunSwayLagData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayLagData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayLagData type.
         */
        static typeInfo: VUShared.TypeInformation;

        moveStrafeModifier: number;
        moveForwardModifier: number;
        rotateYawModifier: number;
        rotatePitchModifier: number;
        releaseModifier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayLagData;

    }

    class GunSwayModifierData extends FB.Asset {

        /**
         * Creates a new GunSwayModifierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayModifierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to GunSwayModifierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to GunSwayModifierData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the GunSwayModifierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockAsset: FB.UnlockAssetBase | undefined;
        standZoomModifier: FB.GunSwayStanceZoomModifierData;
        standNoZoomModifier: FB.GunSwayStanceZoomModifierData;
        crouchZoomModifier: FB.GunSwayStanceZoomModifierData;
        crouchNoZoomModifier: FB.GunSwayStanceZoomModifierData;
        proneZoomModifier: FB.GunSwayStanceZoomModifierData;
        proneNoZoomModifier: FB.GunSwayStanceZoomModifierData;
        onlyInSupportedShooting: boolean;
        onlyOnWeaponLightEnabled: boolean;

    }

    class GunSwayRecoilData {

        /**
         * Creates a new GunSwayRecoilData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayRecoilData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayRecoilData type.
         */
        static typeInfo: VUShared.TypeInformation;

        recoilAmplitudeMax: number;
        recoilAmplitudeIncPerShot: number;
        horizontalRecoilAmplitudeIncPerShotMin: number;
        horizontalRecoilAmplitudeIncPerShotMax: number;
        horizontalRecoilAmplitudeMax: number;
        recoilAmplitudeDecreaseFactor: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayRecoilData;

    }

    class GunSwayStanceTransition {

        /**
         * Creates a new GunSwayStanceTransition frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayStanceTransition frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayStanceTransition type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxPenaltyValue: FB.GunSwayDispersionData;
        coolDown: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayStanceTransition;

    }

    class GunSwayStanceZoomModifierData {

        /**
         * Creates a new GunSwayStanceZoomModifierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayStanceZoomModifierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayStanceZoomModifierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dispersionMod: FB.GunSwayDispersionModData;
        recoilMagnitudeMod: number;
        recoilAngleMod: number;
        lagYawMod: number;
        lagPitchMod: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayStanceZoomModifierData;

    }

    class GunSwayStandData {

        /**
         * Creates a new GunSwayStandData frostbite instance.
         */
        constructor();
        /**
         * Creates a new GunSwayStandData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the GunSwayStandData type.
         */
        static typeInfo: VUShared.TypeInformation;

        noZoom: FB.GunSwayBaseMoveJumpData;
        zoom: FB.GunSwayBaseMoveJumpData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.GunSwayStandData;

    }

    export enum HardwareProfile {
        Hardware_Autodetect = 0,
        Hardware_LowEnd = 1,
        Hardware_Medium = 2,
        Hardware_HighEnd = 3,
        Hardware_Maximum = 4,
    }
    class HavokAsset extends FB.Asset {

        /**
         * Creates a new HavokAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new HavokAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to HavokAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to HavokAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HavokAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        scale: number;
        externalAssets: VUShared.DataContainer[];

    }

    class HdrSetting extends VUShared.DataContainer {

        /**
         * Creates a new HdrSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new HdrSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to HdrSetting. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HdrSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        windowMinTop: number;
        windowMinBottom: number;
        windowTopMinReleaseTime: number;
        windowTopMaxReleaseTime: number;
        windowTopAttackTime: number;
        windowBottomReleaseTime: number;
        windowTopReleaseTimeCurve: FB.AudioCurve;
        dischargeFactor: number;
        maxAllowedEnergy: number;
        windowBottomAttackTime: number;
        windowSize: number;
        compressFactor: number;
        headroom: number;
        allowedOvershoot: number;

    }

    class HealerData {

        /**
         * Creates a new HealerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HealerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HealerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        radius: number;
        health: number;
        healingTime: number;
        pickUpDelay: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HealerData;

    }

    class HealingSphereData {

        /**
         * Creates a new HealingSphereData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HealingSphereData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HealingSphereData type.
         */
        static typeInfo: VUShared.TypeInformation;

        radius: number;
        healthIncSpeed: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HealingSphereData;

    }

    class HealthComponentData extends FB.ComponentData {

        /**
         * Creates a new HealthComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HealthComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to HealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to HealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to HealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to HealthComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HealthComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        health: number;
        materialPair: FB.MaterialContainerPair | undefined;

    }

    class HealthStateData extends VUShared.DataContainer {

        /**
         * Creates a new HealthStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HealthStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to HealthStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HealthStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        objects: FB.GameObjectData[];
        loosePartPhysics: FB.NetworkableLoosePartPhysicsData[];
        spawnedBangerBlueprint: FB.ObjectBlueprint | undefined;
        spawnedBangerImpulseParams: FB.BangerSpawnImpulseParams | undefined;
        health: number;
        partIndex: number;
        physicsEnabled: boolean;
        copyDamageToBanger: boolean;
        canSupportOtherParts: boolean;

    }

    class HeightfieldRasterData extends FB.RasterQuadtreeData {

        /**
         * Creates a new HeightfieldRasterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HeightfieldRasterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterQuadtreeData to HeightfieldRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterQuadtreeData);
        /**
         * Casts an instance of type Asset to HeightfieldRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to HeightfieldRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HeightfieldRasterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class HeightfieldTreeAsset extends FB.RasterTreeAsset {

        /**
         * Creates a new HeightfieldTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new HeightfieldTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterTreeAsset to HeightfieldTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterTreeAsset);
        /**
         * Casts an instance of type DataContainer to HeightfieldTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HeightfieldTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        minHeightWidth: number;
        minHeightSamplesPerSide: number;

    }

    class HidableSoldierMeshWeaponPart {

        /**
         * Creates a new HidableSoldierMeshWeaponPart frostbite instance.
         */
        constructor();
        /**
         * Creates a new HidableSoldierMeshWeaponPart frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HidableSoldierMeshWeaponPart type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponMesh: FB.SkinnedMeshAsset | undefined;
        weaponMeshBlueprint: FB.ObjectBlueprint | undefined;
        boneName: string;
        hideAlways: boolean;
        hideInVehicleEntries: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HidableSoldierMeshWeaponPart;

    }

    class HighPassButterworthNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new HighPassButterworthNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HighPassButterworthNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to HighPassButterworthNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to HighPassButterworthNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HighPassButterworthNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        order: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class HighPassFir64NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new HighPassFir64NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HighPassFir64NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to HighPassFir64NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to HighPassFir64NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HighPassFir64NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class HighPassIir2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new HighPassIir2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HighPassIir2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to HighPassIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to HighPassIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HighPassIir2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class HighShelfIir2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new HighShelfIir2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HighShelfIir2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to HighShelfIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to HighShelfIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HighShelfIir2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class HIKData {

        /**
         * Creates a new HIKData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HIKData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HIKData type.
         */
        static typeInfo: VUShared.TypeInformation;

        reachT: number;
        reachR: number;
        pull: number;
        resist: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HIKData;

    }

    class HitReactionComponentBinding {

        /**
         * Creates a new HitReactionComponentBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new HitReactionComponentBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HitReactionComponentBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        hit: FB.AntRef;
        allowKillFromAnimation: FB.AntRef;
        direction: FB.AntRef;
        firingDistance: FB.AntRef;
        boneType: FB.AntRef;
        impactType: FB.AntRef;
        immortal: FB.AntRef;
        randomAnimationIndex: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HitReactionComponentBinding;

    }

    class HitReactionComponentData extends FB.ComponentData {

        /**
         * Creates a new HitReactionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HitReactionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to HitReactionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to HitReactionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to HitReactionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to HitReactionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HitReactionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        hitReactionBinding: FB.HitReactionComponentBinding;
        enabled: boolean;

    }

    export enum HitReactionType {
        HRT_Body = 0,
        HRT_Head = 1,
        HRT_RightArm = 2,
        HRT_LeftArm = 3,
        HRT_RightLeg = 4,
        HRT_LeftLeg = 5,
        HRT_Count = 6,
    }
    class HoldAndReleaseData {

        /**
         * Creates a new HoldAndReleaseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HoldAndReleaseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HoldAndReleaseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxHoldTime: number;
        minPowerModifier: number;
        maxPowerModifier: number;
        powerIncreasePerSecond: number;
        delay: number;
        killedHoldingPowerModifier: number;
        forceFireWhenKilledHolding: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HoldAndReleaseData;

    }

    class HoldGroundOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new HoldGroundOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HoldGroundOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to HoldGroundOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to HoldGroundOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to HoldGroundOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to HoldGroundOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to HoldGroundOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to HoldGroundOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HoldGroundOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class HovercraftFloatPhysicsData extends FB.HullFloatPhysicsData {

        /**
         * Creates a new HovercraftFloatPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HovercraftFloatPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type HullFloatPhysicsData to HovercraftFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.HullFloatPhysicsData);
        /**
         * Casts an instance of type FloatPhysicsData to HovercraftFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FloatPhysicsData);
        /**
         * Casts an instance of type DataContainer to HovercraftFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HovercraftFloatPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        landResistanceAxisMod: VUShared.Vec3;
        landFrictionAxisMod: VUShared.Vec3;
        frontLength: number;
        sideLength: number;

    }

    class HudCameraShakeData extends FB.UIComponentData {

        /**
         * Creates a new HudCameraShakeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudCameraShakeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to HudCameraShakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to HudCameraShakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to HudCameraShakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudCameraShakeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponDispersionMin: number;
        weaponDispersionMax: number;
        weaponDispersionOffsetScale: number;
        jumpEffectDurationMin: number;
        jumpEffectDurationMax: number;
        jumpEffectMin: number;
        jumpEffectMax: number;
        landEffectDurationMin: number;
        landEffectDurationMax: number;
        landEffectMin: number;
        landEffectMax: number;
        cameraShakeMinAngle: number;
        cameraShakeMaxAngle: number;
        cameraShakeScale: number;
        weaponLagXScale: number;
        weaponLagYScale: number;
        filterSize: number;
        maxDisplacement: number;

    }

    class HudCapturePointTrackerData extends FB.HudTrackerData {

        /**
         * Creates a new HudCapturePointTrackerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudCapturePointTrackerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type HudTrackerData to HudCapturePointTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.HudTrackerData);
        /**
         * Casts an instance of type UIPartData to HudCapturePointTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to HudCapturePointTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudCapturePointTrackerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class HudConfigAsset extends FB.Asset {

        /**
         * Creates a new HudConfigAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudConfigAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to HudConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to HudConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudConfigAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class HudData {

        /**
         * Creates a new HudData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HudData type.
         */
        static typeInfo: VUShared.TypeInformation;

        crosshairScaleMin: number;
        crosshairScaleMax: number;
        crosshairOpacityMin: number;
        crosshairOpacityMax: number;
        crosshairOpacityModifier: number;
        crosshairTypeId: string;
        weaponClass: string;
        cameraShakeModifier: number;
        seaLevelAltFreq: number;
        lowAmmoWarning: number;
        reloadPrompt: number;
        renderTargetIndex: number;
        hudPropertyList: FB.UIPartPropertyList | undefined;
        showMinimap: boolean;
        infiniteAmmo: boolean;
        hideCrosshairWhenAimOnFriend: boolean;
        hideAmmo: boolean;
        useRangeMeter: boolean;
        usePredictedSight: boolean;
        useWeaponOrientations: boolean;
        useVelocityVectorMarker: boolean;
        useLockingController: boolean;
        useThrust: boolean;
        useGForce: boolean;
        useSkidSlip: boolean;
        useClimbRate: boolean;
        useAimWarning: boolean;
        useRenderTarget: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HudData;

    }

    class HudEntityData extends FB.GameEntityData {

        /**
         * Creates a new HudEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to HudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to HudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to HudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to HudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to HudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to HudEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class HudImpactData {

        /**
         * Creates a new HudImpactData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudImpactData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the HudImpactData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxHealth: number;
        minHealth: number;
        maxTimeVisible: number;
        minTimeVisible: number;
        enable: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.HudImpactData;

    }

    class HudProgressbarData extends FB.UIPartData {

        /**
         * Creates a new HudProgressbarData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudProgressbarData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIPartData to HudProgressbarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to HudProgressbarData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudProgressbarData type.
         */
        static typeInfo: VUShared.TypeInformation;

        progressType: FB.ProgressType;

    }

    export enum HudTextReceiver {
        HudTextReceiver_Team = 0,
        HudTextReceiver_Squad = 1,
        HudTextReceiver_All = 2,
        HudTextReceiver_Count = 3,
    }
    class HudTrackerData extends FB.UIPartData {

        /**
         * Creates a new HudTrackerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudTrackerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIPartData to HudTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to HudTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudTrackerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxDistance: number;
        startFadeDistance: number;
        secondFadeDistance: number;
        fadeMinAlpha: number;
        iconSize: number;
        trackerHudRadiusX: number;
        trackerHudRadiusY: number;
        distanceTextOffsetY: number;
        showDistance: boolean;
        displayExtraInfo: boolean;

    }

    class HudVehicleTrackerData extends FB.UIPartData {

        /**
         * Creates a new HudVehicleTrackerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HudVehicleTrackerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIPartData to HudVehicleTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to HudVehicleTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HudVehicleTrackerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        edgePointer: FB.EdgePointerData;
        enemyTrackerIcon: FB.UIHudIcon;
        outsideScreenTrackerIcon: FB.UIHudIcon;
        renderTargetData: FB.VehicleTrackerRenderTargetData;
        missileTrackerIcon: FB.UIHudIcon;
        iconSize: number;
        radarSensitivity: number;
        heatSensitivity: number;
        friendlyTrackerIcon: FB.UIHudIcon;
        laserPaintedVehicleTrackerIcon: FB.UIHudIcon;
        maxDistance: number;
        distanceIconShrinkFactor: number;
        missileLockTrackerIcon: FB.UIHudIcon;
        trackOnlyUsedVehicles: boolean;
        useTrackerSignatures: boolean;
        enableEdgePointers: boolean;
        trackLaserPaintedObjects: boolean;
        useCameraComponentTransform: boolean;
        showTracker: boolean;

    }

    class HullFloatPhysicsData extends FB.FloatPhysicsData {

        /**
         * Creates a new HullFloatPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HullFloatPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FloatPhysicsData to HullFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FloatPhysicsData);
        /**
         * Casts an instance of type DataContainer to HullFloatPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HullFloatPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        waterResistanceAxisMod: VUShared.Vec3;
        waterFrictionAxisMod: VUShared.Vec3;
        offset: VUShared.Vec3;
        subSurfaceSplits: number;
        depth: number;
        width: number;
        length: number;
        frontCurveDegree: number;
        sideCurveDegree: number;
        nonEngineSteer: number;
        nonEngineSteerMinSpeed: number;
        nonEngineSteerMaxSpeed: number;
        waterDampeningMod: number;
        liftModifier: number;
        supportSizeMod: number;
        angularDampening: number;
        frictionThrottleModifier: number;

    }

    class HumanPlayerEntityData extends FB.GameEntityData {

        /**
         * Creates a new HumanPlayerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new HumanPlayerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to HumanPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to HumanPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to HumanPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to HumanPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to HumanPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to HumanPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the HumanPlayerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        playerKilledDelay: number;
        lastManStandingSid: string;
        displayTime: number;

    }

    class IKComponentData extends FB.ComponentData {

        /**
         * Creates a new IKComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IKComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to IKComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to IKComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to IKComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to IKComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IKComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        ikEffector: FB.IKEffectorEnum;
        ikData: FB.HIKData;

    }

    export enum IKEffectorEnum {
        IKLeftHand = 0,
        IKRightHand = 1,
    }
    class ImpulseResponseAsset extends FB.SoundDataAsset {

        /**
         * Creates a new ImpulseResponseAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new ImpulseResponseAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundDataAsset to ImpulseResponseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundDataAsset);
        /**
         * Casts an instance of type Asset to ImpulseResponseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ImpulseResponseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ImpulseResponseAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class InAirStateData extends FB.CharacterStateData {

        /**
         * Creates a new InAirStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InAirStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to InAirStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to InAirStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InAirStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        freeFallVelocity: number;

    }

    export enum IndexBufferFormat {
        IndexBufferFormat_16Bit = 0,
        IndexBufferFormat_32Bit = 1,
    }
    export enum IndexInBlueprint {
        IndexInBlueprint_HighestIndex = 65534,
        IndexInBlueprint_Unknown = 65535,
    }
    class IndexRange {

        /**
         * Creates a new IndexRange frostbite instance.
         */
        constructor();
        /**
         * Creates a new IndexRange frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the IndexRange type.
         */
        static typeInfo: VUShared.TypeInformation;

        first: number;
        last: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.IndexRange;

    }

    class InputActionData extends VUShared.DataContainer {

        /**
         * Creates a new InputActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        isAnalog: boolean;
        negateValue: boolean;

    }

    class InputActionMapData extends VUShared.DataContainer {

        /**
         * Creates a new InputActionMapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputActionMapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputActionMapData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputActionMapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actions: FB.InputActionsData[];
        platformSpecific: FB.InputActionMapPlatform;
        slot: FB.InputActionMapSlot;
        copyKeyBindingsFrom: string;

    }

    class InputActionMappingData extends VUShared.DataContainer {

        /**
         * Creates a new InputActionMappingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputActionMappingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputActionMappingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputActionMappingData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class InputActionMappingsData extends VUShared.DataContainer {

        /**
         * Creates a new InputActionMappingsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputActionMappingsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputActionMappingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputActionMappingsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mappings: FB.InputActionMappingData[];

    }

    export enum InputActionMapPlatform {
        IAMPWin32 = 0,
        IAMPXenon = 1,
        IAMPPs3 = 2,
        IAMPAllPlatforms = 3,
    }
    export enum InputActionMapSlot {
        InputActionMapSlot_Undefined = 0,
        InputActionMapSlot_Root1 = 1,
        InputActionMapSlot_Root2 = 2,
        InputActionMapSlot_Root3 = 3,
        InputActionMapSlot_Root4 = 4,
        InputActionMapSlot_Root5 = 5,
        InputActionMapSlot_Root6 = 6,
        InputActionMapSlot_Root7 = 7,
        InputActionMapSlot_Root8 = 8,
        InputActionMapSlot_Root9 = 9,
        InputActionMapSlot_Root10 = 10,
        InputActionMapSlot_Root11 = 11,
        InputActionMapSlot_Root12 = 12,
        InputActionMapSlot_Root13 = 13,
        InputActionMapSlot_Root14 = 14,
        InputActionMapSlot_Root15 = 15,
        InputActionMapSlot_Root16 = 16,
        InputActionMapSlot_Sticks1 = 17,
        InputActionMapSlot_Sticks2 = 18,
        InputActionMapSlot_Sticks3 = 19,
        InputActionMapSlot_Sticks4 = 20,
        InputActionMapSlot_Buttons1 = 21,
        InputActionMapSlot_Buttons2 = 22,
        InputActionMapSlot_Buttons3 = 23,
        InputActionMapSlot_Buttons4 = 24,
        InputActionMapSlot_Sticks1Buttons1 = 25,
        InputActionMapSlot_Sticks1Buttons2 = 26,
        InputActionMapSlot_Sticks1Buttons3 = 27,
        InputActionMapSlot_Sticks1Buttons4 = 28,
        InputActionMapSlot_Sticks2Buttons1 = 29,
        InputActionMapSlot_Sticks2Buttons2 = 30,
        InputActionMapSlot_Sticks2Buttons3 = 31,
        InputActionMapSlot_Sticks2Buttons4 = 32,
        InputActionMapSlot_Sticks3Buttons1 = 33,
        InputActionMapSlot_Sticks3Buttons2 = 34,
        InputActionMapSlot_Sticks3Buttons3 = 35,
        InputActionMapSlot_Sticks3Buttons4 = 36,
        InputActionMapSlot_Sticks4Buttons1 = 37,
        InputActionMapSlot_Sticks4Buttons2 = 38,
        InputActionMapSlot_Sticks4Buttons3 = 39,
        InputActionMapSlot_Sticks4Buttons4 = 40,
        InputActionMapSlot_Count = 41,
    }
    class InputActionsData extends VUShared.DataContainer {

        /**
         * Creates a new InputActionsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputActionsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputActionsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputActionsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameSid: string;
        conceptIdentifier: FB.InputConceptIdentifiers;
        copyKeyBindingFrom: FB.InputConceptIdentifiers;
        inputActions: FB.InputActionData[];
        hideInKeyBindings: boolean;

    }

    export enum InputConceptIdentifiers {
        ConceptMoveFB = 0,
        ConceptMoveLR = 1,
        ConceptMoveForward = 2,
        ConceptMoveBackward = 3,
        ConceptMoveLeft = 4,
        ConceptMoveRight = 5,
        ConceptYaw = 6,
        ConceptPitch = 7,
        ConceptRoll = 8,
        ConceptRecenterCamera = 9,
        ConceptFire = 10,
        ConceptAltFire = 11,
        ConceptFireCountermeasure = 12,
        ConceptReload = 13,
        ConceptZoom = 14,
        ConceptToggleCamera = 15,
        ConceptSprint = 16,
        ConceptCrawl = 17,
        ConceptToggleWeaponLight = 18,
        ConceptJump = 19,
        ConceptCrouch = 20,
        ConceptCrouchOnHold = 21,
        ConceptProne = 22,
        ConceptInteract = 23,
        ConceptPickUp = 24,
        ConceptDrop = 25,
        ConceptBreathControl = 26,
        ConceptParachute = 27,
        ConceptSwitchInventoryItem = 28,
        ConceptSelectInventoryItem1 = 29,
        ConceptSelectInventoryItem2 = 30,
        ConceptSelectInventoryItem3 = 31,
        ConceptSelectInventoryItem4 = 32,
        ConceptSelectInventoryItem5 = 33,
        ConceptSelectInventoryItem6 = 34,
        ConceptSelectInventoryItem7 = 35,
        ConceptSelectInventoryItem8 = 36,
        ConceptSelectInventoryItem9 = 37,
        ConceptSwitchToPrimaryWeapon = 38,
        ConceptSwitchToGrenadeLauncher = 39,
        ConceptSwitchToStaticGadget = 40,
        ConceptSwitchToDynamicGadget1 = 41,
        ConceptSwitchToDynamicGadget2 = 42,
        ConceptMeleeAttack = 43,
        ConceptThrowGrenade = 44,
        ConceptCycleFireMode = 45,
        ConceptChangeVehicle = 46,
        ConceptBrake = 47,
        ConceptHandBrake = 48,
        ConceptClutch = 49,
        ConceptGearUp = 50,
        ConceptGearDown = 51,
        ConceptGearSwitch = 52,
        ConceptNextPosition = 53,
        ConceptSelectPosition1 = 54,
        ConceptSelectPosition2 = 55,
        ConceptSelectPosition3 = 56,
        ConceptSelectPosition4 = 57,
        ConceptSelectPosition5 = 58,
        ConceptSelectPosition6 = 59,
        ConceptSelectPosition7 = 60,
        ConceptSelectPosition8 = 61,
        ConceptCameraPitch = 62,
        ConceptCameraYaw = 63,
        ConceptMapZoom = 64,
        ConceptMapInnerZoom = 65,
        ConceptMapSize = 66,
        ConceptMapThreeDimensional = 67,
        ConceptScoreboard = 68,
        ConceptMenu = 69,
        ConceptSpawnMenu = 70,
        ConceptCancel = 71,
        ConceptCommMenu1 = 72,
        ConceptCommMenu2 = 73,
        ConceptCommMenu3 = 74,
        ConceptAccept = 75,
        ConceptDecline = 76,
        ConceptSelect = 77,
        ConceptBack = 78,
        ConceptActivate = 79,
        ConceptDeactivate = 80,
        ConceptEdit = 81,
        ConceptView = 82,
        ConceptParentNavigateLeft = 83,
        ConceptParentNavigateRight = 84,
        ConceptMenuZoomIn = 85,
        ConceptMenuZoomOut = 86,
        ConceptPanX = 87,
        ConceptPanY = 88,
        ConceptVoiceFunction1 = 89,
        ConceptSayAllChat = 90,
        ConceptTeamChat = 91,
        ConceptSquadChat = 92,
        ConceptSquadLeaderChat = 93,
        ConceptToggleChat = 94,
        ConceptQuicktimeInteractDrag = 95,
        ConceptQuicktimeFire = 96,
        ConceptQuicktimeBlock = 97,
        ConceptQuicktimeFastMelee = 98,
        ConceptQuicktimeJumpClimb = 99,
        ConceptQuicktimeCrouchDuck = 100,
        ConceptFreeCameraMoveUp = 101,
        ConceptFreeCameraMoveDown = 102,
        ConceptFreeCameraMoveLR = 103,
        ConceptFreeCameraMoveFB = 104,
        ConceptFreeCameraRotateX = 105,
        ConceptFreeCameraRotateY = 106,
        ConceptFreeCameraIncreaseSpeed = 107,
        ConceptFreeCameraDecreaseSpeed = 108,
        ConceptFreeCameraFOVModifier = 109,
        ConceptFreeCameraChangeFOV = 110,
        ConceptFreeCameraSwitchSpeed = 111,
        ConceptFreeCameraTurboSpeed = 112,
        ConceptFreeCameraActivator1 = 113,
        ConceptFreeCameraActivator2 = 114,
        ConceptFreeCameraActivator3 = 115,
        ConceptFreeCameraMayaInputActivator = 116,
        ConceptTargetedCameraDistance = 117,
        ConceptTargetedCameraRotateX = 118,
        ConceptTargetedCameraRotateY = 119,
        ConceptTargetedCameraChangeSpeed = 120,
        ConceptLThumb = 121,
        ConceptRThumb = 122,
        ConceptToggleMinimapType = 123,
        ConceptUndefined = 124,
        ConceptSize = 125,
    }
    class InputConfigurationAsset extends FB.Asset {

        /**
         * Creates a new InputConfigurationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputConfigurationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to InputConfigurationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to InputConfigurationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputConfigurationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultInputConceptDefinition: FB.EntryInputActionMapsData | undefined;
        defaultExclusiveInputConcepts: FB.InputConceptIdentifiers[];
        userConfigurableActionMaps: FB.EditableActionMap[];
        togglePoseAction: FB.EntryInputActionEnum;
        crouchAction: FB.EntryInputActionEnum;
        crouchAndHoldAction: FB.EntryInputActionEnum;
        pickupInteractionAction: FB.EntryInputActionEnum;
        firingDisablingTransitions: FB.PoseTransition[];
        sprintReleaseTime: number;
        throttleInputRequiredForSprint: number;
        standAutomaticallyIfSprinting: boolean;
        proneToStandOnJump: boolean;
        disableCrawlingWhileReloading: boolean;
        disableFiringWhileDeployingBipod: boolean;
        disableFiringWhileJumping: boolean;
        disableSprintingWhileReloading: boolean;
        enableSprintToCrouchTransition: boolean;
        stopSprintingWhenReleasingThrottle: boolean;
        stopSprintingWhenReleasingSprint: boolean;
        waitForSprintReleaseBeforeSprintAgain: boolean;
        vehicleBoostIsToggle: boolean;
        inputCurvesEnabled: boolean;
        disableCrawlingWhileFiring: boolean;

    }

    class InputCurveData extends VUShared.DataContainer {

        /**
         * Creates a new InputCurveData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputCurveData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputCurveData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputCurveData type.
         */
        static typeInfo: VUShared.TypeInformation;

        affectedInputs: FB.EntryInputActionEnum[];
        inputModifierCurve: VUShared.Vec2[];
        handleMultipleInputsAsSquare: boolean;

    }

    export enum InputDeviceAxes {
        IDA_Axis0X = 0,
        IDA_Axis0Y = 1,
        IDA_Axis0XPos = 2,
        IDA_Axis0YPos = 3,
        IDA_Axis0XNeg = 4,
        IDA_Axis0YNeg = 5,
        IDA_Axis1X = 6,
        IDA_Axis1Y = 7,
        IDA_Axis1XPos = 8,
        IDA_Axis1YPos = 9,
        IDA_Axis1XNeg = 10,
        IDA_Axis1YNeg = 11,
        IDA_Axis2X = 12,
        IDA_Axis2Y = 13,
        IDA_Axis3X = 14,
        IDA_Axis3Y = 15,
        IDA_Axis4X = 16,
        IDA_Axis4Y = 17,
        IDA_Axis5X = 18,
        IDA_Axis5Y = 19,
        IDA_Axis6X = 20,
        IDA_Axis6Y = 21,
        IDA_Axis7X = 22,
        IDA_Axis7Y = 23,
        IDA_Undefined = 24,
    }
    export enum InputDeviceKeys {
        IDK_None = 0,
        IDK_Escape = 1,
        IDK_1 = 2,
        IDK_2 = 3,
        IDK_3 = 4,
        IDK_4 = 5,
        IDK_5 = 6,
        IDK_6 = 7,
        IDK_7 = 8,
        IDK_8 = 9,
        IDK_9 = 10,
        IDK_0 = 11,
        IDK_Minus = 12,
        IDK_Equals = 13,
        IDK_Backspace = 14,
        IDK_Tab = 15,
        IDK_Q = 16,
        IDK_W = 17,
        IDK_E = 18,
        IDK_R = 19,
        IDK_T = 20,
        IDK_Y = 21,
        IDK_U = 22,
        IDK_I = 23,
        IDK_O = 24,
        IDK_P = 25,
        IDK_LeftBracket = 26,
        IDK_RightBracket = 27,
        IDK_Enter = 28,
        IDK_LeftCtrl = 29,
        IDK_A = 30,
        IDK_S = 31,
        IDK_D = 32,
        IDK_F = 33,
        IDK_G = 34,
        IDK_H = 35,
        IDK_J = 36,
        IDK_K = 37,
        IDK_L = 38,
        IDK_Semicolon = 39,
        IDK_Apostrophe = 40,
        IDK_Grave = 41,
        IDK_LeftShift = 42,
        IDK_Backslash = 43,
        IDK_Z = 44,
        IDK_X = 45,
        IDK_C = 46,
        IDK_V = 47,
        IDK_B = 48,
        IDK_N = 49,
        IDK_M = 50,
        IDK_Comma = 51,
        IDK_Period = 52,
        IDK_Slash = 53,
        IDK_RightShift = 54,
        IDK_Multiply = 55,
        IDK_LeftAlt = 56,
        IDK_Space = 57,
        IDK_Capital = 58,
        IDK_F1 = 59,
        IDK_F2 = 60,
        IDK_F3 = 61,
        IDK_F4 = 62,
        IDK_F5 = 63,
        IDK_F6 = 64,
        IDK_F7 = 65,
        IDK_F8 = 66,
        IDK_F9 = 67,
        IDK_F10 = 68,
        IDK_Numlock = 69,
        IDK_ScrollLock = 70,
        IDK_Numpad7 = 71,
        IDK_Numpad8 = 72,
        IDK_Numpad9 = 73,
        IDK_Subtract = 74,
        IDK_Numpad4 = 75,
        IDK_Numpad5 = 76,
        IDK_Numpad6 = 77,
        IDK_Add = 78,
        IDK_Numpad1 = 79,
        IDK_Numpad2 = 80,
        IDK_Numpad3 = 81,
        IDK_Numpad0 = 82,
        IDK_Decimal = 83,
        IDK_OEM_102 = 86,
        IDK_F11 = 87,
        IDK_F12 = 88,
        IDK_F13 = 100,
        IDK_F14 = 101,
        IDK_F15 = 102,
        IDK_Kana = 112,
        IDK_Convert = 121,
        IDK_NoConvert = 123,
        IDK_Yen = 125,
        IDK_NumpadEquals = 141,
        IDK_PrevTrack = 144,
        IDK_At = 145,
        IDK_Colon = 146,
        IDK_Underline = 147,
        IDK_Kanji = 148,
        IDK_Stop = 149,
        IDK_Ax = 150,
        IDK_Unlabeled = 151,
        IDK_NextTrack = 153,
        IDK_NumpadEnter = 156,
        IDK_RightCtrl = 157,
        IDK_Mute = 160,
        IDK_Calculator = 161,
        IDK_PlayPause = 162,
        IDK_MediaStop = 164,
        IDK_VolumeDown = 174,
        IDK_VolumeUp = 176,
        IDK_WebHome = 178,
        IDK_NumpadComma = 179,
        IDK_Divide = 181,
        IDK_PrintScreen = 183,
        IDK_RightAlt = 184,
        IDK_Pause = 197,
        IDK_Home = 199,
        IDK_ArrowUp = 200,
        IDK_PageUp = 201,
        IDK_ArrowLeft = 203,
        IDK_ArrowRight = 205,
        IDK_End = 207,
        IDK_ArrowDown = 208,
        IDK_PageDown = 209,
        IDK_Insert = 210,
        IDK_Delete = 211,
        IDK_LeftWin = 219,
        IDK_RightWin = 220,
        IDK_AppMenu = 221,
        IDK_Power = 222,
        IDK_Sleep = 223,
        IDK_Wake = 227,
        IDK_WebSearch = 229,
        IDK_WebFavorites = 230,
        IDK_WebRefresh = 231,
        IDK_WebStop = 232,
        IDK_WebForward = 233,
        IDK_WebBack = 234,
        IDK_MyComputer = 235,
        IDK_Mail = 236,
        IDK_MediaSelect = 237,
        IDK_Undefined = 255,
    }
    export enum InputDeviceMotionControllerButtons {
        IDMCB_Rup = 0,
        IDMCB_Rdown = 1,
        IDMCB_Rleft = 2,
        IDMCB_Rright = 3,
        IDMCB_start = 4,
        IDMCB_alt = 5,
        IDMCB_center = 6,
        IDMCB_trigger = 7,
        IDMCB_reload = 8,
        IDMCB_pumpaction = 9,
        IDMCB_Gstab = 10,
        IDMCB_Grotleft = 11,
        IDMCB_Grotright = 12,
        IDMCB_Undefined = 13,
    }
    export enum InputDeviceMouseButtons {
        IDB_Button_0 = 0,
        IDB_Button_1 = 1,
        IDB_Button_2 = 2,
        IDB_Button_3 = 3,
        IDB_Button_4 = 4,
        IDB_Button_5 = 5,
        IDB_Button_6 = 6,
        IDB_Button_7 = 7,
        IDB_Button_Undefined = 8,
    }
    export enum InputDevicePadButtons {
        IDB_Lup = 0,
        IDB_Ldown = 1,
        IDB_Lleft = 2,
        IDB_Lright = 3,
        IDB_Rup = 4,
        IDB_Rdown = 5,
        IDB_Rleft = 6,
        IDB_Rright = 7,
        IDB_Rtopleft = 8,
        IDB_Rtopright = 9,
        IDB_Lthumb = 10,
        IDB_Rthumb = 11,
        IDB_start = 12,
        IDB_alt = 13,
        IDB_Ltrigger = 14,
        IDB_Rtrigger = 15,
        IDB_Ltrigger2 = 16,
        IDB_Rtrigger2 = 17,
        IDB_XButton1 = 18,
        IDB_XButton2 = 19,
        IDB_XButton3 = 20,
        IDB_XButton4 = 21,
        IDB_XButton5 = 22,
        IDB_XButton6 = 23,
        IDB_XButton7 = 24,
        IDB_XButton8 = 25,
        IDB_XButton9 = 26,
        IDB_XButton10 = 27,
        IDB_XButton11 = 28,
        IDB_XButton12 = 29,
        IDB_XButton13 = 30,
        IDB_XButton14 = 31,
        IDB_XButton15 = 32,
        IDB_XButton16 = 33,
        IDB_XButton17 = 34,
        IDB_XButton18 = 35,
        IDB_PosZAxis = 36,
        IDB_NegZAxis = 37,
        IDB_XRotationPos = 38,
        IDB_XRotationNeg = 39,
        IDB_YRotationPos = 40,
        IDB_YRotationNeg = 41,
        IDB_ZRotationPos = 42,
        IDB_ZRotationNeg = 43,
        IDB_Pov1North = 44,
        IDB_Pov1South = 45,
        IDB_Pov1West = 46,
        IDB_Pov1East = 47,
        IDB_Pov2North = 48,
        IDB_Pov2South = 49,
        IDB_Pov2West = 50,
        IDB_Pov2East = 51,
        IDB_Pov3North = 52,
        IDB_Pov3South = 53,
        IDB_Pov3West = 54,
        IDB_Pov3East = 55,
        IDB_Pov4North = 56,
        IDB_Pov4South = 57,
        IDB_Pov4West = 58,
        IDB_Pov4East = 59,
        IDB_Undefined = 60,
        IDB_NumPadButtons = 60,
    }
    export enum InputDevicePOVs {
        IDP_POV_0 = 0,
        IDP_POV_1 = 1,
        IDP_POV_2 = 2,
        IDP_POV_Undefined = 3,
    }
    export enum InputIds {
        NoInputId = 0,
        SpectatorInputId = 1,
        FreeCameraInputId = 2,
        EntryInputId = 3,
    }
    class InputModifierEntityData extends FB.EntityData {

        /**
         * Creates a new InputModifierEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputModifierEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to InputModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to InputModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to InputModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to InputModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputModifierEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        action: FB.EntryInputActionEnum;
        scale: number;
        offset: number;
        enabled: boolean;

    }

    class InputRecorderData extends VUShared.DataContainer {

        /**
         * Creates a new InputRecorderData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputRecorderData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to InputRecorderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputRecorderData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fileNamePrefix: string;
        fileName: string;
        toggleRecordAction: FB.EntryInputActionEnum;
        autoIncrementFileName: boolean;

    }

    class InputRecorderTrackData {

        /**
         * Creates a new InputRecorderTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputRecorderTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the InputRecorderTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        propertyTrack: FB.FloatPropertyTrackData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.InputRecorderTrackData;

    }

    class InputRestrictionEntityData extends FB.GameEntityData {

        /**
         * Creates a new InputRestrictionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputRestrictionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to InputRestrictionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to InputRestrictionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to InputRestrictionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to InputRestrictionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to InputRestrictionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to InputRestrictionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InputRestrictionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        applyRestrictionsToSpecificPlayer: boolean;
        throttle: boolean;
        strafe: boolean;
        brake: boolean;
        handBrake: boolean;
        clutch: boolean;
        yaw: boolean;
        pitch: boolean;
        roll: boolean;
        fire: boolean;
        fireCountermeasure: boolean;
        altFire: boolean;
        cycleRadioChannel: boolean;
        selectMeleeWeapon: boolean;
        zoom: boolean;
        jump: boolean;
        changeVehicle: boolean;
        changeEntry: boolean;
        changePose: boolean;
        toggleParachute: boolean;
        changeWeapon: boolean;
        reload: boolean;
        toggleCamera: boolean;
        sprint: boolean;
        scoreboardMenu: boolean;
        mapZoom: boolean;
        gearUp: boolean;
        gearDown: boolean;
        threeDimensionalMap: boolean;
        giveOrder: boolean;
        prone: boolean;
        switchPrimaryInventory: boolean;
        switchPrimaryWeapon: boolean;
        grenadeLauncher: boolean;
        staticGadget: boolean;
        dynamicGadget1: boolean;
        dynamicGadget2: boolean;
        meleeAttack: boolean;
        throwGrenade: boolean;
        selectWeapon1: boolean;
        selectWeapon2: boolean;
        selectWeapon3: boolean;
        selectWeapon4: boolean;
        selectWeapon5: boolean;
        selectWeapon6: boolean;
        selectWeapon7: boolean;
        selectWeapon8: boolean;
        selectWeapon9: boolean;
        overridePreviousInputRestriction: boolean;

    }

    class InputSuppressionData {

        /**
         * Creates a new InputSuppressionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InputSuppressionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the InputSuppressionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        suppressVehicleInput: FB.ActionSuppressor[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.InputSuppressionData;

    }

    class InspectAnimationTriggerData {

        /**
         * Creates a new InspectAnimationTriggerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InspectAnimationTriggerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the InspectAnimationTriggerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animation: FB.AntRef;
        probability: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.InspectAnimationTriggerData;

    }

    class InspectEntityData extends FB.GameEntityData {

        /**
         * Creates a new InspectEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InspectEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to InspectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to InspectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to InspectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to InspectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to InspectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to InspectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InspectEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        centerOffset: VUShared.Vec3;
        uiName: string;
        maxLookAtHeight: number;
        viewPoints: FB.InspectViewPointData[];
        cameras: FB.TargetCameraData[];
        minLookAtHeight: number;
        minDistance: number;
        zoomScrollSpeed: number;
        maxDistance: number;
        animationSignal: FB.AntRef;
        zoomScrollAcceleration: number;

    }

    class InspectViewPointData {

        /**
         * Creates a new InspectViewPointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InspectViewPointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the InspectViewPointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        viewPointID: string;
        animationTriggers: FB.InspectAnimationTriggerData[];
        continuousAnimationSignal: FB.AntRef[];
        lookAtHeight: number;
        yaw: number;
        pitch: number;
        distance: number;
        fovOffset: number;
        adjustmentYaw: number;
        fixed: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.InspectViewPointData;

    }

    class InstanceInputNode extends FB.UINodeData {

        /**
         * Creates a new InstanceInputNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new InstanceInputNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to InstanceInputNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to InstanceInputNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InstanceInputNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        out: FB.UINodePort | undefined;

    }

    class InstanceNode extends FB.UINodeData {

        /**
         * Creates a new InstanceNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new InstanceNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to InstanceNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to InstanceNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InstanceNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        uiGraph: FB.UIGraphAsset | undefined;
        inputs: FB.UINodePort[];
        outputs: FB.UINodePort[];

    }

    class InstanceOutputNode extends FB.UINodeData {

        /**
         * Creates a new InstanceOutputNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new InstanceOutputNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to InstanceOutputNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to InstanceOutputNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InstanceOutputNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        id: number;
        destroyGraph: boolean;

    }

    class IntegratorOrDifferentiatorEntityData extends FB.EntityData {

        /**
         * Creates a new IntegratorOrDifferentiatorEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntegratorOrDifferentiatorEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to IntegratorOrDifferentiatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to IntegratorOrDifferentiatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to IntegratorOrDifferentiatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to IntegratorOrDifferentiatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IntegratorOrDifferentiatorEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        updatePass: FB.EntityUpdateOrder;
        startValue: number;
        input: number;
        maxValue: number;
        minValue: number;
        bounded: boolean;

    }

    class IntentData {

        /**
         * Creates a new IntentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the IntentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        defaultModifier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.IntentData;

    }

    class IntEntityData extends FB.EntityData {

        /**
         * Creates a new IntEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to IntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to IntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to IntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to IntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IntEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        defaultValue: number;
        incDecValue: number;

    }

    class InteractableStaticModelEntityData extends FB.StaticModelEntityData {

        /**
         * Creates a new InteractableStaticModelEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InteractableStaticModelEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StaticModelEntityData to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StaticModelEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to InteractableStaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InteractableStaticModelEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class InteractionEntityData extends FB.GameEntityData {

        /**
         * Creates a new InteractionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InteractionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to InteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to InteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to InteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to InteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to InteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to InteractionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InteractionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        useWithinRadius: number;
        useWithinAngle: number;
        preInteractionSoundEffect: FB.SoundAsset | undefined;
        maxUses: number;
        allowInteractionViaRemoteEntry: boolean;
        testIfOccluded: boolean;

    }

    export enum InteractionEntityType {
        IET_None = 0,
        IET_RushCrateArm = 1,
        IET_RushCrateDisarm = 2,
        IET_CTFFlag = 3,
    }
    class InteractionTypesData {

        /**
         * Creates a new InteractionTypesData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InteractionTypesData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the InteractionTypesData type.
         */
        static typeInfo: VUShared.TypeInformation;

        interactionEntity: boolean;
        pickupEntity: boolean;
        ammoCrateEntity: boolean;
        vehicleEntity: boolean;
        explosionPackEntity: boolean;
        soldierEntity: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.InteractionTypesData;

    }

    class InterfaceDescriptorData extends FB.DynamicDataContainer {

        /**
         * Creates a new InterfaceDescriptorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InterfaceDescriptorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DynamicDataContainer to InterfaceDescriptorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DynamicDataContainer);
        /**
         * Casts an instance of type DataContainer to InterfaceDescriptorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InterfaceDescriptorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputEvents: FB.DynamicEvent[];
        outputEvents: FB.DynamicEvent[];
        inputLinks: FB.DynamicLink[];
        outputLinks: FB.DynamicLink[];

    }

    class InterludeOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new InterludeOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new InterludeOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to InterludeOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to InterludeOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to InterludeOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to InterludeOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to InterludeOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to InterludeOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the InterludeOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        isCutscene: boolean;
        crouch: boolean;

    }

    export enum InterpolationType {
        InterpolationType_None = 0,
        InterpolationType_Linear = 1,
        InterpolationType_CatmullRom = 2,
        InterpolationType_Curves = 3,
    }
    class InterruptFlow {

        /**
         * Creates a new InterruptFlow frostbite instance.
         */
        constructor();
        /**
         * Creates a new InterruptFlow frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the InterruptFlow type.
         */
        static typeInfo: VUShared.TypeInformation;

        interruptEnum: FB.UIInterruptID;
        interruptFlow: FB.UIGraphAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.InterruptFlow;

    }

    class IntHubEntityData extends FB.EntityData {

        /**
         * Creates a new IntHubEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntHubEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to IntHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to IntHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to IntHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to IntHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IntHubEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        inputCount: number;
        inputSelect: number;

    }

    class IntOption {

        /**
         * Creates a new IntOption frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntOption frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the IntOption type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.IntOption;

    }

    class IntPropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new IntPropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntPropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to IntPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to IntPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to IntPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IntPropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: number[];

    }

    class IntRecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new IntRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to IntRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to IntRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IntRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: number[];

    }

    class IntUnlockValuePair extends FB.UnlockValuePair {

        /**
         * Creates a new IntUnlockValuePair frostbite instance.
         */
        constructor();
        /**
         * Creates a new IntUnlockValuePair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockValuePair to IntUnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockValuePair);
        /**
         * Casts an instance of type DataContainer to IntUnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IntUnlockValuePair type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: number;
        unlockedValue: number;

    }

    export enum InvitePlatform {
        InvitePlatform_Invalid = 0,
        InvitePlatform_X360 = 1,
        InvitePlatform_PS3 = 2,
        InvitePlatform_PC = 3,
        InvitePlatform_Count = 4,
    }
    export enum InviteType {
        InviteType_Invalid = 0,
        InviteType_Invite = 1,
        InviteType_JoinSession = 2,
        InviteType_JoinFriendSession = 3,
        InviteType_Count = 4,
    }
    class IrReverbControllerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new IrReverbControllerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IrReverbControllerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to IrReverbControllerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to IrReverbControllerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IrReverbControllerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        reverb0: FB.AudioGraphNodePort;
        amplitude0: FB.AudioGraphNodePort;
        reverb1: FB.AudioGraphNodePort;
        amplitude1: FB.AudioGraphNodePort;

    }

    class IrReverbEntityData extends FB.EntityData {

        /**
         * Creates a new IrReverbEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IrReverbEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to IrReverbEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to IrReverbEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to IrReverbEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to IrReverbEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IrReverbEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impulseResponse: FB.ImpulseResponseAsset | undefined;
        gain: number;
        volume: number;
        fadeCurve: FB.FadeCurveType;

    }

    class IrReverbNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new IrReverbNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new IrReverbNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to IrReverbNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to IrReverbNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the IrReverbNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        reverb0: FB.AudioGraphNodePort;
        amplitude0: FB.AudioGraphNodePort;
        reverb1: FB.AudioGraphNodePort;
        amplitude1: FB.AudioGraphNodePort;
        maxReverbLength: number;
        reverbPlugin: FB.SoundGraphPluginRef;

    }

    class JammingComponentData extends FB.ComponentData {

        /**
         * Creates a new JammingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new JammingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to JammingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to JammingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to JammingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to JammingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the JammingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        smokeJamming: FB.SmokeJammingData;
        airMissileJamming: FB.AirMissileJammingData;

    }

    class JetEngineConfigData extends FB.EngineConfigData {

        /**
         * Creates a new JetEngineConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new JetEngineConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EngineConfigData to JetEngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EngineConfigData);
        /**
         * Casts an instance of type DataContainer to JetEngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the JetEngineConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        powerFadeOutRange: VUShared.Vec2;
        forceMagnitudeMultiplier: number;
        angleInputYMultiplier: number;
        angleInputPitchMultiplier: number;
        maxVelocity: number;
        directionVectorIndex: number;
        isWaterJetEngine: boolean;
        isTurnable: boolean;

    }

    class JoypadNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new JoypadNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new JoypadNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to JoypadNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to JoypadNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the JoypadNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        leftAnalogX: FB.AudioGraphNodePort;
        leftAnalogY: FB.AudioGraphNodePort;
        rightAnalogX: FB.AudioGraphNodePort;
        rightAnalogY: FB.AudioGraphNodePort;
        aButton: FB.AudioGraphNodePort;
        bButton: FB.AudioGraphNodePort;

    }

    class JumpNode extends FB.UINodeData {

        /**
         * Creates a new JumpNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new JumpNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to JumpNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to JumpNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the JumpNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        targetNode: FB.UINodeData | undefined;
        targetPort: FB.UINodePort | undefined;

    }

    class JumpStateData extends FB.CharacterStateData {

        /**
         * Creates a new JumpStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new JumpStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to JumpStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to JumpStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the JumpStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        jumpHeight: number;
        jumpEffectSize: number;

    }

    class KeyboardInputActionData extends FB.InputActionData {

        /**
         * Creates a new KeyboardInputActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new KeyboardInputActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type InputActionData to KeyboardInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionData);
        /**
         * Casts an instance of type DataContainer to KeyboardInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KeyboardInputActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        key: FB.InputDeviceKeys;

    }

    class KillAllEntityData extends FB.GameEntityData {

        /**
         * Creates a new KillAllEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new KillAllEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to KillAllEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to KillAllEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to KillAllEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to KillAllEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to KillAllEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to KillAllEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KillAllEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        killAllHumanSoldiers: boolean;

    }

    class KillCounterEntityData extends FB.GameEntityData {

        /**
         * Creates a new KillCounterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new KillCounterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to KillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to KillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to KillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to KillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to KillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to KillCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KillCounterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        teamKillWeight: FB.KillWeight;
        teamId: FB.TeamId;
        neutralTeamWeight: FB.KillWeight;
        enemyWeight: number;
        maxKillCount: number;
        ignoreAI: boolean;

    }

    class KillEvent extends FB.MetricEvent {

        /**
         * Creates a new KillEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new KillEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to KillEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to KillEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KillEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        victimPosition: VUShared.Vec3;
        victimId: number;
        time: number;
        weapon: string;

    }

    class KillFromVehicleScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new KillFromVehicleScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new KillFromVehicleScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to KillFromVehicleScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to KillFromVehicleScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KillFromVehicleScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class KillWeight {

        /**
         * Creates a new KillWeight frostbite instance.
         */
        constructor();
        /**
         * Creates a new KillWeight frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the KillWeight type.
         */
        static typeInfo: VUShared.TypeInformation;

        lowIntenseWeight: number;
        highIntenseWeight: number;
        coolDownTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.KillWeight;

    }

    class KitPickupEntityData extends FB.PickupEntityData {

        /**
         * Creates a new KitPickupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new KitPickupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PickupEntityData to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PickupEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to KitPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KitPickupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        keepAdditionalWeapons: boolean;
        keepAmmoState: boolean;

    }

    class KitState extends FB.MetricState {

        /**
         * Creates a new KitState frostbite instance.
         */
        constructor();
        /**
         * Creates a new KitState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricState to KitState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricState);
        /**
         * Casts an instance of type MetricEvent to KitState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to KitState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KitState type.
         */
        static typeInfo: VUShared.TypeInformation;

        kit: string;

    }

    class KitStateEvent extends FB.MetricEvent {

        /**
         * Creates a new KitStateEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new KitStateEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to KitStateEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to KitStateEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KitStateEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        kit: string;
        secondsAsKit: number;

    }

    class KyotoPlayerAliveFilterEntityData extends FB.EntityData {

        /**
         * Creates a new KyotoPlayerAliveFilterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new KyotoPlayerAliveFilterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to KyotoPlayerAliveFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to KyotoPlayerAliveFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to KyotoPlayerAliveFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to KyotoPlayerAliveFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the KyotoPlayerAliveFilterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LadderComponentData extends FB.ComponentData {

        /**
         * Creates a new LadderComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LadderComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to LadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to LadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LadderComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LadderComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LadderEntityData extends FB.StaticModelEntityData {

        /**
         * Creates a new LadderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LadderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StaticModelEntityData to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StaticModelEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LadderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LadderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LakeData extends FB.VisualVectorShapeData {

        /**
         * Creates a new LakeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LakeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VisualVectorShapeData to LakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VisualVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to LakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to LakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to LakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LakeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LakeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LandingFlapData extends VUShared.DataContainer {

        /**
         * Creates a new LandingFlapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LandingFlapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to LandingFlapData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LandingFlapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        activationHeight: number;
        heightTolerance: number;
        activationVelocity: number;
        velocityTolerance: number;

    }

    class LandingGearConditionData {

        /**
         * Creates a new LandingGearConditionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LandingGearConditionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LandingGearConditionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        height: number;
        velocity: number;
        angle: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LandingGearConditionData;

    }

    class LandingGearLogicData extends VUShared.DataContainer {

        /**
         * Creates a new LandingGearLogicData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LandingGearLogicData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to LandingGearLogicData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LandingGearLogicData type.
         */
        static typeInfo: VUShared.TypeInformation;

        retractCondition: FB.LandingGearConditionData;
        deployCondition: FB.LandingGearConditionData;

    }

    export enum LanguageFormat {
        LanguageFormat_English = 0,
        LanguageFormat_French = 1,
        LanguageFormat_German = 2,
        LanguageFormat_Spanish = 3,
        LanguageFormat_Italian = 4,
        LanguageFormat_Japanese = 5,
        LanguageFormat_Russian = 6,
        LanguageFormat_Polish = 7,
        LanguageFormat_Dutch = 8,
        LanguageFormat_Portuguese = 9,
        LanguageFormat_TraditionalChinese = 10,
        LanguageFormat_Korean = 11,
        LanguageFormat_Czech = 12,
        LanguageFormat_Count = 13,
        LanguageFormat_Undefined = 14,
    }
    class LanPresenceBackendData extends FB.PresenceBackendData {

        /**
         * Creates a new LanPresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LanPresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceBackendData to LanPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceBackendData);
        /**
         * Casts an instance of type Asset to LanPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LanPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LanPresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LanServerBackendData extends FB.ServerBackendData {

        /**
         * Creates a new LanServerBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LanServerBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ServerBackendData to LanServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ServerBackendData);
        /**
         * Casts an instance of type Asset to LanServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LanServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LanServerBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LaserDesignatorData extends FB.LockingWeaponData {

        /**
         * Creates a new LaserDesignatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LaserDesignatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LockingWeaponData to LaserDesignatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LockingWeaponData);
        /**
         * Casts an instance of type WeaponData to LaserDesignatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to LaserDesignatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to LaserDesignatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LaserDesignatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        postLockTime: number;
        bomberTime: number;
        bombWarnTime: number;
        bomberSound: FB.SoundAsset | undefined;

    }

    class LaserPainterData extends FB.LockingWeaponData {

        /**
         * Creates a new LaserPainterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LaserPainterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LockingWeaponData to LaserPainterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LockingWeaponData);
        /**
         * Casts an instance of type WeaponData to LaserPainterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to LaserPainterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to LaserPainterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LaserPainterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeObjectIsPainted: number;

    }

    class LensFlareComponentData extends FB.ComponentData {

        /**
         * Creates a new LensFlareComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LensFlareComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to LensFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to LensFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LensFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LensFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LensFlareComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lensFlare: FB.LensFlareEntityData | undefined;

    }

    class LensFlareElement {

        /**
         * Creates a new LensFlareElement frostbite instance.
         */
        constructor();
        /**
         * Creates a new LensFlareElement frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LensFlareElement type.
         */
        static typeInfo: VUShared.TypeInformation;

        sizeCamDistCurve: VUShared.Vec4;
        sizeAngleCurve: VUShared.Vec4;
        size: VUShared.Vec2;
        sizeOccluderCurve: VUShared.Vec4;
        sizeScreenPosCurve: VUShared.Vec4;
        alphaCamDistCurve: VUShared.Vec4;
        alphaOccluderCurve: VUShared.Vec4;
        alphaAngleCurve: VUShared.Vec4;
        alphaScreenPosCurve: VUShared.Vec4;
        sizeCamDistMax: number;
        rayDistance: number;
        shader: FB.SurfaceShaderBaseAsset | undefined;
        alphaCamDistMax: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LensFlareElement;

    }

    class LensFlareEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new LensFlareEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LensFlareEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to LensFlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LensFlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LensFlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LensFlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LensFlareEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LensFlareEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        elements: FB.LensFlareElement[];
        occluderSize: number;
        visible: boolean;
        halfRes: boolean;
        debugDrawOccluder: boolean;

    }

    class LensScopeComponentData extends FB.ComponentData {

        /**
         * Creates a new LensScopeComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LensScopeComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to LensScopeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to LensScopeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LensScopeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LensScopeComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LensScopeComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        chromaticAberrationColor1: VUShared.Vec3;
        radialBlendDistanceCoefficients: VUShared.Vec2;
        chromaticAberrationColor2: VUShared.Vec3;
        blurCenter: VUShared.Vec2;
        chromaticAberrationDisplacement2: VUShared.Vec2;
        chromaticAberrationDisplacement1: VUShared.Vec2;
        chromaticAberrationStrengths: VUShared.Vec2;
        blurScale: number;
        realm: FB.Realm;
        enable: boolean;

    }

    class LevelAudioObstructionAsset extends FB.Asset {

        /**
         * Creates a new LevelAudioObstructionAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelAudioObstructionAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to LevelAudioObstructionAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LevelAudioObstructionAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelAudioObstructionAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        materialMap: FB.AudioObstructionMaterialInfo[];
        frequencySlewRate: number;
        gainSlewRate: number;
        maxRaycastDistanceSquared: number;

    }

    class LevelControlEntityData extends FB.GameEntityData {

        /**
         * Creates a new LevelControlEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelControlEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to LevelControlEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to LevelControlEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LevelControlEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LevelControlEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LevelControlEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LevelControlEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelControlEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelToLoad: string;
        rollCredits: boolean;

    }

    class LevelData extends FB.WorldData {

        /**
         * Creates a new LevelData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WorldData to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WorldData);
        /**
         * Casts an instance of type SubWorldData to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubWorldData);
        /**
         * Casts an instance of type SpatialPrefabBlueprint to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialPrefabBlueprint);
        /**
         * Casts an instance of type PrefabBlueprint to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PrefabBlueprint);
        /**
         * Casts an instance of type Blueprint to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelData type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelReference: FB.ReferenceObjectData | undefined;
        pathfindingBlobInfo: FB.PathfindingBlob;
        aiSystem: FB.GameAISystem | undefined;
        worldSizeXZ: number;
        levelDescription: FB.LevelDescription;
        gameConfigurationName: string;
        emitterSystemAsset: FB.EmitterSystemAsset | undefined;
        emitterExclusionVolumes: FB.EmitterExclusionVolumeData[];
        defaultFOV: number;
        infantryFOVMultiplier: number;
        maxEntityBusNetworkCount: number;
        soundStates: FB.SoundStateSettingsAsset | undefined;
        voiceOverSystem: FB.VoiceOverSystemAsset | undefined;
        voiceOverLogic: FB.VoiceOverLogicAsset[];
        maxVehicleHeight: number;
        animatedSkeletonDatabase: FB.AnimatedSkeletonDatabase | undefined;
        enlightenShaderDatabase: FB.EnlightenShaderDatabaseAsset | undefined;
        antProjectAssets: FB.AntProjectAsset[];
        aerialHeightmapData: string;
        audioObstructionInfo: FB.LevelAudioObstructionAsset | undefined;
        cameraTransitions: FB.CameraTransition[];
        cameraModes: FB.CameraModeAsset[];
        faceAnimationsWaveMappings: FB.FaceAnimationWaveMappings | undefined;
        hackForceBuild: FB.Asset | undefined;
        hugeBroadPhase: boolean;
        freeStreamingEnable: boolean;

    }

    class LevelDescription {

        /**
         * Creates a new LevelDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LevelDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;
        components: FB.LevelDescriptionComponent[];
        isCoop: boolean;
        isMenu: boolean;
        isMultiplayer: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LevelDescription;

    }

    class LevelDescriptionAsset extends FB.Asset {

        /**
         * Creates a new LevelDescriptionAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelDescriptionAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to LevelDescriptionAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LevelDescriptionAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelDescriptionAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelName: string;
        categories: FB.LevelDescriptionInclusionCategory[];
        description: FB.LevelDescription;
        startPoints: string[];

    }

    class LevelDescriptionComponent extends VUShared.DataContainer {

        /**
         * Creates a new LevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to LevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LevelDescriptionInclusionCategory {

        /**
         * Creates a new LevelDescriptionInclusionCategory frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelDescriptionInclusionCategory frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LevelDescriptionInclusionCategory type.
         */
        static typeInfo: VUShared.TypeInformation;

        category: string;
        mode: string[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LevelDescriptionInclusionCategory;

    }

    class LevelReportingAsset extends FB.Asset {

        /**
         * Creates a new LevelReportingAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelReportingAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to LevelReportingAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LevelReportingAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelReportingAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        builtLevels: FB.LevelDescriptionAsset[];

    }

    class LevelSaveData extends VUShared.DataContainer {

        /**
         * Creates a new LevelSaveData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelSaveData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to LevelSaveData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LevelSaveData type.
         */
        static typeInfo: VUShared.TypeInformation;

        saveSize: number;
        saveNames: string[];

    }

    class LevelSetup {

        /**
         * Creates a new LevelSetup frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelSetup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LevelSetup type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        inclusionOptions: FB.LevelSetupOption[];
        difficultyIndex: number;
        subLevelNames: string[];
        subLevelStates: number[];
        isSaveGame: boolean;
        forceReloadResources: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LevelSetup;

    }

    class LevelSetupOption {

        /**
         * Creates a new LevelSetupOption frostbite instance.
         */
        constructor();
        /**
         * Creates a new LevelSetupOption frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LevelSetupOption type.
         */
        static typeInfo: VUShared.TypeInformation;

        criterion: string;
        value: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LevelSetupOption;

    }

    class LfoNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LfoNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LfoNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LfoNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LfoNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LfoNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        hz: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        min: number;
        max: number;
        startAtRandomValue: boolean;

    }

    class LicenseConfiguration extends FB.Asset {

        /**
         * Creates a new LicenseConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new LicenseConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to LicenseConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LicenseConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LicenseConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        licenses: FB.LicenseInfo[];

    }

    class LicenseInfo {

        /**
         * Creates a new LicenseInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new LicenseInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LicenseInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        stagingPlatform: FB.GamePlatform;
        allowStaging: boolean;
        clientOnly: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LicenseInfo;

    }

    class LifeCounterEntityData extends FB.GameEntityData {

        /**
         * Creates a new LifeCounterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LifeCounterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to LifeCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to LifeCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LifeCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LifeCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LifeCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LifeCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LifeCounterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        startingLifeCount: number;
        displayTime: number;
        teamId: FB.TeamId;
        lifeTresholdValues: number[];
        uiShowCountLowerThreshold: number;
        uiShowCountUpperThreshold: number;
        baseCount: number;
        reinforceTable: number[];
        reinforceThreshold: number;
        reinforceMessageSid: string;
        fightHarderTreshold: number;
        defensiveKillRadius: number;
        fallbackTime: number;
        fightHarderMessageSid: string;
        attacker: boolean;
        setBestSquadSpawner: boolean;
        simpleReinforce: boolean;

    }

    class LightComponentData extends FB.ComponentData {

        /**
         * Creates a new LightComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LightComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to LightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to LightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LightComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        light: FB.LocalLightEntityData | undefined;

    }

    class LightProbeVolumeData extends FB.SpatialEntityData {

        /**
         * Creates a new LightProbeVolumeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LightProbeVolumeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to LightProbeVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LightProbeVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LightProbeVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LightProbeVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LightProbeVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LightProbeVolumeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        xres: number;
        yres: number;
        zres: number;
        blendDistance: number;
        priority: number;

    }

    export enum LimiterChannelMode {
        LimiterChannelMode_Independent = 0,
        LimiterChannelMode_Grouped = 1,
    }
    class LimiterNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LimiterNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LimiterNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LimiterNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LimiterNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LimiterNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        threshold: FB.AudioGraphNodePort;
        releaseTime: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        channelMode: FB.LimiterChannelMode;
        plugin: FB.SoundGraphPluginRef;

    }

    class LinearMovingBodyData extends FB.MovingBodyData {

        /**
         * Creates a new LinearMovingBodyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LinearMovingBodyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MovingBodyData to LinearMovingBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovingBodyData);
        /**
         * Casts an instance of type DataContainer to LinearMovingBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LinearMovingBodyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        axis: VUShared.Vec3;
        start: FB.EndPointData;
        endValue: FB.EndPointData;

    }

    class LinearTransformNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LinearTransformNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LinearTransformNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LinearTransformNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LinearTransformNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LinearTransformNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: FB.AudioGraphNodePort;
        k: FB.AudioGraphNodePort;
        m: FB.AudioGraphNodePort;
        y: FB.AudioGraphNodePort;

    }

    class LinearTransformRecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new LinearTransformRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LinearTransformRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to LinearTransformRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to LinearTransformRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LinearTransformRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.LinearTransform[];

    }

    class LinkConnection {

        /**
         * Creates a new LinkConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new LinkConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LinkConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: VUShared.DataContainer | undefined;
        target: VUShared.DataContainer | undefined;
        sourceFieldId: number;
        targetFieldId: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LinkConnection;

    }

    class LocalForceData extends FB.ProcessorData {

        /**
         * Creates a new LocalForceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LocalForceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to LocalForceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to LocalForceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to LocalForceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LocalForceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        localForce: VUShared.Vec3;

    }

    class LocalizationAsset extends FB.Asset {

        /**
         * Creates a new LocalizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new LocalizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to LocalizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LocalizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LocalizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        localizedTexts: FB.UITextDatabase[];

    }

    class LocalLightEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new LocalLightEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LocalLightEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to LocalLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LocalLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LocalLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LocalLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LocalLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LocalLightEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        color: VUShared.Vec3;
        particleColorScale: VUShared.Vec3;
        enlightenColorScale: VUShared.Vec3;
        radius: number;
        intensity: number;
        attenuationOffset: number;
        enlightenColorMode: FB.EnlightenColorMode;
        enlightenEnable: boolean;
        visible: boolean;
        specularEnable: boolean;

    }

    class LocalServerBackendData extends FB.ServerBackendData {

        /**
         * Creates a new LocalServerBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LocalServerBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ServerBackendData to LocalServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ServerBackendData);
        /**
         * Casts an instance of type Asset to LocalServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LocalServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LocalServerBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LocatorComponentData extends FB.ComponentData {

        /**
         * Creates a new LocatorComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LocatorComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to LocatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to LocatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LocatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LocatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LocatorComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class LocatorEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new LocatorEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LocatorEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to LocatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LocatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LocatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LocatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LocatorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LocatorEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    class LockedSettingConfig {

        /**
         * Creates a new LockedSettingConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new LockedSettingConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LockedSettingConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        key: string;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LockedSettingConfig;

    }

    class LockingControllerData extends VUShared.DataContainer {

        /**
         * Creates a new LockingControllerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LockingControllerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to LockingControllerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LockingControllerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        zoomLevelLock: FB.ZoomLevelLockData[];
        lockTime: number;
        releaseTime: number;
        releaseOnNewTargetTime: number;
        sampleRate: number;
        holdStillThreshold: number;
        rayLength: number;
        acceptanceAngle: number;
        minimumLockTime: number;
        sensitivity: number;
        angleConstant: number;
        distanceConstant: number;
        lockOnWorldSpacePos: boolean;
        lockOnVisibleTargetsOnly: boolean;
        positionOnly: boolean;
        lockOnEmptyVehicles: boolean;
        ignoreHeigthLockDistance: boolean;

    }

    class LockingScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new LockingScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LockingScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to LockingScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to LockingScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LockingScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        hotVehicleTimeout: number;

    }

    class LockingWeaponData extends FB.WeaponData {

        /**
         * Creates a new LockingWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LockingWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to LockingWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to LockingWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to LockingWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LockingWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lockingController: FB.LockingControllerData | undefined;
        secondaryLockingController: FB.LockingControllerData | undefined;
        warnLock: FB.WarnTarget;
        isHoming: boolean;
        isGuidedWhenZoomed: boolean;
        fireOnlyWhenLockedOn: boolean;
        isGuided: boolean;

    }

    export enum LockType {
        LockAlways = 0,
        LockOnRadar = 1,
        LockOnHeat = 2,
        LockOnLaserPainted = 3,
        LockNever = 4,
        LockTypeCount = 5,
    }
    class LodBinding {

        /**
         * Creates a new LodBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new LodBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LodBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        disableControllerUpdate: FB.AntRef;
        disablePoseUpdate: FB.AntRef;
        distanceFromCamera: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LodBinding;

    }

    export enum LogFileCollisionMode {
        LFCM_Overwrite = 0,
        LFCM_Rotate = 1,
        LFCM_TimeStamp = 2,
    }
    class LoggingEntityData extends FB.EntityData {

        /**
         * Creates a new LoggingEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LoggingEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to LoggingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LoggingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LoggingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LoggingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LoggingEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vec2Value: VUShared.Vec2;
        vec3Value: VUShared.Vec3;
        transformValue: VUShared.LinearTransform;
        realm: FB.Realm;
        floatValue: number;
        strings: string[];
        intValue: number;
        boolValue: boolean;

    }

    class LogicalExpressionEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new LogicalExpressionEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new LogicalExpressionEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to LogicalExpressionEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to LogicalExpressionEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LogicalExpressionEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        trigger: FB.AudioGraphNodePort;

    }

    class LogicalExpressionNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LogicalExpressionNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LogicalExpressionNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LogicalExpressionNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LogicalExpressionNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LogicalExpressionNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputs: FB.LogicalExpressionEntry[];
        trigger: FB.AudioGraphNodePort;
        operator: FB.LogicalExpressionOperator;

    }

    export enum LogicalExpressionOperator {
        LogicalExpressionOperator_And = 0,
        LogicalExpressionOperator_Or = 1,
        LogicalExpressionOperator_Nand = 2,
        LogicalExpressionOperator_Nor = 3,
    }
    class LogicPrefabBlueprint extends FB.PrefabBlueprint {

        /**
         * Creates a new LogicPrefabBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new LogicPrefabBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PrefabBlueprint to LogicPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PrefabBlueprint);
        /**
         * Casts an instance of type Blueprint to LogicPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to LogicPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to LogicPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to LogicPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to LogicPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LogicPrefabBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LogicReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new LogicReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LogicReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to LogicReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to LogicReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LogicReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LogicReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LogicReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        subRealm: FB.SubRealm;

    }

    class LogicVisualEnvironmentEntityData extends FB.EntityData {

        /**
         * Creates a new LogicVisualEnvironmentEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LogicVisualEnvironmentEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to LogicVisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LogicVisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LogicVisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LogicVisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LogicVisualEnvironmentEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        visualEnvironment: FB.VisualEnvironmentBlueprint | undefined;
        visibility: number;

    }

    class LookAtCameraEntityData extends FB.CameraEntityData {

        /**
         * Creates a new LookAtCameraEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LookAtCameraEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CameraEntityData to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraEntityData);
        /**
         * Casts an instance of type CameraEntityBaseData to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraEntityBaseData);
        /**
         * Casts an instance of type SpatialEntityData to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LookAtCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LookAtCameraEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class LookAtEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new LookAtEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LookAtEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to LookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LookAtEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        runOnce: boolean;
        useStaticDirection: boolean;
        enabled: boolean;

    }

    class LookAtTriggerEntityData extends FB.TriggerEventEntityData {

        /**
         * Creates a new LookAtTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LookAtTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEventEntityData to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEventEntityData);
        /**
         * Casts an instance of type TriggerEntityData to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to LookAtTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LookAtTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fov: number;
        weapon: FB.SoldierWeaponBlueprint | undefined;
        zoomLevel: number;
        minDistanceToObject: number;
        maxDistanceToObject: number;
        startTriggerLookingAt: boolean;
        checkOcclusion: boolean;

    }

    class LookConstraintsData {

        /**
         * Creates a new LookConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LookConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the LookConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minLookYaw: number;
        maxLookYaw: number;
        minLookPitch: number;
        maxLookPitch: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.LookConstraintsData;

    }

    export enum LoopType {
        LtNone = 0,
        LtForward = 1,
        LtRelease = 2,
        LtInstantRelease = 3,
    }
    class LoosePartPhysicsData extends VUShared.DataContainer {

        /**
         * Creates a new LoosePartPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LoosePartPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to LoosePartPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LoosePartPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fakePhysics: FB.FakePhysicsData | undefined;

    }

    class LowPassButterworthNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LowPassButterworthNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LowPassButterworthNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LowPassButterworthNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LowPassButterworthNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LowPassButterworthNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        order: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class LowPassFir64NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LowPassFir64NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LowPassFir64NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LowPassFir64NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LowPassFir64NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LowPassFir64NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class LowPassIir2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LowPassIir2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LowPassIir2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LowPassIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LowPassIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LowPassIir2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class LowShelfIir2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new LowShelfIir2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new LowShelfIir2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to LowShelfIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to LowShelfIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the LowShelfIir2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class ManualDataAsset extends FB.Asset {

        /**
         * Creates a new ManualDataAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new ManualDataAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ManualDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ManualDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ManualDataAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.ManualDataEntry[];

    }

    class ManualDataEntry {

        /**
         * Creates a new ManualDataEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new ManualDataEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ManualDataEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        platform: FB.GamePlatform;
        language: FB.LanguageFormat;
        textures: FB.TextureAsset[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ManualDataEntry;

    }

    export enum MapMarkerColorType {
        MMCTRed = 0,
        MMCTBlue = 1,
        MMCTGreen = 2,
    }
    class MapMarkerEntityData extends FB.GameEntityData {

        /**
         * Creates a new MapMarkerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MapMarkerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to MapMarkerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MapMarkerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MapMarkerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MapMarkerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MapMarkerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MapMarkerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MapMarkerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseTransform: VUShared.Vec3;
        progressMinTime: number;
        sid: string;
        nrOfPassengers: number;
        nrOfEntries: number;
        progressTime1Player: number;
        showRadius: number;
        hideRadius: number;
        blinkTime: number;
        markerType: FB.MapMarkerType;
        visibleForTeam: FB.TeamId;
        ownerTeam: FB.TeamId;
        hudIcon: FB.UIHudIcon;
        verticalOffset: number;
        focusPointRadius: number;
        instantFlagReturnRadius: number;
        progress: number;
        progressPlayerSpeedUpPercentage: number;
        trackedPlayersInRange: number;
        trackingPlayerRange: number;
        progressTime: number;
        onlyShowSnapped: boolean;
        flagControlMarker: boolean;
        showProgress: boolean;
        useMarkerTransform: boolean;
        isVisible: boolean;
        snap: boolean;
        showAirTargetBox: boolean;
        isFocusPoint: boolean;

    }

    export enum MapMarkerType {
        MMTMissionObjective = 0,
        MMTSecondaryMissionObjective = 1,
        MMTSoldier = 2,
        MMTVehicle = 3,
        MMTAmmoCrate = 4,
        MMTGeneric = 5,
        MMTFlag = 6,
    }
    class MapRotataionLookup {

        /**
         * Creates a new MapRotataionLookup frostbite instance.
         */
        constructor();
        /**
         * Creates a new MapRotataionLookup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MapRotataionLookup type.
         */
        static typeInfo: VUShared.TypeInformation;

        gameMode: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MapRotataionLookup;

    }

    class MapRotationConfig {

        /**
         * Creates a new MapRotationConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new MapRotationConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MapRotationConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        mapRotationId: number;
        nameSid: string;
        descSid: string;
        mod: string;
        gameMode: string;
        randomizeStartingMap: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MapRotationConfig;

    }

    class MaskVolumeEntityData extends FB.RenderVolumeEntityData {

        /**
         * Creates a new MaskVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaskVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RenderVolumeEntityData to MaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RenderVolumeEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MaskVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaskVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class MasterSkeletonAsset extends FB.Asset {

        /**
         * Creates a new MasterSkeletonAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MasterSkeletonAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MasterSkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MasterSkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MasterSkeletonAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        masterSkeleton: FB.SkeletonAsset | undefined;
        subSkeletons: FB.SubSkeleton[];

    }

    class MasterUnitNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MasterUnitNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MasterUnitNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MasterUnitNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MasterUnitNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MasterUnitNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        settingsIndex: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        masterGain: FB.AudioGraphNodePort;
        masterLfeGain: FB.AudioGraphNodePort;
        masterDialogGain: FB.AudioGraphNodePort;
        mainMixGain: FB.AudioGraphNodePort;
        postEffectsGain: FB.AudioGraphNodePort;
        reverbGain: FB.AudioGraphNodePort;
        fadeTime: FB.AudioGraphNodePort;
        highPassFreq: FB.AudioGraphNodePort;
        lowShelfFreq: FB.AudioGraphNodePort;
        lowShelfGain: FB.AudioGraphNodePort;
        highShelfFreq: FB.AudioGraphNodePort;
        highShelfGain: FB.AudioGraphNodePort;
        compThreshold: FB.AudioGraphNodePort;
        compRatio: FB.AudioGraphNodePort;
        compAttack: FB.AudioGraphNodePort;
        compRelease: FB.AudioGraphNodePort;
        distClipLevel: FB.AudioGraphNodePort;
        parallelDistortionGain: FB.AudioGraphNodePort;
        settings: FB.MasterUnitSettings[];

    }

    class MasterUnitSettings extends VUShared.DataContainer {

        /**
         * Creates a new MasterUnitSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MasterUnitSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MasterUnitSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MasterUnitSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        equalizer: FB.EqualizerSettings | undefined;
        compressor: FB.CompressorSettings | undefined;
        masterVolume: number;
        masterLfeGain: number;
        masterDialogGain: number;
        reverbVolume: number;
        mainMixVolume: number;
        distortionClipLevel: number;
        parallelDistortionGain: number;
        postEffectsGain: number;
        fadeTime: number;

    }

    class MatchmakingCreateGameParameters {

        /**
         * Creates a new MatchmakingCreateGameParameters frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingCreateGameParameters frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingCreateGameParameters type.
         */
        static typeInfo: VUShared.TypeInformation;

        gameTopology: FB.MatchmakingNetworkTopology;
        peerMode: FB.MatchmakingPeer2PeerMode;
        voipTopology: FB.MatchmakingNetworkTopology;
        settings: FB.MatchmakingGameSettings;
        attributes: FB.MatchmakingGameAttribute[];
        queueCapacity: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingCreateGameParameters;

    }

    class MatchmakingCriteria {

        /**
         * Creates a new MatchmakingCriteria frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingCriteria frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingCriteria type.
         */
        static typeInfo: VUShared.TypeInformation;

        sizeRule: FB.MatchmakingSizeRule;
        pingSiteRule: FB.MatchmakingPingSiteRule;
        rankedRule: FB.MatchmakingRankedRule;
        genericRules: FB.MatchmakingGenericRule[];
        virtualizedRule: FB.MatchmakingVirtualizedRule;
        uedRules: FB.MatchmakingUserExtendedDataRule[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingCriteria;

    }

    class MatchmakingGameAttribute {

        /**
         * Creates a new MatchmakingGameAttribute frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingGameAttribute frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingGameAttribute type.
         */
        static typeInfo: VUShared.TypeInformation;

        attribute: string;
        value: string;
        override: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingGameAttribute;

    }

    class MatchmakingGameSettings {

        /**
         * Creates a new MatchmakingGameSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingGameSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingGameSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        openToBrowsing: boolean;
        openToInvites: boolean;
        openToMatchmaking: boolean;
        openToJoinByPlayer: boolean;
        hostMigratable: boolean;
        ranked: boolean;
        adminOnlyInvites: boolean;
        enforceSingleGroupJoin: boolean;
        joinInProgressSupported: boolean;
        adminInvitesOnlyIgnoreEntryChecks: boolean;
        enablePersistedGameId: boolean;
        allowSameTeamId: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingGameSettings;

    }

    class MatchmakingGenericRule {

        /**
         * Creates a new MatchmakingGenericRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingGenericRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingGenericRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        rule: string;
        minFitThresHold: string;
        setting: string;
        desiredValues: FB.MatchmakingRuleString[];
        ignoreIfDefault: boolean;
        mergeValues: boolean;
        sortValues: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingGenericRule;

    }

    class MatchmakingModifier extends VUShared.DataContainer {

        /**
         * Creates a new MatchmakingModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MatchmakingModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MatchmakingModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum MatchmakingNetworkTopology {
        MatchmakingNetworkTopology_Disabled = 0,
        MatchmakingNetworkTopology_Peer2Peer = 1,
        MatchmakingNetworkTopology_PeerHosted = 2,
        MatchmakingNetworkTopology_DedicatedServer = 3,
    }
    export enum MatchmakingPeer2PeerMode {
        MatchmakingPeer2PeerMode_FullMesh = 0,
        MatchmakingPeer2PeerMode_PartialMesh = 1,
        MatchmakingPeer2PeerMode_DirtyCastFailover = 2,
    }
    class MatchmakingPingSiteRule {

        /**
         * Creates a new MatchmakingPingSiteRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingPingSiteRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingPingSiteRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        minFitThreshold: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingPingSiteRule;

    }

    export enum MatchmakingPlatform {
        MatchmakingPlatform_PC = 0,
        MatchmakingPlatform_Console = 1,
        MatchmakingPlatform_360 = 2,
        MatchmakingPlatform_PS3 = 3,
        MatchmakingPlatform_Any = 4,
    }
    class MatchmakingPlayerCapacityModifier extends FB.MatchmakingModifier {

        /**
         * Creates a new MatchmakingPlayerCapacityModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingPlayerCapacityModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MatchmakingModifier to MatchmakingPlayerCapacityModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MatchmakingModifier);
        /**
         * Casts an instance of type DataContainer to MatchmakingPlayerCapacityModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MatchmakingPlayerCapacityModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        attribute: string;

    }

    export enum MatchmakingRankedMode {
        MatchmakingRankedMode_Ranked = 0,
        MatchmakingRankedMode_Unranked = 1,
        MatchmakingRankedMode_Any = 2,
    }
    class MatchmakingRankedRule {

        /**
         * Creates a new MatchmakingRankedRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingRankedRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingRankedRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        minFitThreshold: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingRankedRule;

    }

    class MatchmakingRuleString {

        /**
         * Creates a new MatchmakingRuleString frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingRuleString frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingRuleString type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: string;
        platform: FB.MatchmakingPlatform;
        licenses: string[];
        useOnlyIfEmpty: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingRuleString;

    }

    class MatchmakingSession extends VUShared.DataContainer {

        /**
         * Creates a new MatchmakingSession frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingSession frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MatchmakingSession. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MatchmakingSession type.
         */
        static typeInfo: VUShared.TypeInformation;

        mode: FB.MatchmakingSessionMode;
        durationMs: number;
        criteria: FB.MatchmakingCriteria;
        createGameParams: FB.MatchmakingCreateGameParameters;
        onNotFound: FB.MatchmakingSession | undefined;
        modifiers: FB.MatchmakingModifier[];

    }

    export enum MatchmakingSessionMode {
        MatchmakingSessionMode_FindDedicatedServer = 0,
        MatchmakingSessionMode_ResetDedicatedServer = 1,
        MatchmakingSessionMode_FindPeerGame = 2,
        MatchmakingSessionMode_CreatePeerGame = 3,
        MatchmakingSessionMode_Invalid = 4,
    }
    class MatchmakingSizeConfiguration {

        /**
         * Creates a new MatchmakingSizeConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingSizeConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingSizeConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        platform: FB.MatchmakingPlatform;
        settings: string[];
        desiredPlayerCount: number;
        minPlayerCount: number;
        maxPlayerCapacity: number;
        minFitThreshold: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingSizeConfiguration;

    }

    class MatchmakingSizeRule {

        /**
         * Creates a new MatchmakingSizeRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingSizeRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingSizeRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        setting: string;
        configurations: FB.MatchmakingSizeConfiguration[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingSizeRule;

    }

    class MatchmakingUserExtendedDataRule {

        /**
         * Creates a new MatchmakingUserExtendedDataRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingUserExtendedDataRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingUserExtendedDataRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        rule: string;
        minFitThresHold: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingUserExtendedDataRule;

    }

    export enum MatchmakingVirtualizationMode {
        MatchmakingVirtualizationMode_Virtualized = 0,
        MatchmakingVirtualizationMode_Standard = 1,
        MatchmakingVirtualizationMode_Any = 2,
    }
    class MatchmakingVirtualizedRule {

        /**
         * Creates a new MatchmakingVirtualizedRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatchmakingVirtualizedRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MatchmakingVirtualizedRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        minFitThreshold: string;
        virtualizationMode: FB.MatchmakingVirtualizationMode;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MatchmakingVirtualizedRule;

    }

    class MaterialContainerAsset extends FB.Asset {

        /**
         * Creates a new MaterialContainerAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialContainerAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MaterialContainerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MaterialContainerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialContainerAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        materialPairs: FB.MaterialContainerPair[];
        materialNames: string[];

    }

    class MaterialContainerPair extends VUShared.DataContainer {

        /**
         * Creates a new MaterialContainerPair frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialContainerPair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MaterialContainerPair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialContainerPair type.
         */
        static typeInfo: VUShared.TypeInformation;

        flagsAndIndex: number;
        physicsPropertyIndex: number;
        physicsMaterialIndex: number;

    }

    class MaterialGridData extends FB.Asset {

        /**
         * Creates a new MaterialGridData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialGridData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MaterialGridData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MaterialGridData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialGridData type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultMaterial: FB.MaterialContainerPair | undefined;
        materialPairs: FB.MaterialContainerPair[];
        materialIndexMap: number[];
        defaultMaterialIndex: number;
        materialProperties: FB.MaterialRelationPropertyPair[];
        interactionGrid: FB.MaterialInteractionGridRow[];

    }

    class MaterialInteractionGridRow {

        /**
         * Creates a new MaterialInteractionGridRow frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialInteractionGridRow frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MaterialInteractionGridRow type.
         */
        static typeInfo: VUShared.TypeInformation;

        items: FB.MaterialRelationPropertyPair[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MaterialInteractionGridRow;

    }

    class MaterialPropertyEffectData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialPropertyEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialPropertyEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialPropertyEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialPropertyEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialPropertyEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialPropertyEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impactEffects: FB.EffectBlueprint[];

    }

    class MaterialPropertyHealthData extends FB.PhysicsPropertyRelationPropertyData {

        /**
         * Creates a new MaterialPropertyHealthData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialPropertyHealthData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsPropertyRelationPropertyData to MaterialPropertyHealthData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsPropertyRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialPropertyHealthData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialPropertyHealthData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialPropertyHealthData type.
         */
        static typeInfo: VUShared.TypeInformation;

        health: number;

    }

    class MaterialPropertyImpulseData extends FB.PhysicsPropertyRelationPropertyData {

        /**
         * Creates a new MaterialPropertyImpulseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialPropertyImpulseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsPropertyRelationPropertyData to MaterialPropertyImpulseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsPropertyRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialPropertyImpulseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialPropertyImpulseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialPropertyImpulseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impulseAbsorptionMultiplier: number;

    }

    class MaterialPropertyPhysicsData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialPropertyPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialPropertyPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialPropertyPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialPropertyPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialPropertyPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialPropertyPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dynamicFrictionModifier: number;
        staticFrictionModifier: number;
        restitutionModifier: number;
        resistance: number;

    }

    class MaterialPropertySoundData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialPropertySoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialPropertySoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialPropertySoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialPropertySoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialPropertySoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialPropertySoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impactSound: FB.SoundAsset | undefined;
        scrapeSound: FB.SoundAsset | undefined;
        scrapeLength: number;
        soldierSettings: FB.MaterialSoldierSoundSettings | undefined;
        softness: number;
        materialSoundId: number;

    }

    class MaterialPropertyTerrainData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialPropertyTerrainData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialPropertyTerrainData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialPropertyTerrainData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialPropertyTerrainData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialPropertyTerrainData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialPropertyTerrainData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dirtTriggerColor: VUShared.Vec3;
        destructionEffect: FB.EffectBlueprint | undefined;
        dirtTriggerFactor: number;

    }

    class MaterialRelationDamageData extends FB.PhysicsPropertyRelationPropertyData {

        /**
         * Creates a new MaterialRelationDamageData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationDamageData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsPropertyRelationPropertyData to MaterialRelationDamageData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsPropertyRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationDamageData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationDamageData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationDamageData type.
         */
        static typeInfo: VUShared.TypeInformation;

        collisionDamageMultiplier: number;
        collisionDamageThreshold: number;
        damageProtectionMultiplier: number;
        damagePenetrationMultiplier: number;
        damageProtectionThreshold: number;
        explosionCoverDamageModifier: number;
        inflictsDemolitionDamage: boolean;

    }

    class MaterialRelationDecalData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialRelationDecalData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationDecalData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialRelationDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationDecalData type.
         */
        static typeInfo: VUShared.TypeInformation;

        decal: FB.DecalTemplateData | undefined;

    }

    class MaterialRelationEffectData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialRelationEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialRelationEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impactEffects: FB.EffectBlueprint[];
        impactDebris: FB.ObjectBlueprint[];
        impactEffectMaxSpreadAngle: number;
        mirrorImpactDirection: boolean;

    }

    class MaterialRelationPenetrationData extends FB.PhysicsPropertyRelationPropertyData {

        /**
         * Creates a new MaterialRelationPenetrationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationPenetrationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsPropertyRelationPropertyData to MaterialRelationPenetrationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsPropertyRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationPenetrationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationPenetrationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationPenetrationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        neverPenetrate: boolean;

    }

    class MaterialRelationPropertyData extends VUShared.DataContainer {

        /**
         * Creates a new MaterialRelationPropertyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationPropertyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MaterialRelationPropertyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationPropertyData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class MaterialRelationPropertyPair {

        /**
         * Creates a new MaterialRelationPropertyPair frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationPropertyPair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MaterialRelationPropertyPair type.
         */
        static typeInfo: VUShared.TypeInformation;

        physicsMaterialProperties: FB.PhysicsMaterialRelationPropertyData[];
        physicsPropertyProperties: FB.PhysicsPropertyRelationPropertyData[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MaterialRelationPropertyPair;

    }

    class MaterialRelationSoundData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialRelationSoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationSoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialRelationSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationSoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impactSound: FB.SoundAsset | undefined;
        scrapeSound: FB.SoundAsset | undefined;
        scrapeLength: number;

    }

    class MaterialRelationTerrainDestructionData extends FB.PhysicsPropertyRelationPropertyData {

        /**
         * Creates a new MaterialRelationTerrainDestructionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationTerrainDestructionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsPropertyRelationPropertyData to MaterialRelationTerrainDestructionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsPropertyRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationTerrainDestructionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationTerrainDestructionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationTerrainDestructionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        width: number;
        depth: number;

    }

    class MaterialRelationVehicleData extends FB.PhysicsMaterialRelationPropertyData {

        /**
         * Creates a new MaterialRelationVehicleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialRelationVehicleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsMaterialRelationPropertyData to MaterialRelationVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsMaterialRelationPropertyData);
        /**
         * Casts an instance of type MaterialRelationPropertyData to MaterialRelationVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to MaterialRelationVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialRelationVehicleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        chassiEffect: FB.EffectBlueprint | undefined;
        trackEffect: FB.EffectBlueprint | undefined;
        wheelEffect: FB.EffectBlueprint | undefined;
        groundEffect: FB.EffectBlueprint | undefined;

    }

    class MaterialSoldierSoundSettings extends VUShared.DataContainer {

        /**
         * Creates a new MaterialSoldierSoundSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaterialSoldierSoundSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MaterialSoldierSoundSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaterialSoldierSoundSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        footStepSound: FB.SoundAsset | undefined;
        proneSound: FB.SoundAsset | undefined;
        landSound: FB.SoundAsset | undefined;

    }

    export enum MathOp {
        MathOp_Add = 0,
        MathOp_Subtract = 1,
        MathOp_Multiply = 2,
        MathOp_Divide = 3,
        MathOp_Min = 4,
        MathOp_Max = 5,
    }
    class MathOpEntityData extends FB.EntityData {

        /**
         * Creates a new MathOpEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MathOpEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MathOpEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        operators: FB.MathOp[];

    }

    class MatrixPannerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MatrixPannerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MatrixPannerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MatrixPannerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MatrixPannerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MatrixPannerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frontLeft: FB.AudioGraphNodePort;
        center: FB.AudioGraphNodePort;
        frontRight: FB.AudioGraphNodePort;
        rearLeft: FB.AudioGraphNodePort;
        lfe: FB.AudioGraphNodePort;
        rearRight: FB.AudioGraphNodePort;
        farRearLeft: FB.AudioGraphNodePort;
        farRearRight: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;

    }

    class MaxInstancesScopeStrategyData extends FB.SoundScopeStrategyData {

        /**
         * Creates a new MaxInstancesScopeStrategyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MaxInstancesScopeStrategyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundScopeStrategyData to MaxInstancesScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundScopeStrategyData);
        /**
         * Casts an instance of type DataContainer to MaxInstancesScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MaxInstancesScopeStrategyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        count: number;
        keepOldest: boolean;

    }

    class MedicBagEntityData extends FB.ExplosionPackEntityData {

        /**
         * Creates a new MedicBagEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MedicBagEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ExplosionPackEntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ExplosionPackEntityData);
        /**
         * Casts an instance of type MeshProjectileEntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MedicBagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MedicBagEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healer: FB.HealerData;

    }

    class MedicBagHealingSphereEntityData extends FB.ExplosionPackEntityData {

        /**
         * Creates a new MedicBagHealingSphereEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MedicBagHealingSphereEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ExplosionPackEntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ExplosionPackEntityData);
        /**
         * Casts an instance of type MeshProjectileEntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MedicBagHealingSphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MedicBagHealingSphereEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healer: FB.HealingSphereData;

    }

    class MedicBagHealingSphereWeaponData extends FB.WeaponData {

        /**
         * Creates a new MedicBagHealingSphereWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MedicBagHealingSphereWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to MedicBagHealingSphereWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to MedicBagHealingSphereWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to MedicBagHealingSphereWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MedicBagHealingSphereWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healer: FB.HealingSphereData;
        healthPointsRefillSpeed: number;
        healthPointsPerBag: number;

    }

    class MedicBagWeaponData extends FB.WeaponData {

        /**
         * Creates a new MedicBagWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MedicBagWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to MedicBagWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to MedicBagWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to MedicBagWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MedicBagWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healer: FB.HealerData;
        healthPointsRefillSpeed: number;
        healthPointsPerBag: number;

    }

    class MedkitWeaponData extends FB.WeaponData {

        /**
         * Creates a new MedkitWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MedkitWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to MedkitWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to MedkitWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to MedkitWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MedkitWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class MeleeEntityCommonData extends FB.Asset {

        /**
         * Creates a new MeleeEntityCommonData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeleeEntityCommonData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MeleeEntityCommonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MeleeEntityCommonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeleeEntityCommonData type.
         */
        static typeInfo: VUShared.TypeInformation;

        meleeBinding: FB.CharacterMeleeBinding;
        meleeCommonBinding: FB.CharacterMeleeCommonBinding;
        triggerDelay: number;
        defendWindow: number;
        killDelay: number;
        meleeEndDelay: number;
        invalidMeleeAttackZone: number;
        meleeAttackDistance: number;
        maxAttackHeightDifference: number;
        killDamage: number;
        proneAttackType: FB.AntEnumeration | undefined;
        crouchAttackType: FB.AntEnumeration | undefined;
        enableAbortPossibility: boolean;

    }

    class MeleeEntityData extends FB.EntityData {

        /**
         * Creates a new MeleeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeleeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to MeleeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MeleeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MeleeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MeleeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeleeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        commonData: FB.MeleeEntityCommonData | undefined;

    }

    class MeleeTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new MeleeTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeleeTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to MeleeTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MeleeTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MeleeTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MeleeTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeleeTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        connectTransform: VUShared.LinearTransform;
        meleeType: FB.AntEnumeration | undefined;
        meleeEnabled: boolean;

    }

    class MeleeWeaponData extends FB.WeaponData {

        /**
         * Creates a new MeleeWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeleeWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to MeleeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to MeleeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to MeleeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeleeWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        useCannedAnimation: boolean;
        useSphereDamage: boolean;

    }

    class MemoryLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new MemoryLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new MemoryLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to MemoryLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to MemoryLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MemoryLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        texturePoolSize: number;
        texturePoolSizeXenon: number;
        texturePoolSizePs3: number;
        meshPoolSizePs3: number;
        meshPoolSizePs3Cell: number;
        meshPoolSizeXenon: number;

    }

    class MenuConfigAsset extends FB.Asset {

        /**
         * Creates a new MenuConfigAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MenuConfigAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MenuConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MenuConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MenuConfigAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class MenuIdAsset extends FB.Asset {

        /**
         * Creates a new MenuIdAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MenuIdAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MenuIdAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MenuIdAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MenuIdAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        shortName: string;

    }

    export enum MenuResponse {
        ResponseOk = 0,
        ResponseCancel = 1,
        ResponseSquare = 2,
        ResponseCount = 3,
    }
    class MeshAsset extends FB.Asset {

        /**
         * Creates a new MeshAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        lodGroup: FB.MeshLodGroup | undefined;
        lodScale: number;
        cullScale: number;
        nameHash: number;
        enlightenType: FB.EnlightenType;
        materials: FB.MeshMaterial[];
        occluderHighPriority: boolean;
        streamingEnable: boolean;
        destructionMaterialEnable: boolean;
        occluderMeshEnable: boolean;

    }

    class MeshComponentData extends FB.ComponentData {

        /**
         * Creates a new MeshComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to MeshComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to MeshComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MeshComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MeshComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        boneFakePhysics: FB.BoneFakePhysicsData[];
        mesh: FB.MeshAsset | undefined;
        skeleton: FB.SkeletonAsset | undefined;

    }

    export enum MeshHandleFlags {
        InvalidMeshHandle = 0,
    }
    export enum MeshLimits {
        MaxMeshLodCount = 5,
    }
    class MeshLodGroup extends FB.Asset {

        /**
         * Creates a new MeshLodGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshLodGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MeshLodGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MeshLodGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshLodGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        lod1Distance: number;
        lod2Distance: number;
        lod3Distance: number;
        lod4Distance: number;
        lod5Distance: number;
        shadowDistance: number;
        cullScreenArea: number;

    }

    class MeshMaterial extends VUShared.DataContainer {

        /**
         * Creates a new MeshMaterial frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshMaterial frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MeshMaterial. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshMaterial type.
         */
        static typeInfo: VUShared.TypeInformation;

        shaderInstance: FB.SurfaceShaderInstanceData | undefined;
        shader: FB.SurfaceShaderInstanceDataStruct;

    }

    class MeshMaterialVariation extends VUShared.DataContainer {

        /**
         * Creates a new MeshMaterialVariation frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshMaterialVariation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MeshMaterialVariation. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshMaterialVariation type.
         */
        static typeInfo: VUShared.TypeInformation;

        shader: FB.SurfaceShaderInstanceDataStruct;

    }

    class MeshMergingSettings extends VUShared.DataContainer {

        /**
         * Creates a new MeshMergingSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshMergingSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MeshMergingSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshMergingSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        statsSeedIndex: number;
        statsLodIndex: number;
        textureAtlasWidth: number;
        drawStatsEnable: boolean;
        drawDebugTexturesEnable: boolean;
        virtualTextureArrayStreamingEnable: boolean;
        enable: boolean;
        textureAtlasMergeEnable: boolean;
        clearMergeReport: boolean;

    }

    class MeshProjectileEntityData extends FB.ProjectileEntityData {

        /**
         * Creates a new MeshProjectileEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshProjectileEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProjectileEntityData to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MeshProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshProjectileEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialAngularVelocity: VUShared.Vec3;
        trailEffect: FB.EffectBlueprint | undefined;
        mesh: FB.MeshAsset | undefined;
        maxAttachableInclination: number;
        extraDamping: boolean;
        isAttachable: boolean;

    }

    class MeshProxyEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new MeshProxyEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshProxyEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to MeshProxyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MeshProxyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MeshProxyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MeshProxyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MeshProxyEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshProxyEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mesh: FB.MeshAsset | undefined;
        basePoseTransforms: VUShared.LinearTransform[];

    }

    export enum MeshScatteringElevationMode {
        MeshScatteringElevationMode_SnapBoundingBox = 0,
        MeshScatteringElevationMode_SnapPivotPoint = 1,
    }
    export enum MeshScatteringInstanceDataMode {
        MeshScatteringInstanceDataMode_None = 0,
        MeshScatteringInstanceDataMode_Normal = 1,
        MeshScatteringInstanceDataMode_NormalAndColor = 2,
    }
    class MeshScatteringMaskScaleDrawMethodData {

        /**
         * Creates a new MeshScatteringMaskScaleDrawMethodData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshScatteringMaskScaleDrawMethodData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MeshScatteringMaskScaleDrawMethodData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MeshScatteringMaskScaleDrawMethodData;

    }

    export enum MeshScatteringOrientationMode {
        MeshScatteringOrientationMode_Horizontal = 0,
        MeshScatteringOrientationMode_LeanToTerrain = 1,
        MeshScatteringOrientationMode_SkewToTerrain = 2,
    }
    export enum MeshScatteringRotationMode {
        MeshScatteringRotationMode_Random = 0,
        MeshScatteringRotationMode_TowardsSlope = 1,
        MeshScatteringRotationMode_Fixed = 2,
    }
    class MeshSettings extends VUShared.DataContainer {

        /**
         * Creates a new MeshSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MeshSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        overrideShadersShaderName: string;
        overrideShadersMeshName: string;
        forceLod: number;
        globalLodScale: number;
        shadowDistanceScale: number;
        loadingEnabled: boolean;

    }

    class MeshStreamingSettings extends VUShared.DataContainer {

        /**
         * Creates a new MeshStreamingSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshStreamingSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MeshStreamingSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshStreamingSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        defragTransferLimit: number;
        listViewPageIndex: number;
        poolSize: number;
        forceLod: number;
        poolHeadroomSize: number;
        listViewSortOrder: number;
        ps3CellDefragTransferLimit: number;
        xenonFinalPoolSizeAdjustment: number;
        maxUnloadCountPerFrame: number;
        xenonRetailPoolSizeAdjustment: number;
        maxPendingLoadCount: number;
        ps3CellPoolSize: number;
        ps3CellPoolHeadroomSize: number;
        instantUnloadingEnable: boolean;
        asyncCreatesEnable: boolean;
        dxImmutableUsageEnable: boolean;
        overridePoolSizes: boolean;
        useSlowTexturePrio: boolean;
        updateEnable: boolean;
        dynamicLoadingEnable: boolean;
        priorityJobEnable: boolean;
        prioritySpuJobEnable: boolean;
        updateJobEnable: boolean;
        defragTransfersEnable: boolean;
        prioritizeVisibleMeshesFirstEnable: boolean;
        prioritizeVisibleLodsFirstEnable: boolean;
        prioritizeVisibleLoadsEnable: boolean;
        prioritizeTexturesEnable: boolean;
        highestPriorityEnable: boolean;
        prioritizeNearestPointEnable: boolean;
        drawInstanceBoxesEnable: boolean;
        drawStatsEnable: boolean;
        drawMissingListEnable: boolean;
        drawPriorityListEnable: boolean;
        drawLoadingListEnable: boolean;
        drawMeshListEnable: boolean;
        drawNonStreamedListEnable: boolean;
        defragEnable: boolean;
        enable: boolean;
        dumpLoadedList: boolean;
        useConditionalStreaming: boolean;

    }

    export enum MeshSubsetCategory {
        MeshSubsetCategory_Opaque = 0,
        MeshSubsetCategory_Transparent = 1,
        MeshSubsetCategory_TransparentDecal = 2,
        MeshSubsetCategory_ZOnly = 3,
        MeshSubsetCategoryCount = 4,
    }
    export enum MeshSubsetCategoryFlags {
        MeshSubsetCategoryFlags_Opaque = 1,
        MeshSubsetCategoryFlags_Transparent = 2,
        MeshSubsetCategoryFlags_TransparentDecal = 4,
        MeshSubsetCategoryFlags_Normal = 7,
        MeshSubsetCategoryFlags_ZOnly = 8,
        MeshSubsetCategoryFlags_DynamicEnvmap = 16,
        MeshSubsetCategoryFlags_PlanarReflection = 32,
        MeshSubsetCategoryFlags_All = 63,
    }
    export enum MeshType {
        MeshType_Rigid = 0,
        MeshType_Skinned = 1,
        MeshType_Composite = 2,
    }
    class MeshVariationDatabase extends FB.Asset {

        /**
         * Creates a new MeshVariationDatabase frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshVariationDatabase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MeshVariationDatabase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MeshVariationDatabase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshVariationDatabase type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MeshVariationDatabaseEntry[];
        redirectEntries: FB.MeshVariationDatabaseEntry[];

    }

    class MeshVariationDatabaseEntry extends VUShared.DataContainer {

        /**
         * Creates a new MeshVariationDatabaseEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshVariationDatabaseEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MeshVariationDatabaseEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MeshVariationDatabaseEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        mesh: FB.MeshAsset | undefined;
        variationAssetNameHash: number;
        materials: FB.MeshVariationDatabaseMaterial[];

    }

    class MeshVariationDatabaseMaterial {

        /**
         * Creates a new MeshVariationDatabaseMaterial frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshVariationDatabaseMaterial frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MeshVariationDatabaseMaterial type.
         */
        static typeInfo: VUShared.TypeInformation;

        material: FB.MeshMaterial | undefined;
        materialVariation: FB.MeshMaterialVariation | undefined;
        textureParameters: FB.TextureShaderParameter[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MeshVariationDatabaseMaterial;

    }

    class MeshVariationInfo {

        /**
         * Creates a new MeshVariationInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new MeshVariationInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MeshVariationInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshAsset: FB.MeshAsset | undefined;
        origMeshAsset: FB.MeshAsset | undefined;
        variationAsset: FB.ObjectVariation | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MeshVariationInfo;

    }

    class MessageEntityData extends FB.EntityData {

        /**
         * Creates a new MessageEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MessageEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to MessageEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MessageEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MessageEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MessageEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MessageEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        messageSid: string;
        additionalMessages: FB.MessageLineData[];
        messageType: FB.UIMessageEntityType;
        displayTime: number;
        entryInputAction: FB.EntryInputActionEnum;
        enabled: boolean;

    }

    class MessageInfo {

        /**
         * Creates a new MessageInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new MessageInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MessageInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        rowTypeName: string;
        messageQueueSize: number;
        normalMessageTime: number;
        shortMessageTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MessageInfo;

    }

    class MessageLineData {

        /**
         * Creates a new MessageLineData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MessageLineData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MessageLineData type.
         */
        static typeInfo: VUShared.TypeInformation;

        messageSid: string;
        entryInputAction: FB.EntryInputActionEnum;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MessageLineData;

    }

    export enum MessageReciever {
        MrAll = 0,
        MrTeam = 1,
        MrTeamAndSquad = 2,
        MrPlayer = 3,
    }
    class MetricAggregate extends FB.MetricEvent {

        /**
         * Creates a new MetricAggregate frostbite instance.
         */
        constructor();
        /**
         * Creates a new MetricAggregate frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to MetricAggregate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to MetricAggregate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MetricAggregate type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class MetricEvent extends VUShared.DataContainer {

        /**
         * Creates a new MetricEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new MetricEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MetricEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MetricEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        owner: number;

    }

    class MetricReport extends VUShared.DataContainer {

        /**
         * Creates a new MetricReport frostbite instance.
         */
        constructor();
        /**
         * Creates a new MetricReport frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MetricReport. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MetricReport type.
         */
        static typeInfo: VUShared.TypeInformation;

        events: FB.MetricEvent[];

    }

    class MetricState extends FB.MetricEvent {

        /**
         * Creates a new MetricState frostbite instance.
         */
        constructor();
        /**
         * Creates a new MetricState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to MetricState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to MetricState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MetricState type.
         */
        static typeInfo: VUShared.TypeInformation;

        isSet: boolean;

    }

    class Minimap2DEntityData extends FB.GameEntityData {

        /**
         * Creates a new Minimap2DEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Minimap2DEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to Minimap2DEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to Minimap2DEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to Minimap2DEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to Minimap2DEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to Minimap2DEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to Minimap2DEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Minimap2DEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cameraTransform: VUShared.Vec3;
        imageHeight: number;
        imageWidth: number;
        antialiasMultiplier: number;
        terrainHeight: number;
        fov: number;

    }

    class MinimapCameraOffsetData {

        /**
         * Creates a new MinimapCameraOffsetData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MinimapCameraOffsetData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MinimapCameraOffsetData type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec2;
        cameraFov: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MinimapCameraOffsetData;

    }

    class MinimapData {

        /**
         * Creates a new MinimapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MinimapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MinimapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec2;
        cameraPosition: VUShared.Vec3;
        size: VUShared.Vec2;
        overlayColor: VUShared.Vec3;
        anchorPosVertical: number;
        anchorPosHorizontal: number;
        cameraLookDistance: number;
        cameraDistance: number;
        cameraFov: number;
        overlayAlpha: number;
        cameraRotation: number;
        startZoomLevel: number;
        innerZoomFactor: number;
        maxZoomLevels: number;
        centerOnCombatArea: boolean;
        rotationFromPlayer: boolean;
        positionFromPlayer: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MinimapData;

    }

    export enum MinimapIconInteractionConcept {
        MinimapIconInteractionConcept_None = 0,
        MinimapIconInteractionConcept_SelectSpawnPoint = 1,
        MinimapIconInteractionConcept_RemoveOrder = 2,
        MinimapIconInteractionConcept_AttackDefendCapturePoint = 3,
    }
    class MinMaxNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MinMaxNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MinMaxNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MinMaxNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MinMaxNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MinMaxNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: FB.AudioGraphNodePort;
        y: FB.AudioGraphNodePort;
        max: FB.AudioGraphNodePort;
        min: FB.AudioGraphNodePort;

    }

    class MinMaxValueSelectorEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MinMaxValueSelectorEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MinMaxValueSelectorEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MinMaxValueSelectorEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MinMaxValueSelectorEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MinMaxValueSelectorEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        input: FB.AudioGraphNodePort;

    }

    class MinMaxValueSelectorNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MinMaxValueSelectorNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MinMaxValueSelectorNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MinMaxValueSelectorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MinMaxValueSelectorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MinMaxValueSelectorNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputs: FB.MinMaxValueSelectorEntry[];
        maxValue: FB.AudioGraphNodePort;
        maxIndex: FB.AudioGraphNodePort;
        minValue: FB.AudioGraphNodePort;
        minIndex: FB.AudioGraphNodePort;

    }

    export enum MipmapFilterMode {
        MipmapFilterMode_Box = 0,
        MipmapFilterMode_Renormalize = 1,
        MipmapFilterMode_Poisson13 = 2,
        MipmapFilterMode_Poisson13Clamped = 3,
    }
    class MissileEntityData extends FB.MeshProjectileEntityData {

        /**
         * Creates a new MissileEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MissileEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshProjectileEntityData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MissileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MissileEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        gravity: number;
        engineEffect: FB.EffectBlueprint | undefined;
        dudExplosion: FB.ExplosionEntityData | undefined;
        flyBySound: FB.SoundAsset | undefined;
        engineStrength: number;
        maxSpeed: number;
        engineTimeToIgnition: number;
        engineTimeToLive: number;
        timeToActivateGuidingSystem: number;
        timeToArm: number;
        maxTurnAngle: number;
        drag: number;
        nearTargetDetonation: FB.NearTargetDetonationData;
        defaultTeam: FB.TeamId;
        flyBySoundRadius: number;
        flyBySoundSpeed: number;
        impactImpulse: number;
        damage: number;
        unguidedData: FB.MissileUnguidedData;
        warnTarget: FB.WarnTarget;
        lockableInfo: FB.MissileLockableInfoData;
        lockingController: FB.LockingControllerData | undefined;
        warnOnPointingMissile: boolean;
        applyGravityWhenGuided: boolean;

    }

    class MissileLockableInfoData {

        /**
         * Creates a new MissileLockableInfoData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MissileLockableInfoData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MissileLockableInfoData type.
         */
        static typeInfo: VUShared.TypeInformation;

        heatSignature: number;
        radarSignature: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MissileLockableInfoData;

    }

    class MissileUnguidedData {

        /**
         * Creates a new MissileUnguidedData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MissileUnguidedData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MissileUnguidedData type.
         */
        static typeInfo: VUShared.TypeInformation;

        staticPosition: VUShared.Vec2;
        targetPositionOffset: VUShared.Vec2;
        useTargetPosition: boolean;
        useStaticPosition: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MissileUnguidedData;

    }

    class MissionObjectiveHudData extends VUShared.DataContainer {

        /**
         * Creates a new MissionObjectiveHudData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MissionObjectiveHudData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MissionObjectiveHudData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MissionObjectiveHudData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cameraPosition: VUShared.Vec3;
        horizontalBoundaries: VUShared.Vec2;
        verticalBoundaries: VUShared.Vec2;
        cameraRotation: number;
        cameraFov: number;
        cameraLookDistance: number;
        cameraDistance: number;

    }

    class MixerAsset extends FB.Asset {

        /**
         * Creates a new MixerAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MixerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MixerAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        graph: FB.MixerGraphData | undefined;
        presets: FB.MixerPreset[];
        defaultPreset: FB.MixerPreset | undefined;

    }

    class MixerEntityData extends FB.EntityData {

        /**
         * Creates a new MixerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to MixerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MixerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MixerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MixerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mixer: FB.MixerAsset | undefined;
        activateOnCreation: boolean;

    }

    class MixerEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MixerEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MixerEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MixerEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class MixerGraphData extends FB.AudioGraphData {

        /**
         * Creates a new MixerGraphData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerGraphData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphData to MixerGraphData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphData);
        /**
         * Casts an instance of type DataContainer to MixerGraphData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerGraphData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputs: FB.AudioGraphParameter[];
        accumulateModes: FB.MixerValueAccumulateMode[];
        outputs: FB.AudioGraphParameter[];

    }

    class MixerInputEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MixerInputEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerInputEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MixerInputEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MixerInputEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerInputEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        out: FB.AudioGraphNodePort;
        source: FB.AudioGraphParameter | undefined;
        accumulateMode: FB.MixerValueAccumulateMode;

    }

    class MixerInputNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerInputNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerInputNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerInputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerInputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerInputNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MixerInputEntry[];

    }

    class MixerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MixerEntry[];
        out: FB.AudioGraphNodePort;

    }

    class MixerOutputEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MixerOutputEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerOutputEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MixerOutputEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MixerOutputEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerOutputEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        target: FB.AudioGraphParameter | undefined;

    }

    class MixerOutputNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerOutputNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerOutputNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerOutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerOutputNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MixerOutputEntry[];

    }

    class MixerPreset extends VUShared.DataContainer {

        /**
         * Creates a new MixerPreset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerPreset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MixerPreset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerPreset type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameHash: number;
        groups: FB.MixerPresetGroupData[];
        nodes: FB.MixerPresetNodeData[];

    }

    class MixerPresetGroupData {

        /**
         * Creates a new MixerPresetGroupData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerPresetGroupData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MixerPresetGroupData type.
         */
        static typeInfo: VUShared.TypeInformation;

        group: FB.MixGroup | undefined;
        state: FB.MixGroupState;
        attackTime: number;
        releaseTime: number;
        properties: FB.MixGroupPropertyValue[];
        isDominant: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MixerPresetGroupData;

    }

    class MixerPresetNodeData {

        /**
         * Creates a new MixerPresetNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerPresetNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MixerPresetNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        node: FB.AudioGraphNodeData | undefined;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MixerPresetNodeData;

    }

    class MixerReceiveEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MixerReceiveEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerReceiveEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MixerReceiveEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MixerReceiveEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerReceiveEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        out: FB.AudioGraphNodePort;
        source: FB.AudioGraphParameter | undefined;
        mixer: FB.MixerAsset | undefined;

    }

    class MixerReceiveNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerReceiveNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerReceiveNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerReceiveNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerReceiveNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerReceiveNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MixerReceiveEntry[];

    }

    class MixerSendEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MixerSendEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerSendEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MixerSendEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MixerSendEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerSendEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        target: FB.AudioGraphParameter | undefined;
        mixer: FB.MixerAsset | undefined;

    }

    class MixerSendNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerSendNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerSendNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerSendNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerSendNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerSendNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MixerSendEntry[];

    }

    class MixerSetPropertyEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MixerSetPropertyEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerSetPropertyEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MixerSetPropertyEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MixerSetPropertyEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerSetPropertyEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        target: number;
        group: FB.MixGroup | undefined;
        attackTime: number;
        releaseTime: number;

    }

    class MixerSetPropertyNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerSetPropertyNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerSetPropertyNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerSetPropertyNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerSetPropertyNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerSetPropertyNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.MixerSetPropertyEntry[];

    }

    class MixerSimplePresetNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerSimplePresetNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerSimplePresetNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerSimplePresetNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerSimplePresetNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerSimplePresetNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        index: FB.AudioGraphNodePort;
        presets: FB.MixerPreset[];

    }

    class MixerSystemAsset extends FB.Asset {

        /**
         * Creates a new MixerSystemAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerSystemAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MixerSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MixerSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerSystemAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        groups: FB.MixGroup[];

    }

    export enum MixerValueAccumulateMode {
        MixerValueAccumulateMode_None = 0,
        MixerValueAccumulateMode_Min = 1,
        MixerValueAccumulateMode_Max = 2,
    }
    class MixerValueNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MixerValueNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixerValueNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MixerValueNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MixerValueNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixerValueNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        out: FB.AudioGraphNodePort;
        defaultValue: number;

    }

    export enum MixerValueUI {
        MixerValueUI_None = 0,
        MixerValueUI_Fader = 1,
        MixerValueUI_Knob = 2,
        MixerValueUI_EditBox = 3,
    }
    export enum MixerValueUIOrientation {
        MixerValueUIOrientation_Horizontal = 0,
        MixerValueUIOrientation_Vertical = 1,
    }
    export enum MixerValueUIScale {
        MixerValueUIScale_Linear = 0,
        MixerValueUIScale_Logarithmic = 1,
    }
    class MixGroup extends VUShared.DataContainer {

        /**
         * Creates a new MixGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MixGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MixGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        groupIndex: number;
        parentGroupIndex: number;

    }

    export enum MixGroupPropertyType {
        MixGroupPropertyType_Gain = 0,
        MixGroupPropertyType_Pitch = 1,
        MixGroupPropertyTypeCount = 2,
    }
    class MixGroupPropertyValue {

        /**
         * Creates a new MixGroupPropertyValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new MixGroupPropertyValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MixGroupPropertyValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        property: number;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MixGroupPropertyValue;

    }

    export enum MixGroupState {
        MixGroupState_Normal = 0,
        MixGroupState_Mute = 1,
        MixGroupState_Solo = 2,
    }
    class MobileSpawnComponentData extends FB.ComponentData {

        /**
         * Creates a new MobileSpawnComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MobileSpawnComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to MobileSpawnComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to MobileSpawnComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MobileSpawnComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MobileSpawnComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MobileSpawnComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        parachuteSpawnRadiusMin: number;
        parachuteSpawnDistance: number;
        nameSid: string;
        parachuteSpawnRadiusMax: number;
        enterMobileSpawnPoint: boolean;

    }

    class MobilityData extends VUShared.DataContainer {

        /**
         * Creates a new MobilityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MobilityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MobilityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MobilityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxSpeed: number;
        use3DWaypoints: boolean;

    }

    class ModelAnimationEntityData extends FB.EntityData {

        /**
         * Creates a new ModelAnimationEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ModelAnimationEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ModelAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ModelAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ModelAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ModelAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ModelAnimationEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animationEntitySpace: VUShared.LinearTransform;
        boneToPlace: FB.GameplayBones;
        realm: FB.Realm;
        modelAnimationTransformType: FB.ModelAnimationTransformType;
        instanceSeed: number;
        defaultAnimation: string;
        animationIndex: number;
        animationSet: FB.AntAnimationSetAsset | undefined;
        externalTime: number;
        rootMeshBoneName: string;
        jointWorldTransformUpdateOrder: FB.ModelAnimationUpdateOrder;
        connectBoneName: string;
        jointOutputPropertyIds: number[];
        trajectoryBoneName: string;
        animationEntitySpaceActive: boolean;
        playFirstFrame: boolean;
        looping: boolean;
        enableJointWorldTransformOutput: boolean;
        resetAfterStop: boolean;
        autoStart: boolean;
        showDebugTransforms: boolean;
        applyRotationCompensation: boolean;
        applyPreTransformation: boolean;
        disableCulling: boolean;

    }

    export enum ModelAnimationTransformType {
        ModelAnimationTransformType_World = 0,
        ModelAnimationTransformType_Model = 1,
        ModelAnimationTransformType_Local = 2,
    }
    export enum ModelAnimationUpdateOrder {
        ModelAnimationUpdateOrder_PostAnimation = 0,
        ModelAnimationUpdateOrder_PreInput = 1,
        ModelAnimationUpdateOrder_PreFrame = 1,
    }
    export enum ModifierAxis {
        maLeft = 0,
        maUp = 1,
        maForward = 2,
    }
    export enum ModifierEuler {
        Roll = 0,
        Pitch = 1,
        Yaw = 2,
        Trans = 3,
    }
    class MortarStrikeWeaponData extends FB.WeaponData {

        /**
         * Creates a new MortarStrikeWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MortarStrikeWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to MortarStrikeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to MortarStrikeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to MortarStrikeWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MortarStrikeWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        holdingTolerance: number;
        maxStrikeDistance: number;
        strikeRadius: number;
        maxRandomSpawnHeight: number;

    }

    class MotionBlurComponentData extends FB.ComponentData {

        /**
         * Creates a new MotionBlurComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MotionBlurComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to MotionBlurComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to MotionBlurComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MotionBlurComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MotionBlurComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MotionBlurComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        cutoffGradientScale: number;
        motionBlurCutoffRadius: number;
        motionBlurEnable: boolean;

    }

    class MotionControllerInputActionData extends FB.AxesInputActionData {

        /**
         * Creates a new MotionControllerInputActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MotionControllerInputActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AxesInputActionData to MotionControllerInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AxesInputActionData);
        /**
         * Casts an instance of type InputActionData to MotionControllerInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionData);
        /**
         * Casts an instance of type DataContainer to MotionControllerInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MotionControllerInputActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        button: FB.InputDeviceMotionControllerButtons;

    }

    class MotionDampingData extends VUShared.DataContainer {

        /**
         * Creates a new MotionDampingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MotionDampingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MotionDampingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MotionDampingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        linearModifier: VUShared.Vec3;
        pitch: number;
        yaw: number;
        roll: number;
        linear: number;

    }

    class MotorbikeData extends VUShared.DataContainer {

        /**
         * Creates a new MotorbikeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MotorbikeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MotorbikeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MotorbikeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        wheelieForceBodyOffset: VUShared.Vec3;
        wheelieForce: VUShared.Vec3;
        dampBigJumpImpactCounterForce: VUShared.Vec3;
        proximityExtScale: VUShared.Vec3;
        jumpForwardLeanMinAngle: number;
        jumpForwardLeanMomentum: number;
        kickstandRoll: number;
        kickstandLinearDamping: number;
        leanForceMaxVel: number;
        counterLeanForce: number;
        standStillRoll: number;
        dampBigJumpImpactVelocity: number;
        yawBrakeDampingLerpStartScale: number;
        yawBrakeDampingLerpEndScale: number;
        stoppieActivationVelocity: number;
        stoppieStartVelocity: number;
        leanForce: number;
        stoppieMomentum: number;
        shortOffgroundGravityMultiplier: number;
        maxLeaningRoll: number;
        stoppieStopVelocity: number;
        proximityHeightTranslation: number;
        wheelieMaxNoDownForceContactTime: number;
        wheelieMaxNoContactTime: number;
        wheelieSteeringFactor: number;
        wheelieInertia: number;
        wheelieStartVelocity: number;
        wheelieMaxVelocityUndamped: number;
        wheelieMaxVelocityDampRange: number;
        wheelieOutAngularMomentum: number;
        wheelieSpringDamping: number;
        wheelieAngularDamping: number;
        wheelieAngularDampingSpeed: number;
        shortOffgroundPeriod: number;
        wheelieMaxAngle: number;
        wheelieAngularStartMomentum: number;
        wheelieMaxVelocity: number;
        wheelieVelocityForceScale: number;
        dampBigJumpImpact: boolean;

    }

    class MouseInputActionData extends FB.AxesInputActionData {

        /**
         * Creates a new MouseInputActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MouseInputActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AxesInputActionData to MouseInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AxesInputActionData);
        /**
         * Casts an instance of type InputActionData to MouseInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionData);
        /**
         * Casts an instance of type DataContainer to MouseInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MouseInputActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        button: FB.InputDeviceMouseButtons;
        simulateJoystickAxis: boolean;
        rememberExcessInput: boolean;
        scaleScrollWheelAxisInput: boolean;

    }

    class MovementActionData extends VUShared.DataContainer {

        /**
         * Creates a new MovementActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MovementActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovementActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class MovementActionGroupData extends FB.MovementActionData {

        /**
         * Creates a new MovementActionGroupData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementActionGroupData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MovementActionData to MovementActionGroupData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovementActionData);
        /**
         * Casts an instance of type DataContainer to MovementActionGroupData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovementActionGroupData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actions: FB.MovementActionData[];
        runSimultaneously: boolean;
        restartChildren: boolean;

    }

    class MovementActionRandomizerData extends FB.MovementActionData {

        /**
         * Creates a new MovementActionRandomizerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementActionRandomizerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MovementActionData to MovementActionRandomizerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovementActionData);
        /**
         * Casts an instance of type DataContainer to MovementActionRandomizerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovementActionRandomizerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actions: FB.MovementActionData[];
        reinsertIntoRandomizedListAfterUse: boolean;

    }

    class MovementActionRoot extends FB.Asset {

        /**
         * Creates a new MovementActionRoot frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementActionRoot frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MovementActionRoot. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MovementActionRoot. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovementActionRoot type.
         */
        static typeInfo: VUShared.TypeInformation;

        startSequence: FB.MovementActionData | undefined;

    }

    class MovementComponentBinding {

        /**
         * Creates a new MovementComponentBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementComponentBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MovementComponentBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        animationControlled: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MovementComponentBinding;

    }

    class MovementComponentData extends FB.ComponentData {

        /**
         * Creates a new MovementComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to MovementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to MovementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MovementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MovementComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovementComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        movementBinding: FB.MovementComponentBinding;

    }

    class MovementConstantData extends FB.Asset {

        /**
         * Creates a new MovementConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovementConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MovementConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MovementConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovementConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxCrouchWalkDistance: number;

    }

    class MovieComponentData extends FB.ComponentData {

        /**
         * Creates a new MovieComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovieComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to MovieComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to MovieComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MovieComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MovieComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovieComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        movie: FB.MovieTextureAsset | undefined;
        externalTime: number;
        isNormalMap: boolean;

    }

    class MovieEntityData extends FB.GameEntityData {

        /**
         * Creates a new MovieEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovieEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to MovieEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MovieEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MovieEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MovieEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MovieEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MovieEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovieEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        movie: FB.MovieTextureAsset | undefined;
        externalTime: number;
        isNormalMap: boolean;

    }

    class MovieTextureAsset extends FB.Asset {

        /**
         * Creates a new MovieTextureAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovieTextureAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to MovieTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to MovieTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovieTextureAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        chunkGuid: VUShared.Guid;
        chunkSize: number;
        subtitleChunkGuid: VUShared.Guid;
        subtitleChunkSize: number;
        hasLocalizedAudioTracks: boolean;
        overrideBackgroundMusic: boolean;

    }

    class MovieTextureSettings extends VUShared.DataContainer {

        /**
         * Creates a new MovieTextureSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovieTextureSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MovieTextureSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovieTextureSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        enable: boolean;

    }

    class MovingBodyData extends VUShared.DataContainer {

        /**
         * Creates a new MovingBodyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MovingBodyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to MovingBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MovingBodyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mass: number;
        inertia: number;

    }

    class MPModeData {

        /**
         * Creates a new MPModeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MPModeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the MPModeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehiclePoints: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.MPModeData;

    }

    class MultiCrossfaderGroup extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new MultiCrossfaderGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new MultiCrossfaderGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to MultiCrossfaderGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to MultiCrossfaderGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MultiCrossfaderGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        amplitude: FB.AudioGraphNodePort;
        start: FB.AudioGraphNodePort;
        stop: FB.AudioGraphNodePort;
        fadeAmplitude: number;
        fadeBegin: number;
        fadeEnd: number;
        fadeType: FB.FaderType;

    }

    class MultiCrossfaderNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new MultiCrossfaderNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MultiCrossfaderNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to MultiCrossfaderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to MultiCrossfaderNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MultiCrossfaderNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        crossfaderGroups: FB.MultiCrossfaderGroup[];
        start: FB.AudioGraphNodePort;
        stop: FB.AudioGraphNodePort;
        control: FB.AudioGraphNodePort;
        lockControlValue: boolean;

    }

    class MultipleActorScenarioEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new MultipleActorScenarioEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MultipleActorScenarioEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to MultipleActorScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MultipleActorScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MultipleActorScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MultipleActorScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MultipleActorScenarioEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MultipleActorScenarioEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        worldSpaceConnectTransform: VUShared.LinearTransform;
        actor5Part: number;
        scenarioAntRef: FB.AntRef;
        levelChoice: number;
        scenarioChoice: number;
        realm: FB.Realm;
        actor6Part: number;
        actor1: number;
        actor1Part: number;
        actor1SecondPart: number;
        actor2: number;
        actor2Part: number;
        actor2SecondPart: number;
        actor3: number;
        actor3Part: number;
        actor3SecondPart: number;
        actor4: number;
        actor4Part: number;
        actor4SecondPart: number;
        actor5: number;
        actor5SecondPart: number;
        actor6SecondPart: number;
        actor6: number;
        externalTime: number;
        aligningEnabled: boolean;
        scenarioActive: boolean;
        actor1Prepared: boolean;
        actor2Prepared: boolean;
        actor3Prepared: boolean;
        actor4Prepared: boolean;
        actor5Prepared: boolean;
        actor6Prepared: boolean;
        checkActor1Finished: boolean;
        checkActor2Finished: boolean;
        checkActor3Finished: boolean;
        checkActor4Finished: boolean;
        checkActor5Finished: boolean;
        checkActor6Finished: boolean;
        useInputEventPlayerAsPlayer1: boolean;
        useExternalTime: boolean;
        worldSpace: boolean;

    }

    class MultipleTargetPainterWeaponData extends FB.WeaponData {

        /**
         * Creates a new MultipleTargetPainterWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MultipleTargetPainterWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to MultipleTargetPainterWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to MultipleTargetPainterWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to MultipleTargetPainterWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MultipleTargetPainterWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        spottingBehavior: FB.SpottingType;
        timeObjectIsPainted: number;
        angle: number;
        timeObjectIsSpotted: number;
        range: number;
        useSpotting: boolean;
        useLaserPainting: boolean;

    }

    class MultipleTriggerEntityData extends FB.TriggerEventEntityData {

        /**
         * Creates a new MultipleTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new MultipleTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEventEntityData to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEventEntityData);
        /**
         * Casts an instance of type TriggerEntityData to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to MultipleTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the MultipleTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        triggerAmount: number;

    }

    class NearTargetDetonationData {

        /**
         * Creates a new NearTargetDetonationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new NearTargetDetonationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the NearTargetDetonationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        detonationRadius: number;
        minDetonationDelay: number;
        maxDetonationDelay: number;
        detonateNearTarget: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.NearTargetDetonationData;

    }

    class NestedList {

        /**
         * Creates a new NestedList frostbite instance.
         */
        constructor();
        /**
         * Creates a new NestedList frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the NestedList type.
         */
        static typeInfo: VUShared.TypeInformation;

        label: string;
        index: string;
        listDataSource: FB.UIDataSourceInfo;
        dynamicShowList: FB.UIDataSourceInfo;
        staticItems: string[];
        defaultHighlighted: FB.DefaultSelectionItem;
        rowType: FB.UIListRowType;
        useAsNormalListRows: boolean;
        hiddenOnPC: boolean;
        hiddenOnXenon: boolean;
        highLightOnUpdate: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.NestedList;

    }

    class NetworkableLoosePartPhysicsData extends FB.LoosePartPhysicsData {

        /**
         * Creates a new NetworkableLoosePartPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new NetworkableLoosePartPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LoosePartPhysicsData to NetworkableLoosePartPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LoosePartPhysicsData);
        /**
         * Casts an instance of type DataContainer to NetworkableLoosePartPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NetworkableLoosePartPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        networked: boolean;

    }

    class NetworkDataId {

        /**
         * Creates a new NetworkDataId frostbite instance.
         */
        constructor();
        /**
         * Creates a new NetworkDataId frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the NetworkDataId type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.NetworkDataId;

    }

    class NetworkPerformanceEvent extends FB.MetricEvent {

        /**
         * Creates a new NetworkPerformanceEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new NetworkPerformanceEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to NetworkPerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to NetworkPerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NetworkPerformanceEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        received: number;
        sent: number;
        receivedAverage: number;
        sentAverage: number;
        performanceLink: VUShared.Guid;

    }

    class NetworkSettings extends VUShared.DataContainer {

        /**
         * Creates a new NetworkSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new NetworkSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to NetworkSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NetworkSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        protocolVersion: number;
        titleId: string;
        clientPort: number;
        serverPort: number;
        maxGhostCount: number;
        maxClientCount: number;
        maxClientFrameSize: number;
        maxServerFrameSize: number;
        xlspAddress: string;
        serverAddress: string;
        clientConnectionDebugFilePrefix: string;
        serverConnectionDebugFilePrefix: string;
        timeNudgeGhostFrequencyFactor: number;
        timeNudgeBias: number;
        connectTimeout: number;
        useFrameManager: boolean;
        timeSyncEnabled: boolean;
        incrementServerPortOnFail: boolean;

    }

    class NetworkVoteDetails {

        /**
         * Creates a new NetworkVoteDetails frostbite instance.
         */
        constructor();
        /**
         * Creates a new NetworkVoteDetails frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the NetworkVoteDetails type.
         */
        static typeInfo: VUShared.TypeInformation;

        issuer: number;
        personal: boolean;
        voteId: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.NetworkVoteDetails;

    }

    class NFSUIListDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new NFSUIListDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new NFSUIListDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to NFSUIListDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to NFSUIListDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NFSUIListDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        refresh: FB.UIDataSourceInfo;
        items: FB.UIListItem[];

    }

    class NoiseTextureAsset extends FB.TextureBaseAsset {

        /**
         * Creates a new NoiseTextureAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new NoiseTextureAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TextureBaseAsset to NoiseTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TextureBaseAsset);
        /**
         * Casts an instance of type Asset to NoiseTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to NoiseTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NoiseTextureAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class NormalizeSettings {

        /**
         * Creates a new NormalizeSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new NormalizeSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the NormalizeSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        maximum: number;
        minimum: number;
        velocity: number;
        lower: number;
        upper: number;
        normalize: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.NormalizeSettings;

    }

    class NotEntityData extends FB.EntityData {

        /**
         * Creates a new NotEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new NotEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to NotEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to NotEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to NotEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to NotEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NotEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        inValue: boolean;

    }

    export enum NotifyType {
        NotifyPersonal = 0,
        NotifyGeneral = 1,
        NotifyConsole = 2,
        NotityTooltip = 3,
        NotifyCount = 4,
    }
    export enum NumberGeneratorMode {
        NumberGeneratorMode_RandomUniform = 0,
    }
    class NumberGeneratorNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new NumberGeneratorNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new NumberGeneratorNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to NumberGeneratorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to NumberGeneratorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the NumberGeneratorNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        trigger: FB.AudioGraphNodePort;
        min: number;
        max: number;
        mode: FB.NumberGeneratorMode;
        y: FB.AudioGraphNodePort;

    }

    class OBBData extends FB.BaseShapeData {

        /**
         * Creates a new OBBData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OBBData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BaseShapeData to OBBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to OBBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to OBBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to OBBData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OBBData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        halfExtents: VUShared.Vec3;

    }

    class ObjectBlueprint extends FB.Blueprint {

        /**
         * Creates a new ObjectBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new ObjectBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Blueprint to ObjectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to ObjectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to ObjectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to ObjectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ObjectBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ObjectBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

        object: FB.GameObjectData | undefined;

    }

    class ObjectEnterAreaTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new ObjectEnterAreaTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ObjectEnterAreaTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ObjectEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ObjectEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ObjectEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ObjectEnterAreaTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ObjectEnterAreaTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        updatePass: FB.UpdatePass;
        autoStart: boolean;

    }

    class ObjectiveEntityData extends FB.GameEntityData {

        /**
         * Creates a new ObjectiveEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ObjectiveEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to ObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ObjectiveEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        objectiveBriefSid: string;
        objectiveSid: string;
        hudData: FB.MissionObjectiveHudData | undefined;
        objectiveType: FB.ObjectiveType;
        displayTime: number;
        delayTime: number;
        squadId: FB.SquadId;
        teamId: FB.TeamId;
        successSid: string;
        reciever: FB.MessageReciever;
        retriggerSuccessOnShowObjective: boolean;
        tutorial: boolean;
        displaySuccess: boolean;

    }

    export enum ObjectiveType {
        OTPrimary = 0,
        OTTactical = 1,
        OTChildMisson = 2,
    }
    class ObjectVariation extends FB.Asset {

        /**
         * Creates a new ObjectVariation frostbite instance.
         */
        constructor();
        /**
         * Creates a new ObjectVariation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ObjectVariation. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ObjectVariation. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ObjectVariation type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameHash: number;

    }

    class ObjectVariationSwitchEntityData extends FB.EntityData {

        /**
         * Creates a new ObjectVariationSwitchEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ObjectVariationSwitchEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ObjectVariationSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ObjectVariationSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ObjectVariationSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ObjectVariationSwitchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ObjectVariationSwitchEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        variation1: FB.ObjectVariation | undefined;
        variation2: FB.ObjectVariation | undefined;

    }

    class OccluderMeshEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new OccluderMeshEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OccluderMeshEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to OccluderMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to OccluderMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to OccluderMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to OccluderMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to OccluderMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OccluderMeshEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mesh: FB.RigidMeshAsset | undefined;

    }

    class OccluderVolumeEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new OccluderVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OccluderVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to OccluderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to OccluderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to OccluderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to OccluderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to OccluderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OccluderVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        occluderHighPriority: boolean;

    }

    class OcclusionSettings extends VUShared.DataContainer {

        /**
         * Creates a new OcclusionSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new OcclusionSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to OcclusionSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OcclusionSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        enable: boolean;
        drawZbuffer: boolean;
        drawBinaryBuffer: boolean;

    }

    class OneOptionAxisEditableAction extends FB.EditableAction {

        /**
         * Creates a new OneOptionAxisEditableAction frostbite instance.
         */
        constructor();
        /**
         * Creates a new OneOptionAxisEditableAction frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EditableAction to OneOptionAxisEditableAction. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EditableAction);
        /**
         * Casts an instance of type DataContainer to OneOptionAxisEditableAction. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OneOptionAxisEditableAction type.
         */
        static typeInfo: VUShared.TypeInformation;

        header: string;
        invert: boolean;

    }

    class OneOptionButtonEditableAction extends FB.EditableAction {

        /**
         * Creates a new OneOptionButtonEditableAction frostbite instance.
         */
        constructor();
        /**
         * Creates a new OneOptionButtonEditableAction frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EditableAction to OneOptionButtonEditableAction. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EditableAction);
        /**
         * Casts an instance of type DataContainer to OneOptionButtonEditableAction. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OneOptionButtonEditableAction type.
         */
        static typeInfo: VUShared.TypeInformation;

        header: string;

    }

    class OnGroundStateData extends FB.CharacterStateData {

        /**
         * Creates a new OnGroundStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnGroundStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to OnGroundStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to OnGroundStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OnGroundStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        jumpDelay: number;
        jumpStaminaPenalty: number;
        allowedDistanceFromGround: number;
        groundHugging: boolean;
        limitDownwardVelocity: boolean;

    }

    class OnlineConfiguration extends FB.Asset {

        /**
         * Creates a new OnlineConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to OnlineConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to OnlineConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OnlineConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        backend: FB.BackendType;
        provider: FB.OnlineProviderAsset | undefined;
        richPresence: FB.RichPresenceData | undefined;
        chat: FB.ChatSettings | undefined;

    }

    export enum OnlineEnvironment {
        OnlineEnvironment_Development = 0,
        OnlineEnvironment_Test = 1,
        OnlineEnvironment_Certification = 2,
        OnlineEnvironment_Production = 3,
        OnlineEnvironment_Count = 4,
    }
    class OnlineEnvironmentConsoleUrl {

        /**
         * Creates a new OnlineEnvironmentConsoleUrl frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineEnvironmentConsoleUrl frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OnlineEnvironmentConsoleUrl type.
         */
        static typeInfo: VUShared.TypeInformation;

        urls: FB.OnlineEnvironmentConsoleUrlData[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OnlineEnvironmentConsoleUrl;

    }

    class OnlineEnvironmentConsoleUrlData {

        /**
         * Creates a new OnlineEnvironmentConsoleUrlData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineEnvironmentConsoleUrlData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OnlineEnvironmentConsoleUrlData type.
         */
        static typeInfo: VUShared.TypeInformation;

        platform: FB.GamePlatform;
        url: FB.OnlineEnvironmentUrl;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OnlineEnvironmentConsoleUrlData;

    }

    class OnlineEnvironmentUrl {

        /**
         * Creates a new OnlineEnvironmentUrl frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineEnvironmentUrl frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OnlineEnvironmentUrl type.
         */
        static typeInfo: VUShared.TypeInformation;

        urls: FB.OnlineEnvironmentUrlData[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OnlineEnvironmentUrl;

    }

    class OnlineEnvironmentUrlData {

        /**
         * Creates a new OnlineEnvironmentUrlData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineEnvironmentUrlData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OnlineEnvironmentUrlData type.
         */
        static typeInfo: VUShared.TypeInformation;

        url: string;
        environment: FB.OnlineEnvironment;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OnlineEnvironmentUrlData;

    }

    class OnlinePlatformConfiguration {

        /**
         * Creates a new OnlinePlatformConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlinePlatformConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OnlinePlatformConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        platform: FB.GamePlatform;
        services: FB.OnlineServicesAsset | undefined;
        clientBackends: FB.PresenceBackendData[];
        serverBackends: FB.ServerBackendData[];
        isFallback: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OnlinePlatformConfiguration;

    }

    class OnlineProviderAsset extends FB.Asset {

        /**
         * Creates a new OnlineProviderAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineProviderAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to OnlineProviderAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to OnlineProviderAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OnlineProviderAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        configurations: FB.OnlineProviderConfiguration[];

    }

    class OnlineProviderConfiguration {

        /**
         * Creates a new OnlineProviderConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineProviderConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OnlineProviderConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        platform: FB.GamePlatform;
        client: string;
        serviceName: string;
        sku: string;
        version: string;
        serverSocketPacketSize: number;
        isServer: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OnlineProviderConfiguration;

    }

    class OnlineServicesAsset extends FB.Asset {

        /**
         * Creates a new OnlineServicesAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineServicesAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to OnlineServicesAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to OnlineServicesAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OnlineServicesAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        onlineServices: FB.PresenceServiceData[];

    }

    class OnlineSettings extends FB.SystemSettings {

        /**
         * Creates a new OnlineSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new OnlineSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to OnlineSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to OnlineSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OnlineSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        backend: FB.BackendType;
        peerBackend: FB.BackendType;
        environment: FB.OnlineEnvironment;
        matchmakingToken: string;
        provider: FB.OnlineProviderAsset | undefined;
        richPresence: FB.RichPresenceData | undefined;
        chatSettings: FB.ChatSettings | undefined;
        matchmakingOptions: string;
        region: string;
        negativeUserCacheRefreshPeriod: number;
        matchmakingMode: string;
        country: string;
        isSecure: boolean;
        supportHostMigration: boolean;
        matchmakeImmediately: boolean;

    }

    class OperandLogicNode extends FB.UINodeData {

        /**
         * Creates a new OperandLogicNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new OperandLogicNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to OperandLogicNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to OperandLogicNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OperandLogicNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        leftDataSourceInfo: FB.UIDataSourceInfo;
        operator: FB.UILogicOperator;
        rightDataSourceInfo: FB.UIDataSourceInfo;
        rightLiteralOperand: number;
        inValue: FB.UINodePort | undefined;
        trueValue: FB.UINodePort | undefined;
        falseValue: FB.UINodePort | undefined;

    }

    class Or4EntityData extends FB.EntityData {

        /**
         * Creates a new Or4EntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Or4EntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to Or4EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to Or4EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to Or4EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to Or4EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Or4EntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        in1: boolean;
        in2: boolean;
        in3: boolean;
        in4: boolean;

    }

    class OrderBonusScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new OrderBonusScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OrderBonusScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to OrderBonusScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to OrderBonusScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OrderBonusScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class OrderEntityData extends FB.EntityData {

        /**
         * Creates a new OrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to OrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to OrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to OrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to OrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugName: string;
        issueOrderDelay: number;
        onCompleteTimeOut: number;
        onFailedTimeOut: number;
        readinessOnStart: FB.ReadinessLevel;
        enabled: boolean;

    }

    class OrderReadiness extends FB.UrgencyUserData {

        /**
         * Creates a new OrderReadiness frostbite instance.
         */
        constructor();
        /**
         * Creates a new OrderReadiness frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UrgencyUserData to OrderReadiness. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UrgencyUserData);
        /**
         * Casts an instance of type DataContainer to OrderReadiness. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OrderReadiness type.
         */
        static typeInfo: VUShared.TypeInformation;

        orderType: string;
        minimumReadiness: FB.ReadinessState;

    }

    class OrderSettings extends FB.Asset {

        /**
         * Creates a new OrderSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new OrderSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to OrderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to OrderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OrderSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        orders: FB.OrderReadiness[];

    }

    export enum OrderType {
        OrderType_None = 0,
        OrderType_RequestHeal = 1,
        OrderType_LetMeHeal = 2,
        OrderType_RequestAmmo = 3,
        OrderType_LetMeGiveAmmo = 4,
        OrderType_LetMeRepair = 5,
        OrderType_RequestRepair = 6,
        OrderType_RequestRide = 7,
        OrderType_GoGoGo = 8,
        OrderType_FollowMe = 9,
        OrderType_Negative = 10,
        OrderType_Sorry = 11,
        OrderType_ThankYou = 12,
        OrderType_RogerThat = 13,
        OrderType_NeedBackup = 14,
        OrderType_GetIn = 15,
        OrderType_GetOut = 16,
        OrderType_Attack = 17,
        OrderType_Count = 18,
    }
    class OrEntityData extends FB.EntityData {

        /**
         * Creates a new OrEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OrEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to OrEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to OrEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to OrEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to OrEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OrEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        in1: boolean;
        in2: boolean;

    }

    class OrientationNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new OrientationNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OrientationNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to OrientationNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to OrientationNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OrientationNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        listenerRelativeYaw: FB.AudioGraphNodePort;
        listenerRelativePitch: FB.AudioGraphNodePort;
        listenerRelativeRoll: FB.AudioGraphNodePort;

    }

    class OutdoorLightComponentData extends FB.ComponentData {

        /**
         * Creates a new OutdoorLightComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OutdoorLightComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to OutdoorLightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to OutdoorLightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to OutdoorLightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to OutdoorLightComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OutdoorLightComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sunColor: VUShared.Vec3;
        cloudShadowSpeed: VUShared.Vec2;
        skyColor: VUShared.Vec3;
        groundColor: VUShared.Vec3;
        sunRotationY: number;
        sunRotationX: number;
        realm: FB.Realm;
        skyLightAngleFactor: number;
        sunSpecularScale: number;
        skyEnvmapShadowScale: number;
        sunShadowHeightScale: number;
        cloudShadowCoverage: number;
        cloudShadowTexture: FB.TextureAsset | undefined;
        translucencyDistortion: number;
        cloudShadowSize: number;
        translucencyAmbient: number;
        cloudShadowExponent: number;
        translucencyScale: number;
        translucencyPower: number;
        enable: boolean;
        cloudShadowEnable: boolean;

    }

    class OutdoorLightEffectState extends VUShared.DataContainer {

        /**
         * Creates a new OutdoorLightEffectState frostbite instance.
         */
        constructor();
        /**
         * Creates a new OutdoorLightEffectState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to OutdoorLightEffectState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OutdoorLightEffectState type.
         */
        static typeInfo: VUShared.TypeInformation;

        skyColor: VUShared.Vec3;
        groundColor: VUShared.Vec3;
        sunColor: VUShared.Vec3;
        cloudShadowSpeed: VUShared.Vec2;
        sunRotationX: number;
        sunRotationY: number;
        skyLightAngleFactor: number;
        sunShadowHeightScale: number;
        cloudShadowTexture: FB.TextureAsset | undefined;
        cloudShadowSize: number;
        cloudShadowExponent: number;
        cloudShadowCoverage: number;
        cloudShadowEnable: boolean;
        enable: boolean;

    }

    class OutputNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new OutputNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OutputNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to OutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to OutputNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the OutputNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        bypassHeadroom: FB.AudioGraphNodePort;
        minDistance: number;
        attenuationCurve: FB.AudioCurve;
        gain: number;
        hfDampingDistance: number;
        hfDampingObstruction: number;
        hfDampingOcclusion: number;
        mainSendPlugin: FB.SoundGraphPluginRef;
        mainSend: FB.SoundBusData | undefined;
        outputName: string;
        transformSource: FB.OutputTransformSource;
        outputNameHash: number;
        lowPassPlugin: FB.SoundGraphPluginRef;
        vuPlugin: FB.SoundGraphPluginRef;
        solo: boolean;
        enableHdr: boolean;

    }

    export enum OutputTransformSource {
        OutputTransformSource_Sound = 0,
        OutputTransformSource_Listener = 1,
        OutputTransformSource_Output = 2,
    }
    class OverHeatData {

        /**
         * Creates a new OverHeatData frostbite instance.
         */
        constructor();
        /**
         * Creates a new OverHeatData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the OverHeatData type.
         */
        static typeInfo: VUShared.TypeInformation;

        heatPerBullet: number;
        heatDropPerSecond: number;
        overHeatPenaltyTime: number;
        overHeatThreshold: number;
        overHeatEffect: FB.FireEffectData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.OverHeatData;

    }

    class PackagingCellData extends FB.EntityData {

        /**
         * Creates a new PackagingCellData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PackagingCellData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PackagingCellData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PackagingCellData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PackagingCellData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PackagingCellData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PackagingCellData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rules: FB.PackagingRule[];
        targets: FB.PackagingCellData[];
        shape: VUShared.Vec2[];

    }

    class PackagingDetailInfo {

        /**
         * Creates a new PackagingDetailInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new PackagingDetailInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PackagingDetailInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        mipsToSkip: number;
        lodsToSkip: number;
        includeAnimation: boolean;
        includeMeshes: boolean;
        includeSounds: boolean;
        includeTextures: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PackagingDetailInfo;

    }

    export enum PackagingDetailLevel {
        PackagingDetailLevel_Low = 0,
        PackagingDetailLevel_Medium = 1,
        PackagingDetailLevel_High = 2,
        PackagingDetailLevel_Base = 3,
        PackagingDetailLevel_Count = 4,
    }
    class PackagingRule extends FB.Asset {

        /**
         * Creates a new PackagingRule frostbite instance.
         */
        constructor();
        /**
         * Creates a new PackagingRule frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PackagingRule. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PackagingRule. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PackagingRule type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugColor: VUShared.Vec3;
        canTargetSelf: boolean;

    }

    class PadInputActionData extends FB.AxesInputActionData {

        /**
         * Creates a new PadInputActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PadInputActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AxesInputActionData to PadInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AxesInputActionData);
        /**
         * Casts an instance of type InputActionData to PadInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.InputActionData);
        /**
         * Casts an instance of type DataContainer to PadInputActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PadInputActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        button: FB.InputDevicePadButtons;
        pov: FB.InputDevicePOVs;
        pS3AlternativeButton: FB.InputDevicePadButtons;
        useSquareInput: boolean;

    }

    class PadRumbleNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new PadRumbleNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PadRumbleNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to PadRumbleNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to PadRumbleNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PadRumbleNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rumbleHigh: FB.AudioGraphNodePort;
        rumbleLow: FB.AudioGraphNodePort;

    }

    class ParachuteStateData extends FB.CharacterStateData {

        /**
         * Creates a new ParachuteStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ParachuteStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to ParachuteStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to ParachuteStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ParachuteStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        deployTime: number;
        terminalVelocity: number;
        forwardDragCoefficient: number;
        angleOfAttack: number;
        bankOffset: number;
        throttleOffset: number;
        brakeOffset: number;
        maxRollVelocity: number;
        maxPitchVelocity: number;
        maxYawVelocity: number;

    }

    class ParameterFilterLinearNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ParameterFilterLinearNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ParameterFilterLinearNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ParameterFilterLinearNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ParameterFilterLinearNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ParameterFilterLinearNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        attackSpeed: FB.AudioGraphNodePort;
        releaseSpeed: FB.AudioGraphNodePort;

    }

    class ParameterFilterLpNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ParameterFilterLpNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ParameterFilterLpNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ParameterFilterLpNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ParameterFilterLpNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ParameterFilterLpNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        hz: FB.AudioGraphNodePort;

    }

    export enum PartComponentConstants {
        MaxHealthStateCount = 256,
    }
    class PartComponentData extends FB.ComponentData {

        /**
         * Creates a new PartComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PartComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to PartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to PartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PartComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PartComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healthStates: FB.HealthStateData[];
        partLinks: FB.PartLinkData[];
        isSupported: boolean;
        isFragile: boolean;
        isNetworkable: boolean;
        isWindow: boolean;
        animatePhysics: boolean;

    }

    class PartInfoData {

        /**
         * Creates a new PartInfoData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PartInfoData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PartInfoData type.
         */
        static typeInfo: VUShared.TypeInformation;

        aabb: VUShared.AxisAlignedBox;
        translation: VUShared.Vec3;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PartInfoData;

    }

    class PartLinkData extends VUShared.DataContainer {

        /**
         * Creates a new PartLinkData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PartLinkData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PartLinkData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PartLinkData type.
         */
        static typeInfo: VUShared.TypeInformation;

        partComponentIndex1: number;
        partComponentIndex2: number;

    }

    class PathfindingBlob {

        /**
         * Creates a new PathfindingBlob frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingBlob frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PathfindingBlob type.
         */
        static typeInfo: VUShared.TypeInformation;

        blobId: VUShared.Guid;
        blobSize: number;
        chunkSizes: number[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PathfindingBlob;

    }

    class PathfindingBuildOrderData extends FB.VolumeVectorShapeData {

        /**
         * Creates a new PathfindingBuildOrderData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingBuildOrderData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VolumeVectorShapeData to PathfindingBuildOrderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VolumeVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to PathfindingBuildOrderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to PathfindingBuildOrderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to PathfindingBuildOrderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PathfindingBuildOrderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PathfindingBuildOrderData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingBuildOrderData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PathfindingBuildSettingsAsset extends FB.Asset {

        /**
         * Creates a new PathfindingBuildSettingsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingBuildSettingsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PathfindingBuildSettingsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PathfindingBuildSettingsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingBuildSettingsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        entityRadius: number;
        entityHeight: number;
        maxWalkableSlope: number;
        maxStep: number;
        minIslandSurfaceArea: number;
        voxSize: number;
        gridSideLength: number;
        additionalInwardsSmoothingDist: number;
        terrainSamplingStep: number;
        tesselateForPathingAccuracy: boolean;
        useEnhancedTerrainTracking: boolean;
        optimizeForAxisAligned: boolean;
        leaveSmallIslandsTouchingPortals: boolean;

    }

    class PathfindingDebugSettings extends VUShared.DataContainer {

        /**
         * Creates a new PathfindingDebugSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingDebugSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PathfindingDebugSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingDebugSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        typesToDrawMask: number;
        textOffsetY: number;
        textStartX: number;
        textStartY: number;
        replayMode: FB.PathfindingReplayMode;
        drawConnections: boolean;
        drawObstacles: boolean;
        drawPolygonOutline: boolean;
        drawFilledPolygons: boolean;
        drawMemory: boolean;
        drawStats: boolean;
        drawTimings: boolean;
        originalPaths: boolean;
        randomPositions: boolean;
        potentialObstacles: boolean;

    }

    class PathfindingExclusionVolumeData extends FB.OBBData {

        /**
         * Creates a new PathfindingExclusionVolumeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingExclusionVolumeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OBBData to PathfindingExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OBBData);
        /**
         * Casts an instance of type BaseShapeData to PathfindingExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to PathfindingExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PathfindingExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PathfindingExclusionVolumeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingExclusionVolumeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PathfindingObjectCategoryAsset extends FB.Asset {

        /**
         * Creates a new PathfindingObjectCategoryAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingObjectCategoryAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PathfindingObjectCategoryAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PathfindingObjectCategoryAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingObjectCategoryAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PathfindingObjectCategoryRepresentation {

        /**
         * Creates a new PathfindingObjectCategoryRepresentation frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingObjectCategoryRepresentation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PathfindingObjectCategoryRepresentation type.
         */
        static typeInfo: VUShared.TypeInformation;

        category: FB.PathfindingObjectCategoryAsset | undefined;
        representation: FB.PathfindingRepresentation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PathfindingObjectCategoryRepresentation;

    }

    export enum PathfindingReplayMode {
        PathfindingReplayMode_Disabled = 0,
        PathfindingReplayMode_Binary = 1,
        PathfindingReplayMode_Text = 2,
    }
    export enum PathfindingRepresentation {
        PathfindingRepresentation_Ignore = 0,
        PathfindingRepresentation_WalkableMesh = 1,
        PathfindingRepresentation_ObstacleMesh = 2,
        PathfindingRepresentation_ObstacleMeshAndThinSideLink = 3,
        PathfindingRepresentation_BoundingBoxExclusion = 4,
    }
    class PathfindingSandboxAsset extends FB.Asset {

        /**
         * Creates a new PathfindingSandboxAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingSandboxAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PathfindingSandboxAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PathfindingSandboxAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingSandboxAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        system: FB.PathfindingSystemEntityData | undefined;

    }

    export enum PathfindingStreamAndConnect {
        PathfindingStreamAndConnect_Grid = 0,
        PathfindingStreamAndConnect_Manual = 1,
    }
    class PathfindingSystemEntityData extends FB.EntityData {

        /**
         * Creates a new PathfindingSystemEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingSystemEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PathfindingSystemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PathfindingSystemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PathfindingSystemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PathfindingSystemEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingSystemEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pathfindingTypesOnLevel: number[];

    }

    class PathfindingTypeAsset extends FB.Asset {

        /**
         * Creates a new PathfindingTypeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathfindingTypeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PathfindingTypeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PathfindingTypeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathfindingTypeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        index: number;

    }

    class PathFollowingComponentData extends FB.ComponentData {

        /**
         * Creates a new PathFollowingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PathFollowingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to PathFollowingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to PathFollowingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PathFollowingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PathFollowingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PathFollowingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        updatePathAtDistancePercent: number;
        preferredPathfindingIndex: number;
        alternatePathfindingIndices: number[];
        movementCorridorRadius: number;

    }

    class PatrolOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new PatrolOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PatrolOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to PatrolOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to PatrolOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to PatrolOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PatrolOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PatrolOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PatrolOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PatrolOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        typeOfRoute: FB.RouteType;
        combatMode: FB.CombatPatrolMode;
        startingWaypoint: FB.WaypointData | undefined;
        startAtGeometricallyClosestWaypoint: boolean;
        usePathFinding: boolean;

    }

    class PeakingIir2NodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new PeakingIir2NodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PeakingIir2NodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to PeakingIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to PeakingIir2NodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PeakingIir2NodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        frequency: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        q: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class PeerCreateGameParameters {

        /**
         * Creates a new PeerCreateGameParameters frostbite instance.
         */
        constructor();
        /**
         * Creates a new PeerCreateGameParameters frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PeerCreateGameParameters type.
         */
        static typeInfo: VUShared.TypeInformation;

        base: FB.MatchmakingCreateGameParameters;
        playerCapacity: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PeerCreateGameParameters;

    }

    class PeerServerBackendData extends FB.ServerBackendData {

        /**
         * Creates a new PeerServerBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PeerServerBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ServerBackendData to PeerServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ServerBackendData);
        /**
         * Casts an instance of type Asset to PeerServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PeerServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PeerServerBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        createParameters: FB.PeerCreateGameParameters;

    }

    class PerformanceEvent extends FB.MetricEvent {

        /**
         * Creates a new PerformanceEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new PerformanceEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to PerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to PerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PerformanceEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        freeCPUMemory: number;
        cpuAverage: number;
        allocCPUMemory: number;
        freeGPUMemory: number;
        gpuAverage: number;
        drawCallCount: number;
        primitiveCount: number;
        allocGPUMemory: number;
        performanceLocation: string;
        performanceLink: VUShared.Guid;

    }

    class PerformanceFpsHistogram {

        /**
         * Creates a new PerformanceFpsHistogram frostbite instance.
         */
        constructor();
        /**
         * Creates a new PerformanceFpsHistogram frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PerformanceFpsHistogram type.
         */
        static typeInfo: VUShared.TypeInformation;

        below5: number;
        below10: number;
        below15: number;
        below20: number;
        below25: number;
        below30: number;
        below60: number;
        above60: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PerformanceFpsHistogram;

    }

    export enum PerformanceProfilePlatform {
        PPP_Win32 = 0,
        PPP_Xenon = 1,
        PPP_PS3 = 2,
    }
    class PerformanceProfileState extends FB.MetricState {

        /**
         * Creates a new PerformanceProfileState frostbite instance.
         */
        constructor();
        /**
         * Creates a new PerformanceProfileState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricState to PerformanceProfileState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricState);
        /**
         * Casts an instance of type MetricEvent to PerformanceProfileState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to PerformanceProfileState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PerformanceProfileState type.
         */
        static typeInfo: VUShared.TypeInformation;

        processorCount: number;
        processorCoreCount: number;
        processorClock: number;
        totalMemMB: number;
        gpuMemMB: number;
        graphicAdapterName: string;
        platform: string;

    }

    class PerformanceTrackerSettings extends FB.SystemSettings {

        /**
         * Creates a new PerformanceTrackerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new PerformanceTrackerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to PerformanceTrackerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to PerformanceTrackerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PerformanceTrackerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        interval: number;
        enabled: boolean;
        supressPerformanceStatsOnIdle: boolean;
        supressPerformanceStatsUntilSpawned: boolean;
        juiceLogPerformance: boolean;

    }

    class PersistenceConfiguration extends FB.Asset {

        /**
         * Creates a new PersistenceConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PersistenceConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PersistenceConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        statCategoryTreeCollection: FB.StatCategoryTreeCollection | undefined;
        mpProfile: FB.PlayerTypeProfile | undefined;
        spProfile: FB.PlayerTypeProfile | undefined;
        coopProfile: FB.PlayerTypeProfile | undefined;
        pointSystemParams: FB.PointSystemParamsAsset | undefined;
        licenseConfig: FB.LicenseConfiguration | undefined;

    }

    class PersistenceConsumableMapping {

        /**
         * Creates a new PersistenceConsumableMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceConsumableMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PersistenceConsumableMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        group: FB.ConsumableGroup;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PersistenceConsumableMapping;

    }

    class PersistenceData extends FB.AbstractPersistenceData {

        /**
         * Creates a new PersistenceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractPersistenceData to PersistenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractPersistenceData);
        /**
         * Casts an instance of type Asset to PersistenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PersistenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        persistenceName: string;
        clubPersistenceName: string;
        clientDefaultGroup: FB.PersistenceStatGroup | undefined;
        values: FB.PersistentValueTemplateData[];
        customReportValues: FB.CustomReportValueData[];
        serverDefaultGroup: FB.PersistenceStatGroup | undefined;
        retentionPolicy: FB.PersistenceRetentionPolicy | undefined;
        consumableMappings: FB.PersistenceConsumableMapping[];
        historyDaily: boolean;
        historyWeekly: boolean;
        historyMonthly: boolean;
        outputProperties: boolean;
        deltaGameReports: boolean;

    }

    class PersistenceGameData extends FB.Asset {

        /**
         * Creates a new PersistenceGameData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceGameData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PersistenceGameData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PersistenceGameData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceGameData type.
         */
        static typeInfo: VUShared.TypeInformation;

        assets: FB.Asset[];

    }

    export enum PersistenceGameType {
        PersistenceGameType_Singleplayer = 0,
        PersistenceGameType_Cooperative = 1,
        PersistenceGameType_Multiplayer = 2,
        PersistenceGameType_Count = 3,
    }
    class PersistenceRetentionPolicy extends FB.Asset {

        /**
         * Creates a new PersistenceRetentionPolicy frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceRetentionPolicy frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PersistenceRetentionPolicy. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PersistenceRetentionPolicy. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceRetentionPolicy type.
         */
        static typeInfo: VUShared.TypeInformation;

        dailyHistoryCount: number;
        weeklyHistoryCount: number;
        monthlyHistoryCount: number;

    }

    class PersistenceSettings extends FB.SystemSettings {

        /**
         * Creates a new PersistenceSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to PersistenceSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to PersistenceSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        statCategoryTreeCollection: FB.StatCategoryTreeCollection | undefined;
        mpProfile: FB.PlayerTypeProfile | undefined;
        spProfile: FB.PlayerTypeProfile | undefined;
        coopProfile: FB.PlayerTypeProfile | undefined;
        pointSystemParams: FB.PointSystemParamsAsset | undefined;
        licenseConfig: FB.LicenseConfiguration | undefined;

    }

    class PersistenceStatGroup extends VUShared.DataContainer {

        /**
         * Creates a new PersistenceStatGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceStatGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PersistenceStatGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceStatGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        groupName: string;

    }

    class PersistenceStatTable extends VUShared.DataContainer {

        /**
         * Creates a new PersistenceStatTable frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistenceStatTable frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PersistenceStatTable. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistenceStatTable type.
         */
        static typeInfo: VUShared.TypeInformation;

        tableName: string;
        ownerPersistenceData: FB.AbstractPersistenceData | undefined;

    }

    class PersistentAwardDataStatRef extends FB.AbstractPersistentStatRef {

        /**
         * Creates a new PersistentAwardDataStatRef frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistentAwardDataStatRef frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractPersistentStatRef to PersistentAwardDataStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractPersistentStatRef);
        /**
         * Casts an instance of type DataContainer to PersistentAwardDataStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistentAwardDataStatRef type.
         */
        static typeInfo: VUShared.TypeInformation;

        definition: FB.AwardData | undefined;

    }

    class PersistentCriteriaStatRef extends FB.AbstractPersistentStatRef {

        /**
         * Creates a new PersistentCriteriaStatRef frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistentCriteriaStatRef frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractPersistentStatRef to PersistentCriteriaStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractPersistentStatRef);
        /**
         * Casts an instance of type DataContainer to PersistentCriteriaStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistentCriteriaStatRef type.
         */
        static typeInfo: VUShared.TypeInformation;

        criteria: FB.CriteriaData | undefined;
        paramX: FB.StatsCategoryBaseData | undefined;
        paramY: FB.StatsCategoryBaseData | undefined;
        criteriaOwner: FB.AwardData | undefined;

    }

    export enum PersistentValueDataKind {
        PersistentValueDataKind_Raw = 0,
        PersistentValueDataKind_Seconds = 1,
        PersistentValueDataKind_Minutes = 2,
        PersistentValueDataKind_Hours = 3,
        PersistentValueDataKind_Percent = 4,
    }
    export enum PersistentValueDataType {
        PersistentValueDataType_Decimal = 0,
        PersistentValueDataType_Integer = 1,
        PersistentValueDataType_String = 2,
        PersistentValueDataType_HighPrecisionDecimal = 3,
    }
    export enum PersistentValueHistoryType {
        PersistentValueHistoryType_None = 0,
        PersistentValueHistoryType_Delta = 1,
        PersistentValueHistoryType_DeltaAndAbsolute = 2,
        PersistentValueHistoryType_HistoryOnly = 3,
    }
    class PersistentValueTemplate extends VUShared.DataContainer {

        /**
         * Creates a new PersistentValueTemplate frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistentValueTemplate frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PersistentValueTemplate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistentValueTemplate type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: FB.PersistentValueTemplateData;
        derivedFormulaRefs: FB.AbstractPersistentStatRef[];

    }

    class PersistentValueTemplateData {

        /**
         * Creates a new PersistentValueTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistentValueTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PersistentValueTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        defaultValue: string;
        defaultFloatValue: number;
        defaultIntValue: number;
        valueType: FB.PersistentValueType;
        dataType: FB.PersistentValueDataType;
        historyType: FB.PersistentValueHistoryType;
        group: FB.AwardGroup;
        clubStat: boolean;
        forceIntoTemplate: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PersistentValueTemplateData;

    }

    class PersistentValueTemplateStatRef extends FB.AbstractPersistentStatRef {

        /**
         * Creates a new PersistentValueTemplateStatRef frostbite instance.
         */
        constructor();
        /**
         * Creates a new PersistentValueTemplateStatRef frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractPersistentStatRef to PersistentValueTemplateStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractPersistentStatRef);
        /**
         * Casts an instance of type DataContainer to PersistentValueTemplateStatRef. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PersistentValueTemplateStatRef type.
         */
        static typeInfo: VUShared.TypeInformation;

        definition: FB.PersistentValueTemplate | undefined;

    }

    export enum PersistentValueType {
        PersistentValueType_Set = 0,
        PersistentValueType_High = 1,
        PersistentValueType_Low = 2,
        PersistentValueType_Increment = 3,
        PersistentValueType_Decrement = 4,
    }
    export enum PersonViewMode {
        PersonViewMode_FirstPerson = 0,
        PersonViewMode_ThirdPerson = 1,
    }
    class PhantomComponentData extends FB.ComponentData {

        /**
         * Creates a new PhantomComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhantomComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to PhantomComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to PhantomComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PhantomComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PhantomComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhantomComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        boxSize: VUShared.Vec3;
        asyncQueryPointerAsset: FB.AntRef;
        enableTrajectoryOverride: FB.AntRef;
        trajectoryOverride: FB.AntRef;

    }

    class PhysicsConeConstraintData extends FB.PhysicsConstraintData {

        /**
         * Creates a new PhysicsConeConstraintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsConeConstraintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsConstraintData to PhysicsConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsConstraintData);
        /**
         * Casts an instance of type GameObjectData to PhysicsConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PhysicsConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PhysicsConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsConeConstraintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngle: number;
        angularFriction: number;
        maxAngle: number;
        hasLimits: boolean;

    }

    class PhysicsConstraintData extends FB.GameObjectData {

        /**
         * Creates a new PhysicsConstraintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsConstraintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to PhysicsConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PhysicsConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PhysicsConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsConstraintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        constrainedObject: FB.ReferenceObjectData | undefined;
        breakThreshold: number;
        isBreakable: boolean;

    }

    class PhysicsDebugSettings extends VUShared.DataContainer {

        /**
         * Creates a new PhysicsDebugSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsDebugSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PhysicsDebugSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsDebugSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        timingRecursionDepth: number;
        usePhysicsCpuTimers: boolean;
        debugHingeConstraints: boolean;

    }

    class PhysicsDrivenAnimationEntityBinding {

        /**
         * Creates a new PhysicsDrivenAnimationEntityBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsDrivenAnimationEntityBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PhysicsDrivenAnimationEntityBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimLeftRight: FB.AntRef;
        aimUpDown: FB.AntRef;
        crouch: FB.AntRef;
        forceSetTrajectory: FB.AntRef;
        inAir: FB.AntRef;
        skydive: FB.AntRef;
        parachute: FB.AntRef;
        swim: FB.AntRef;
        inputBackward: FB.AntRef;
        inputForward: FB.AntRef;
        inputLeft: FB.AntRef;
        inputRight: FB.AntRef;
        isEnemy: FB.AntRef;
        jump: FB.AntRef;
        leanLeftRight: FB.AntRef;
        prone: FB.AntRef;
        sprint: FB.AntRef;
        groundSupported: FB.AntRef;
        groundNormal: FB.AntRef;
        groundDistance: FB.AntRef;
        groundAngleZ: FB.AntRef;
        groundAngleX: FB.AntRef;
        groundAngleFromNormal: FB.AntRef;
        isClientAnimatable: FB.AntRef;
        customizationScreen: FB.AntRef;
        minimal3pServer: FB.AntRef;
        verticalImpact: FB.AntRef;
        falseSignal: FB.AntRef;
        lockArmsToCameraWeight: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PhysicsDrivenAnimationEntityBinding;

    }

    class PhysicsDrivenAnimationEntityData extends FB.EntityData {

        /**
         * Creates a new PhysicsDrivenAnimationEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsDrivenAnimationEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PhysicsDrivenAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PhysicsDrivenAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PhysicsDrivenAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PhysicsDrivenAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsDrivenAnimationEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        binding: FB.PhysicsDrivenAnimationEntityBinding;
        animationEntitySpacePriority: number;

    }

    class PhysicsEntityData extends FB.EntityData {

        /**
         * Creates a new PhysicsEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PhysicsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inertiaModifier: VUShared.Vec3;
        scaledAssets: FB.HavokAsset[];
        rigidBodies: FB.RigidBodyData[];
        asset: FB.HavokAsset | undefined;
        floatPhysics: FB.FloatPhysicsData | undefined;
        mass: number;
        restitution: number;
        friction: number;
        linearVelocityDamping: number;
        angularVelocityDamping: number;
        proximity: FB.ProximityData | undefined;
        constraints: FB.RigidBodyConstraintData[];
        encapsulatePartsInLists: boolean;
        movableParts: boolean;

    }

    class PhysicsEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new PhysicsEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to PhysicsEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to PhysicsEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        distance: FB.AudioGraphNodePort;
        azimuth: FB.AudioGraphNodePort;
        elevationAngle: FB.AudioGraphNodePort;
        output: FB.OutputNodeData | undefined;

    }

    class PhysicsHingeConstraintData extends FB.PhysicsConstraintData {

        /**
         * Creates a new PhysicsHingeConstraintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsHingeConstraintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PhysicsConstraintData to PhysicsHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PhysicsConstraintData);
        /**
         * Casts an instance of type GameObjectData to PhysicsHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PhysicsHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PhysicsHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsHingeConstraintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngle: number;
        angularFriction: number;
        maxAngle: number;
        hasLimits: boolean;

    }

    class PhysicsMaterialRelationPropertyData extends FB.MaterialRelationPropertyData {

        /**
         * Creates a new PhysicsMaterialRelationPropertyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsMaterialRelationPropertyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MaterialRelationPropertyData to PhysicsMaterialRelationPropertyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to PhysicsMaterialRelationPropertyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsMaterialRelationPropertyData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PhysicsMaterialsRasterData extends FB.RasterQuadtreeData {

        /**
         * Creates a new PhysicsMaterialsRasterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsMaterialsRasterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterQuadtreeData to PhysicsMaterialsRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterQuadtreeData);
        /**
         * Casts an instance of type Asset to PhysicsMaterialsRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PhysicsMaterialsRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsMaterialsRasterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PhysicsNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new PhysicsNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to PhysicsNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to PhysicsNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        distance: FB.AudioGraphNodePort;
        velocity: FB.AudioGraphNodePort;
        relativeVelocity: FB.AudioGraphNodePort;
        azimuth: FB.AudioGraphNodePort;
        elevationAngle: FB.AudioGraphNodePort;
        entries: FB.PhysicsEntry[];

    }

    class PhysicsPartInfo {

        /**
         * Creates a new PhysicsPartInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsPartInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PhysicsPartInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        partComponentIndex: number;
        healthStateIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PhysicsPartInfo;

    }

    class PhysicsPropertyRelationPropertyData extends FB.MaterialRelationPropertyData {

        /**
         * Creates a new PhysicsPropertyRelationPropertyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsPropertyRelationPropertyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MaterialRelationPropertyData to PhysicsPropertyRelationPropertyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MaterialRelationPropertyData);
        /**
         * Casts an instance of type DataContainer to PhysicsPropertyRelationPropertyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsPropertyRelationPropertyData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PhysicsRenderSettings extends VUShared.DataContainer {

        /**
         * Creates a new PhysicsRenderSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsRenderSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PhysicsRenderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsRenderSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        renderSpecificPart: number;
        viewDistance: number;
        renderClient: boolean;
        renderEffectWorld: boolean;
        renderDetail: boolean;
        renderStatic: boolean;
        renderUngrouped: boolean;
        renderRagdoll: boolean;
        renderGroup: boolean;
        renderPhantoms: boolean;
        renderCharacterCollision: boolean;
        renderWater: boolean;
        renderSolidGeometry: boolean;
        useShapeCache: boolean;
        renderConstraints: boolean;
        renderOnlyContactConstraints: boolean;
        renderConstraintCount: boolean;
        renderActiveConstraintCount: boolean;
        renderSimulationIslands: boolean;
        renderBroadphaseHandles: boolean;
        renderDestructionConnections: boolean;
        renderPartBoundingBoxes: boolean;
        renderOnlyBoundingBoxes: boolean;
        renderInertia: boolean;
        renderCenterOfMass: boolean;
        renderLinearVelocity: boolean;
        renderCollidesWithTerrain: boolean;
        renderCollisionSpheres: boolean;
        renderEntityStats: boolean;
        renderWorldStats: boolean;
        showContactsInWorldStats: boolean;
        showInactiveContactsInWorldStats: boolean;
        showPhantomsInWorldStats: boolean;
        showFixedObjectsInWorldStats: boolean;
        renderMemoryUsed: boolean;
        collisionSpawnDebug: boolean;
        renderServer: boolean;

    }

    class PhysicsSettings extends VUShared.DataContainer {

        /**
         * Creates a new PhysicsSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new PhysicsSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PhysicsSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PhysicsSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        integrateJobCount: number;
        clientEffectWorldThreadCount: number;
        clientWorldThreadCount: number;
        serverWorldThreadCount: number;
        collideJobCount: number;
        enable: boolean;
        enableAIRigidBody: boolean;
        forestEnable: boolean;
        enableJobs: boolean;
        removeRagdollWhenWoken: boolean;
        removeFromWorldOnCollisionOverflow: boolean;
        singleStepCharacter: boolean;
        forceSingleStepCharacterInSP: boolean;
        enableFollowWheelRaycasts: boolean;
        enableClientWheelRaycasts: boolean;
        enableASyncWheelRaycasts: boolean;
        useDelayedWakeUpClient: boolean;
        useDelayedWakeUpServer: boolean;
        suppressDebrisSpawnUntilReady: boolean;

    }

    export enum PhysicsWorldType {
        PhysicsWorldType_Client = 0,
        PhysicsWorldType_ClientEffect = 1,
        PhysicsWorldType_Server = 2,
        PhysicsWorldType_Unknown = 100,
    }
    class PickupEntityAsset extends FB.Asset {

        /**
         * Creates a new PickupEntityAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PickupEntityAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PickupEntityAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PickupEntityAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PickupEntityAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: FB.PickupEntityData | undefined;

    }

    class PickupEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new PickupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PickupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PickupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        randomizeAmmoOnDropForPlayer: FB.PickupPlayerEnum;
        minRandomClipAmmoPercent: number;
        physicsBlueprint: FB.ObjectBlueprint | undefined;
        mesh: FB.MeshAsset | undefined;
        maxRandomClipAmmoPercent: number;
        preferredWeaponSlot: number;
        timeToLive: number;
        minRandomSpareAmmoPercent: number;
        interactionRadius: number;
        maxRandomSpareAmmoPercent: number;
        unspawnOnPickup: boolean;
        unspawnOnAmmoPickup: boolean;
        forceWeaponSlotSelection: boolean;
        displayInMiniMap: boolean;
        hasAutomaticAmmoPickup: boolean;
        useWeaponMesh: boolean;
        allowPickup: boolean;
        contentIsStatic: boolean;
        positionIsStatic: boolean;
        ignoreNullWeaponSlots: boolean;
        replaceAllContent: boolean;
        removeWeaponOnDrop: boolean;
        sendPlayerInEventOnPickup: boolean;

    }

    export enum PickupPlayerEnum {
        PickupPlayerEnum_None = 0,
        PickupPlayerEnum_Both = 1,
        PickupPlayerEnum_HumanOnly = 2,
        PickupPlayerEnum_AIOnly = 3,
    }
    class PickupSettingsData {

        /**
         * Creates a new PickupSettingsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PickupSettingsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PickupSettingsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshRenderOffset: VUShared.Vec3;
        meshRenderRotation: VUShared.Vec3;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PickupSettingsData;

    }

    class PitchModifier {

        /**
         * Creates a new PitchModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new PitchModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PitchModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        offset: VUShared.Vec3;
        pitchVal: number;
        pitchAngle: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PitchModifier;

    }

    export enum PixelNormalSpace {
        PnsTangent = 0,
    }
    class PlanarReflectionComponentData extends FB.ComponentData {

        /**
         * Creates a new PlanarReflectionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlanarReflectionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to PlanarReflectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to PlanarReflectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlanarReflectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlanarReflectionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlanarReflectionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        verticalBlurFilter: FB.BlurFilter;
        horizontalDeviation: number;
        groundHeight: number;
        verticalDeviation: number;
        horizontalBlurFilter: FB.BlurFilter;
        skyRenderEnable: boolean;
        enable: boolean;

    }

    class PlatformSplitterEntityData extends FB.EntityData {

        /**
         * Creates a new PlatformSplitterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlatformSplitterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PlatformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlatformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlatformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlatformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlatformSplitterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        runOnce: boolean;

    }

    class PlayerCameraEntityData extends FB.CameraEntityBaseData {

        /**
         * Creates a new PlayerCameraEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerCameraEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CameraEntityBaseData to PlayerCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraEntityBaseData);
        /**
         * Casts an instance of type SpatialEntityData to PlayerCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PlayerCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlayerCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayerCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayerCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerCameraEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soldierTargetMode: FB.TargetMode;
        soldierCameraIndex: number;
        vehicleTargetMode: FB.TargetMode;
        vehicleCameraIndex: number;
        releaseControlIfTargetLost: boolean;
        shouldTargetControllable: boolean;
        shouldTargetVehicleDriverEntry: boolean;
        shouldTargetExtraPlayerInDoublePlayerEvent: boolean;

    }

    class PlayerData extends FB.Asset {

        /**
         * Creates a new PlayerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PlayerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PlayerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        playerView: FB.PlayerViewData | undefined;
        inputConceptDefinition: FB.EntryInputActionMapsData | undefined;
        inputMapping: FB.InputActionMappingsData | undefined;

    }

    class PlayerEntryComponentData extends FB.EntryComponentData {

        /**
         * Creates a new PlayerEntryComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerEntryComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntryComponentData to PlayerEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntryComponentData);
        /**
         * Casts an instance of type ComponentData to PlayerEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to PlayerEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayerEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayerEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerEntryComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animationAccelerationMultiplier: VUShared.Vec3;
        antEntryId: FB.AntEntryIdEnum;
        antEntryID: string;
        antEntryEnumeration: FB.AntEnumeration | undefined;
        shieldedTransitionExitTime: number;

    }

    class PlayerFilterEntityData extends FB.EntityData {

        /**
         * Creates a new PlayerFilterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerFilterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PlayerFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlayerFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayerFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayerFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerFilterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        invertFilter: boolean;
        forwardToSpectators: boolean;

    }

    class PlayerInputTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new PlayerInputTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerInputTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PlayerInputTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlayerInputTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayerInputTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayerInputTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerInputTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        entryInputActions: FB.EntryInputActionEnum;
        valueModifier: number;
        trailingValueAtStart: number;
        accumulatedValueAtStart: number;
        sendTriggerEvents: boolean;
        enabledFromStart: boolean;

    }

    class PlayerInteractionViewData extends FB.SubViewData {

        /**
         * Creates a new PlayerInteractionViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerInteractionViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubViewData to PlayerInteractionViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubViewData);
        /**
         * Casts an instance of type DataContainer to PlayerInteractionViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerInteractionViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum PlayerKilledWeaponType {
        PlayerKilledWeaponType_Unknown = 0,
        PlayerKilledWeaponType_HandheldWeapon = 1,
        PlayerKilledWeaponType_Vehicle = 2,
        PlayerKilledWeaponType_Count = 3,
    }
    class PlayerLookAtEntityData extends FB.EntityData {

        /**
         * Creates a new PlayerLookAtEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerLookAtEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PlayerLookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlayerLookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayerLookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayerLookAtEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerLookAtEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        targetTransform: VUShared.LinearTransform;

    }

    class PlayerOrderTrackerData extends FB.HudTrackerData {

        /**
         * Creates a new PlayerOrderTrackerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerOrderTrackerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type HudTrackerData to PlayerOrderTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.HudTrackerData);
        /**
         * Casts an instance of type UIPartData to PlayerOrderTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIPartData);
        /**
         * Casts an instance of type DataContainer to PlayerOrderTrackerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerOrderTrackerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        attackIcon: FB.UIHudIcon;
        defendIcon: FB.UIHudIcon;
        moveToIcon: FB.UIHudIcon;

    }

    export enum PlayerRole {
        PRSquadLeader = 0,
        PRSquadMember = 1,
        PRUnknown = 2,
    }
    class PlayerScore {

        /**
         * Creates a new PlayerScore frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerScore frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PlayerScore type.
         */
        static typeInfo: VUShared.TypeInformation;

        rank: number;
        kills: number;
        deaths: number;
        scoreMultiplier: number;
        score: number;
        globalScoreOriginal: number;
        globalScoreUpdated: number;
        time: number;
        gunMasterLevel: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PlayerScore;

    }

    export enum PlayerSpawnType {
        PlayerSpawnType_HumanPlayer = 0,
        PlayerSpawnType_AiPlayer = 1,
        PlayerSpawnType_Actor = 2,
    }
    class PlayerState extends FB.MetricState {

        /**
         * Creates a new PlayerState frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricState to PlayerState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricState);
        /**
         * Casts an instance of type MetricEvent to PlayerState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to PlayerState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerState type.
         */
        static typeInfo: VUShared.TypeInformation;

        onlineId: number;

    }

    class PlayerTakeOverTriggerEntityData extends FB.GameEntityData {

        /**
         * Creates a new PlayerTakeOverTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerTakeOverTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to PlayerTakeOverTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to PlayerTakeOverTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PlayerTakeOverTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlayerTakeOverTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayerTakeOverTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayerTakeOverTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerTakeOverTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        teamId: FB.TeamId;
        timeToLoseControl: number;

    }

    class PlayerTypeProfile extends FB.Asset {

        /**
         * Creates a new PlayerTypeProfile frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerTypeProfile frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PlayerTypeProfile. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PlayerTypeProfile. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerTypeProfile type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: FB.PersistenceData | undefined;
        awards: FB.AwardDataTree | undefined;
        rankParams: FB.RankParamsAsset | undefined;
        scoring: FB.ScoringData | undefined;
        dogTags: FB.DogTagsAsset | undefined;
        eloParams: FB.EloParameters;
        staticUnlocks: FB.StaticUnlockList | undefined;
        spamSettings: FB.StatSpamSettings | undefined;
        orderedUnlockNames: string[];

    }

    class PlayerViewData extends VUShared.DataContainer {

        /**
         * Creates a new PlayerViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayerViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PlayerViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayerViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

        subViews: FB.SubViewData[];

    }

    class PlayFromHereAsset extends FB.Asset {

        /**
         * Creates a new PlayFromHereAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayFromHereAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PlayFromHereAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PlayFromHereAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayFromHereAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        soldier: FB.Blueprint | undefined;
        animatedSkeletonDatabase: FB.AnimatedSkeletonDatabase | undefined;
        antProject: FB.AntProjectAsset | undefined;

    }

    class PlayVideoEntityData extends FB.EntityData {

        /**
         * Creates a new PlayVideoEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PlayVideoEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PlayVideoEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PlayVideoEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PlayVideoEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PlayVideoEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PlayVideoEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        movie: FB.MovieTextureAsset | undefined;
        keepBlackScreen: boolean;
        allowSkip: boolean;

    }

    export enum PointCloudAttributeQuantization {
        PointCloudAttributeQuantization_s5e5 = 0,
        PointCloudAttributeQuantization_s7e5 = 1,
        PointCloudAttributeQuantization_s10e5 = 2,
        PointCloudAttributeQuantization_s16e7 = 3,
        PointCloudAttributeQuantization_None = 4,
        PointCloudAttributeQuantization_Count = 5,
    }
    export enum PointCloudAttributeUsage {
        PointCloudAttributeUsage_Position = 0,
        PointCloudAttributeUsage_Normal = 1,
        PointCloudAttributeUsage_Tangent = 2,
        PointCloudAttributeUsage_Binormal = 3,
        PointCloudAttributeUsage_Count = 4,
    }
    class PointEnvelope extends VUShared.DataContainer {

        /**
         * Creates a new PointEnvelope frostbite instance.
         */
        constructor();
        /**
         * Creates a new PointEnvelope frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PointEnvelope. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PointEnvelope type.
         */
        static typeInfo: VUShared.TypeInformation;

        points: FB.PointEnvelopePoint[];

    }

    class PointEnvelopePoint {

        /**
         * Creates a new PointEnvelopePoint frostbite instance.
         */
        constructor();
        /**
         * Creates a new PointEnvelopePoint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PointEnvelopePoint type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: number;
        y: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PointEnvelopePoint;

    }

    class PointLightEntityData extends FB.LocalLightEntityData {

        /**
         * Creates a new PointLightEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PointLightEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LocalLightEntityData to PointLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LocalLightEntityData);
        /**
         * Casts an instance of type SpatialEntityData to PointLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PointLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PointLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PointLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PointLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PointLightEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        width: number;
        translucencyAmbient: number;
        translucencyScale: number;
        translucencyPower: number;
        translucencyDistortion: number;

    }

    class PointSystemParamsAsset extends FB.Asset {

        /**
         * Creates a new PointSystemParamsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new PointSystemParamsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PointSystemParamsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PointSystemParamsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PointSystemParamsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        multiKillTimeLimit: number;
        dnfTimeout: number;
        killStreakX: number;
        nemesisKillX: number;
        freefallHeight: number;

    }

    class PointTargetData extends FB.SpatialEntityData {

        /**
         * Creates a new PointTargetData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PointTargetData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to PointTargetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PointTargetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PointTargetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PointTargetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PointTargetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PointTargetData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PoissonRadialBlurData {

        /**
         * Creates a new PoissonRadialBlurData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PoissonRadialBlurData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PoissonRadialBlurData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poissonDiscScale: VUShared.Vec2;
        blendFactor: number;
        radialScale: number;
        radialExponent: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PoissonRadialBlurData;

    }

    class PolynomialColorInterpData extends FB.EvaluatorData {

        /**
         * Creates a new PolynomialColorInterpData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PolynomialColorInterpData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to PolynomialColorInterpData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to PolynomialColorInterpData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to PolynomialColorInterpData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PolynomialColorInterpData type.
         */
        static typeInfo: VUShared.TypeInformation;

        color0: VUShared.Vec3;
        color1: VUShared.Vec3;
        coefficients: VUShared.Vec4;

    }

    class PolynomialData extends FB.EvaluatorData {

        /**
         * Creates a new PolynomialData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PolynomialData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to PolynomialData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to PolynomialData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to PolynomialData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PolynomialData type.
         */
        static typeInfo: VUShared.TypeInformation;

        coefficients: VUShared.Vec4;
        scaleValue: number;
        minClamp: number;
        maxClamp: number;

    }

    export enum PolynomialOperation {
        Multiplication = 0,
        Addition = 1,
        Subtraction = 2,
    }
    class PolynomialOperatorData extends FB.EvaluatorData {

        /**
         * Creates a new PolynomialOperatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PolynomialOperatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to PolynomialOperatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to PolynomialOperatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to PolynomialOperatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PolynomialOperatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        firstOperand: FB.PolynomialTempData;
        secondOperand: FB.PolynomialTempData;
        operation: FB.PolynomialOperation;
        minClampResult: number;
        maxClampResult: number;

    }

    class PolynomialTempData {

        /**
         * Creates a new PolynomialTempData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PolynomialTempData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PolynomialTempData type.
         */
        static typeInfo: VUShared.TypeInformation;

        coefficients: VUShared.Vec4;
        scaleValue: number;
        minClamp: number;
        maxClamp: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PolynomialTempData;

    }

    class PoseConstraintsData {

        /**
         * Creates a new PoseConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PoseConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PoseConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        standPose: boolean;
        crouchPose: boolean;
        pronePose: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PoseConstraintsData;

    }

    export enum PoseTransition {
        PTStandToProne = 0,
        PTStandToCrouch = 1,
        PTCrouchToStand = 2,
        PTCrouchToProne = 3,
        PTProneToStand = 4,
        PTProneToCrouch = 5,
    }
    class PoseTransitionTime {

        /**
         * Creates a new PoseTransitionTime frostbite instance.
         */
        constructor();
        /**
         * Creates a new PoseTransitionTime frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PoseTransitionTime type.
         */
        static typeInfo: VUShared.TypeInformation;

        toPose: FB.CharacterPoseType;
        transitionTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PoseTransitionTime;

    }

    export enum PoseType {
        PoseType_Current = 0,
        PoseType_Stand = 1,
        PoseType_Crouch = 2,
    }
    class PositionEvaluationConstantData extends FB.Asset {

        /**
         * Creates a new PositionEvaluationConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PositionEvaluationConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PositionEvaluationConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PositionEvaluationConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PositionEvaluationConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        ownRandomPositionsRadius: number;
        leaderRandomPositionsRadius: number;

    }

    export enum PostProcessDebugMode {
        PpdmDefault = 0,
        PpdmBloom = 1,
        PpdmBloomStep = 2,
        PpdmDofBlur = 3,
        PpdmBlur = 4,
        PpdmBlurStep = 5,
        PpdmDepth = 6,
    }
    class PowerToolWeaponData extends FB.WeaponData {

        /**
         * Creates a new PowerToolWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PowerToolWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to PowerToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to PowerToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to PowerToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PowerToolWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        repairSound: FB.SoundAsset | undefined;
        repairCompletedSound: FB.SoundAsset | undefined;
        damageSound: FB.SoundAsset | undefined;
        repairMaterialPair: FB.MaterialContainerPair | undefined;
        playFireEffectOnRepairOnly: boolean;

    }

    class PrecomputeCache {

        /**
         * Creates a new PrecomputeCache frostbite instance.
         */
        constructor();
        /**
         * Creates a new PrecomputeCache frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PrecomputeCache type.
         */
        static typeInfo: VUShared.TypeInformation;

        guid: VUShared.Guid;
        key: string;
        cachedDataEnable: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PrecomputeCache;

    }

    class PredestructionEntityData extends FB.GameEntityData {

        /**
         * Creates a new PredestructionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PredestructionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to PredestructionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to PredestructionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PredestructionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PredestructionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PredestructionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PredestructionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PredestructionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        radius: number;

    }

    class PrefabBlueprint extends FB.Blueprint {

        /**
         * Creates a new PrefabBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new PrefabBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Blueprint to PrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to PrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to PrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to PrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PrefabBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

        objects: FB.GameObjectData[];

    }

    class PreRoundEntityData extends FB.GameEntityData {

        /**
         * Creates a new PreRoundEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PreRoundEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to PreRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to PreRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to PreRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PreRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PreRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PreRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PreRoundEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        roundMaxPlayerCount: number;
        roundRestartCountdown: number;
        roundMinPlayerCount: number;

    }

    class PresenceAchievementServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceAchievementServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceAchievementServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceAchievementServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceAchievementServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceAchievementServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceAchievementServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceBackendData extends FB.Asset {

        /**
         * Creates a new PresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        requests: FB.PresenceRequest[];

    }

    class PresenceBlobServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceBlobServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceBlobServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceBlobServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceBlobServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceBlobServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceBlobServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceCalendarServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceCalendarServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceCalendarServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceCalendarServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceCalendarServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceCalendarServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceCalendarServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceCommerceServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceCommerceServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceCommerceServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceCommerceServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceCommerceServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceCommerceServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceCommerceServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceCommServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceCommServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceCommServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceCommServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceCommServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceCommServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceCommServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceEntitlementServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceEntitlementServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceEntitlementServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceEntitlementServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceEntitlementServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceEntitlementServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceEntitlementServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceFriendsServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceFriendsServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceFriendsServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceFriendsServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceFriendsServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceFriendsServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceFriendsServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceGameConfigurationServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceGameConfigurationServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceGameConfigurationServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceGameConfigurationServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceGameConfigurationServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceGameConfigurationServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceGameConfigurationServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        configUrl: FB.OnlineEnvironmentConsoleUrl;

    }

    class PresenceLeaderboardServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceLeaderboardServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceLeaderboardServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceLeaderboardServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceLeaderboardServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceLeaderboardServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceLeaderboardServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceMatchFeedServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceMatchFeedServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceMatchFeedServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceMatchFeedServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceMatchFeedServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceMatchFeedServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceMatchFeedServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceNewsTickerServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceNewsTickerServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceNewsTickerServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceNewsTickerServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceNewsTickerServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceNewsTickerServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceNewsTickerServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresencePlaygroupServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresencePlaygroupServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresencePlaygroupServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresencePlaygroupServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresencePlaygroupServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresencePlaygroupServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresencePlaygroupServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum PresenceRequest {
        PresenceRequest_Invalid = 0,
        PresenceRequest_DownloadBlob = 1,
        PresenceRequest_UploadBlob = 2,
        PresenceRequest_DownloadUserSettings = 3,
        PresenceRequest_UploadUserSettings = 4,
        PresenceRequest_InitializeCommerceService = 5,
        PresenceRequest_ShutDownCommerceService = 6,
        PresenceRequest_EnumerateCommerceContent = 7,
        PresenceRequest_PurchaseCommerceContent = 8,
        PresenceRequest_PurchaseConsumableCommerceContent = 9,
        PresenceRequest_ConsumeCommerceContent = 10,
        PresenceRequest_GetCommerceContentImage = 11,
        PresenceRequest_CheckOnlinePass = 12,
        PresenceRequest_PurchaseOnlinePass = 13,
        PresenceRequest_RedeemOnlinePassCode = 14,
        PresenceRequest_SetOverlayUrl = 15,
        PresenceRequest_ListEntitlements = 16,
        PresenceRequest_GrantEntitlement = 17,
        PresenceRequest_GetFriends = 18,
        PresenceRequest_InviteFriend = 19,
        PresenceRequest_RemoveFriend = 20,
        PresenceRequest_HttpGet = 21,
        PresenceRequest_JoinGameByOnlineNativeData = 22,
        PresenceRequest_DownloadUpdate = 23,
        PresenceRequest_SendMessage = 24,
        PresenceRequest_CreatePlaygroup = 25,
        PresenceRequest_JoinPlaygroup = 26,
        PresenceRequest_JoinPlaygroupByUsername = 27,
        PresenceRequest_JoinPlaygroupByOnlineNativeData = 28,
        PresenceRequest_JoinPlaygroupByInviteToken = 29,
        PresenceRequest_SetPlaygroupAttribute = 30,
        PresenceRequest_LeavePlaygroup = 31,
        PresenceRequest_DownloadStatistics = 32,
        PresenceRequest_GetLeaderboard = 33,
        PresenceRequest_UploadProgression = 34,
        PresenceRequest_SendInvite = 35,
        PresenceRequest_KickFromPlaygroup = 36,
        PresenceRequest_ViewInvite = 37,
        PresenceRequest_SendInviteToLiveParty = 38,
        PresenceRequest_SetUserInfoAttribute = 39,
        PresenceRequest_GetServerBrowserSnapshot = 40,
        PresenceRequest_GetGamesWithFriends = 41,
        PresenceRequest_GetGamesByServerId = 42,
        PresenceRequest_GetDetailedServerInfo = 43,
        PresenceRequest_UnlockAchievements = 44,
        PresenceRequest_RspGetServers = 45,
        PresenceRequest_RspGetServerDetails = 46,
        PresenceRequest_RspUpdateServerSettings = 47,
        PresenceRequest_RspGetConfig = 48,
        PresenceRequest_RspRestartServer = 49,
        PresenceRequest_RspUpdatePreset = 50,
        PresenceRequest_RspUpdateMapRotation = 51,
        PresenceRequest_RspUpdateAdminUser = 52,
        PresenceRequest_RspUpdateBannedUser = 53,
        PresenceRequest_RspUpdateVipUser = 54,
        PresenceRequest_RspUpdateServerBanner = 55,
        PresenceRequest_ReportServerBanner = 56,
        PresenceRequest_GetUserId = 57,
        PresenceRequest_VerifyGrantEntitlement = 58,
        PresenceRequest_ResetStatistics = 59,
        PresenceRequest_GetXPromoInformation = 60,
        PresenceRequest_GetContentInformation = 61,
        PresenceRequest_DownloadPromoItem = 62,
        PresenceRequest_Count = 63,
    }
    class PresenceRspServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceRspServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceRspServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceRspServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceRspServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceRspServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceRspServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceServerBrowserServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceServerBrowserServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceServerBrowserServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceServerBrowserServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceServerBrowserServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceServerBrowserServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceServerBrowserServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        filterCriterias: FB.MatchmakingCriteria;
        listCapacity: number;

    }

    class PresenceServiceData extends FB.Asset {

        /**
         * Creates a new PresenceServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to PresenceServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceStatisticsServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceStatisticsServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceStatisticsServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceStatisticsServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceStatisticsServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceStatisticsServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceStatisticsServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceUserIdServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceUserIdServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceUserIdServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceUserIdServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceUserIdServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceUserIdServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceUserIdServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceWebFeedServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceWebFeedServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceWebFeedServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceWebFeedServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceWebFeedServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceWebFeedServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceWebFeedServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresenceXPromoServiceData extends FB.PresenceServiceData {

        /**
         * Creates a new PresenceXPromoServiceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresenceXPromoServiceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceServiceData to PresenceXPromoServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceServiceData);
        /**
         * Casts an instance of type Asset to PresenceXPromoServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to PresenceXPromoServiceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PresenceXPromoServiceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class PresetTypeConfig {

        /**
         * Creates a new PresetTypeConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new PresetTypeConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PresetTypeConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        presetId: number;
        key: string;
        nameSid: string;
        descSid: string;
        lockedSettings: FB.LockedSettingConfig[];
        predefined: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PresetTypeConfig;

    }

    export enum PrimitiveType {
        PrimitiveType_PointList = 0,
        PrimitiveType_LineList = 1,
        PrimitiveType_LineStrip = 2,
        PrimitiveType_TriangleList = 3,
        PrimitiveType_TriangleStrip = 5,
        PrimitiveType_QuadList = 7,
        PrimitiveType_XenonRectList = 8,
    }
    class PrintDebugTextEntityData extends FB.EntityData {

        /**
         * Creates a new PrintDebugTextEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PrintDebugTextEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PrintDebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PrintDebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PrintDebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PrintDebugTextEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PrintDebugTextEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        textColor: VUShared.Vec3;
        realm: FB.Realm;
        text: string;
        enabled: boolean;

    }

    class ProceduralAwarenessAntRefs extends VUShared.DataContainer {

        /**
         * Creates a new ProceduralAwarenessAntRefs frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProceduralAwarenessAntRefs frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ProceduralAwarenessAntRefs. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProceduralAwarenessAntRefs type.
         */
        static typeInfo: VUShared.TypeInformation;

        proceduralAwarenessActive: FB.AntRef;
        proceduralAwarenessHumanIKActive: FB.AntRef;
        proceduralAwarenessData: FB.AntRef;

    }

    class ProcessorData extends FB.EmitterComponentData {

        /**
         * Creates a new ProcessorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProcessorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EmitterComponentData to ProcessorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to ProcessorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProcessorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValues: VUShared.Vec4;
        nextProcessor: FB.ProcessorData | undefined;
        pre: FB.EmitterComponentData | undefined;
        evaluatorInput: FB.EmittableField;
        enable: boolean;

    }

    export enum ProcessorType {
        PtBaseEmitter = 0,
        PtSpawnRate = 1,
        PtSpawnSpeed = 2,
        PtSpawnPosition = 3,
        PtSpawnDirection = 4,
        PtSpawnSize = 5,
        PtSpawnAnimation = 6,
        PtSpawnAnimationFrame = 7,
        PtSpawnRotation = 8,
        PtSpawnOrientation = 9,
        PtSpawnRotationSpeed = 10,
        PtUpdatePosition = 11,
        PtUpdateAge = 12,
        PtTurbulance = 13,
        PtGravity = 14,
        PtLocalForce = 15,
        PtAirResistance = 16,
        PtUpdateLinearVelocity = 17,
        PtUpdateOrientation = 18,
        PtEmitter = 19,
        PtUpdateColor = 20,
        PtUpdateColorLeaf = 21,
        PtUpdateTransparency = 22,
        PtUpdateTextureCoords = 23,
        PtUpdateRotation = 24,
        PtUpdateSizeX = 25,
        PtUpdateSizeY = 26,
        PtUpdateSizeZ = 27,
        PtUpdateSize = 28,
        PtUpdateAlphaLevelMin = 29,
        PtUpdateAlphaLevelMax = 30,
        PtUpdateAlphaLevelScale = 31,
        PtUpdateClipScale = 32,
        PtUpdateCameraProximity = 33,
        ProcessorTypeCount = 34,
    }
    class ProfileEntityData extends FB.EntityData {

        /**
         * Creates a new ProfileEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ProfileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ProfileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ProfileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ProfileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        profileName: string;

    }

    class ProfileOptionData extends FB.Asset {

        /**
         * Creates a new ProfileOptionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ProfileOptionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        uniqueId: string;
        category: FB.ProfileOptionsType;

    }

    class ProfileOptionDataBinary extends FB.ProfileOptionData {

        /**
         * Creates a new ProfileOptionDataBinary frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataBinary frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProfileOptionData to ProfileOptionDataBinary. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProfileOptionData);
        /**
         * Casts an instance of type Asset to ProfileOptionDataBinary. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionDataBinary. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionDataBinary type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxLength: number;

    }

    class ProfileOptionDataBool extends FB.ProfileOptionData {

        /**
         * Creates a new ProfileOptionDataBool frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataBool frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProfileOptionData to ProfileOptionDataBool. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProfileOptionData);
        /**
         * Casts an instance of type Asset to ProfileOptionDataBool. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionDataBool. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionDataBool type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: boolean;

    }

    class ProfileOptionDataEnum extends FB.ProfileOptionData {

        /**
         * Creates a new ProfileOptionDataEnum frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataEnum frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProfileOptionData to ProfileOptionDataEnum. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProfileOptionData);
        /**
         * Casts an instance of type Asset to ProfileOptionDataEnum. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionDataEnum. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionDataEnum type.
         */
        static typeInfo: VUShared.TypeInformation;

        items: FB.ProfileOptionDataEnumItem[];

    }

    class ProfileOptionDataEnumItem {

        /**
         * Creates a new ProfileOptionDataEnumItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataEnumItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ProfileOptionDataEnumItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        displayName: string;
        default: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ProfileOptionDataEnumItem;

    }

    class ProfileOptionDataFloat extends FB.ProfileOptionData {

        /**
         * Creates a new ProfileOptionDataFloat frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataFloat frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProfileOptionData to ProfileOptionDataFloat. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProfileOptionData);
        /**
         * Casts an instance of type Asset to ProfileOptionDataFloat. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionDataFloat. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionDataFloat type.
         */
        static typeInfo: VUShared.TypeInformation;

        min: number;
        max: number;
        value: number;
        step: number;

    }

    class ProfileOptionDataInt extends FB.ProfileOptionData {

        /**
         * Creates a new ProfileOptionDataInt frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataInt frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProfileOptionData to ProfileOptionDataInt. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProfileOptionData);
        /**
         * Casts an instance of type Asset to ProfileOptionDataInt. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionDataInt. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionDataInt type.
         */
        static typeInfo: VUShared.TypeInformation;

        min: number;
        max: number;
        value: number;
        step: number;

    }

    class ProfileOptionDataString extends FB.ProfileOptionData {

        /**
         * Creates a new ProfileOptionDataString frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionDataString frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProfileOptionData to ProfileOptionDataString. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProfileOptionData);
        /**
         * Casts an instance of type Asset to ProfileOptionDataString. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionDataString. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionDataString type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxLength: number;
        value: string;

    }

    class ProfileOptionsAsset extends FB.Asset {

        /**
         * Creates a new ProfileOptionsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProfileOptionsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ProfileOptionsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProfileOptionsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProfileOptionsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        fileName: string;
        contentName: string;
        fileSize: number;
        options: FB.ProfileOptionData[];
        autoSaveOnQuit: boolean;

    }

    export enum ProfileOptionsType {
        GstAudio = 0,
        GstRender = 1,
        GstInput = 2,
        GstAI = 3,
        GstGameplay = 4,
        GstPlayerProfile = 5,
        GstPersistence = 6,
        GstBinary = 7,
        GstKeyBinding = 8,
        GstCount = 9,
    }
    export enum ProgressType {
        PT_CapturePointCooldown = 0,
    }
    class ProjectileBlueprint extends FB.ObjectBlueprint {

        /**
         * Creates a new ProjectileBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProjectileBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ObjectBlueprint to ProjectileBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to ProjectileBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to ProjectileBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to ProjectileBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to ProjectileBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ProjectileBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProjectileBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ProjectileEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new ProjectileEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProjectileEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProjectileEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        visualConvergeDistance: number;
        initialSpeed: number;
        timeToLive: number;
        maxCount: number;
        initMeshHideTime: number;
        materialPair: FB.MaterialContainerPair | undefined;
        hitReactionWeaponType: FB.AntHitReactionWeaponType;
        explosion: FB.ExplosionEntityData | undefined;
        suppressionData: FB.WeaponSuppressionData | undefined;
        ammunitionType: string;
        serverProjectileDisabled: boolean;
        detonateOnTimeout: boolean;
        suppressOwnerVehicleDamage: boolean;

    }

    class PropellerEngineConfigData extends FB.EngineConfigData {

        /**
         * Creates a new PropellerEngineConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropellerEngineConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EngineConfigData to PropellerEngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EngineConfigData);
        /**
         * Casts an instance of type DataContainer to PropellerEngineConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PropellerEngineConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        horisontalForceOffset: VUShared.Vec3;
        propellerType: FB.PropellerType;
        rotorConfig: FB.RotorParameters | undefined;
        forceMagnitudeInputType: FB.ForceMagnitudeInputType;
        directionVectorIndex: number;
        forceMagnitudeMultiplier: number;
        liftForceSpringConstant: number;
        liftForceDampingConstant: number;
        cyclicInputScaleRoll: number;
        cyclicRollLiftMod: number;
        cyclicRollStrafeMod: number;
        cyclicInputScalePitch: number;
        cyclicPitchLiftMod: number;
        cyclicPitchStrafeMod: number;
        cyclicPitchStrafeBrakeMod: number;
        collectiveInputIdle: number;
        collectiveThrottleInputScale: number;
        collectiveBrakeInputScale: number;
        defaultAngleOfAttack: number;
        attackAngleMod: number;
        stabilizerMod: number;
        horisontalMinEffectVelocity: number;
        horisontalMinEffectMod: number;
        pitchStrength: number;
        pitchFromVel: number;
        gravityMod: number;
        spForwardStrength: number;
        spSidewaysStrength: number;
        spVerticalStrength: number;
        velocityFromPitch: number;
        pitchLimit: number;
        bankingStrength: number;
        bankingLimit: number;
        rollStrength: number;
        pitchUpWhenBankStrength: number;
        pitchUpWhenBankLimit: number;
        spDefault: boolean;
        enableNewHelicopter: boolean;
        spAllowed: boolean;

    }

    export enum PropellerType {
        PropellerType_Regular = 0,
        PropellerType_Rotor = 1,
    }
    class PropertyCastEntityData extends FB.EntityData {

        /**
         * Creates a new PropertyCastEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropertyCastEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PropertyCastEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PropertyCastEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PropertyCastEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PropertyCastEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PropertyCastEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        intValue: number;
        floatValue: number;
        boolValue: boolean;

    }

    class PropertyConnection {

        /**
         * Creates a new PropertyConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropertyConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the PropertyConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: VUShared.DataContainer | undefined;
        target: VUShared.DataContainer | undefined;
        sourceFieldId: number;
        targetFieldId: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.PropertyConnection;

    }

    class PropertyDebugEntityData extends FB.EntityData {

        /**
         * Creates a new PropertyDebugEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropertyDebugEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PropertyDebugEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PropertyDebugEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PropertyDebugEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PropertyDebugEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PropertyDebugEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vec3Value: VUShared.Vec3;
        textColor: VUShared.Vec3;
        screenPosition: VUShared.Vec2;
        transformValue: VUShared.LinearTransform;
        vec2Value: VUShared.Vec2;
        valuePrefix: string;
        realm: FB.Realm;
        floatValue: number;
        intValue: number;
        textScale: number;
        stringValue: string;
        defaultVisible: boolean;
        boolValue: boolean;
        multiline: boolean;

    }

    class PropertyGateEntityData extends FB.EntityData {

        /**
         * Creates a new PropertyGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropertyGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to PropertyGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to PropertyGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to PropertyGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to PropertyGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PropertyGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transformIn: VUShared.LinearTransform;
        vec4In: VUShared.Vec4;
        vec3In: VUShared.Vec3;
        realm: FB.Realm;
        floatIn: number;
        intIn: number;
        boolIn: boolean;
        default: boolean;

    }

    class PropertyRecordingData extends VUShared.DataContainer {

        /**
         * Creates a new PropertyRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropertyRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PropertyRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PropertyRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;

    }

    class PropertyTrackData extends VUShared.DataContainer {

        /**
         * Creates a new PropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new PropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;
        times: number[];

    }

    class ProximityData extends VUShared.DataContainer {

        /**
         * Creates a new ProximityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ProximityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ProximityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ProximityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        proximityType: FB.ProximityObjectType;

    }

    export enum ProximityObjectType {
        PotProximityDisabled = 0,
        PotVaultableLow = 1,
        PotVaultableHigh = 2,
        PotSupportedShooting = 3,
        PotInteractWith = 4,
        PotBashable = 5,
    }
    class Ps3AgeLevels {

        /**
         * Creates a new Ps3AgeLevels frostbite instance.
         */
        constructor();
        /**
         * Creates a new Ps3AgeLevels frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Ps3AgeLevels type.
         */
        static typeInfo: VUShared.TypeInformation;

        ageLevel7: number;
        ageLevel8: number;
        ageLevel9: number;
        ageLevel10: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Ps3AgeLevels;

    }

    class Ps3ParentalLockAgeSettings {

        /**
         * Creates a new Ps3ParentalLockAgeSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new Ps3ParentalLockAgeSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Ps3ParentalLockAgeSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        region: string;
        ageLevels: FB.Ps3AgeLevels;
        countryOverrides: FB.Ps3ParentalLockAgeSettingsOverrides | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Ps3ParentalLockAgeSettings;

    }

    class Ps3ParentalLockAgeSettingsForCountry {

        /**
         * Creates a new Ps3ParentalLockAgeSettingsForCountry frostbite instance.
         */
        constructor();
        /**
         * Creates a new Ps3ParentalLockAgeSettingsForCountry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Ps3ParentalLockAgeSettingsForCountry type.
         */
        static typeInfo: VUShared.TypeInformation;

        countryCode: string;
        ageLevels: FB.Ps3AgeLevels;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Ps3ParentalLockAgeSettingsForCountry;

    }

    class Ps3ParentalLockAgeSettingsOverrides extends VUShared.DataContainer {

        /**
         * Creates a new Ps3ParentalLockAgeSettingsOverrides frostbite instance.
         */
        constructor();
        /**
         * Creates a new Ps3ParentalLockAgeSettingsOverrides frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to Ps3ParentalLockAgeSettingsOverrides. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Ps3ParentalLockAgeSettingsOverrides type.
         */
        static typeInfo: VUShared.TypeInformation;

        overrides: FB.Ps3ParentalLockAgeSettingsForCountry[];

    }

    class Ps3PresenceBackendData extends FB.PresenceBackendData {

        /**
         * Creates a new Ps3PresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Ps3PresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceBackendData to Ps3PresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceBackendData);
        /**
         * Casts an instance of type Asset to Ps3PresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to Ps3PresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Ps3PresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        communicationId: string;
        communicationSignature: string;
        skuSettings: FB.Ps3SkuSettings[];
        parentalLockAgeSettings: FB.Ps3ParentalLockAgeSettings[];

    }

    class Ps3SkuSettings {

        /**
         * Creates a new Ps3SkuSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new Ps3SkuSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Ps3SkuSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        titleId: string;
        spId: string;
        grantsOnlinePass: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Ps3SkuSettings;

    }

    class PS3StoreImageHD1080 extends FB.UIItemDescription {

        /**
         * Creates a new PS3StoreImageHD1080 frostbite instance.
         */
        constructor();
        /**
         * Creates a new PS3StoreImageHD1080 frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to PS3StoreImageHD1080. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to PS3StoreImageHD1080. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PS3StoreImageHD1080 type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        imagePath: string;

    }

    class PS3StoreImageSD extends FB.UIItemDescription {

        /**
         * Creates a new PS3StoreImageSD frostbite instance.
         */
        constructor();
        /**
         * Creates a new PS3StoreImageSD frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to PS3StoreImageSD. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to PS3StoreImageSD. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the PS3StoreImageSD type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        imagePath: string;

    }

    export enum QualityLevel {
        QualityLevel_Low = 0,
        QualityLevel_Medium = 1,
        QualityLevel_High = 2,
        QualityLevel_Ultra = 3,
    }
    class QueryGetNode extends FB.UINodeData {

        /**
         * Creates a new QueryGetNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new QueryGetNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to QueryGetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to QueryGetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the QueryGetNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        dataSource: FB.UIDataSourceInfo;

    }

    export enum QuickThrowTypeEnum {
        QttHand = 0,
        QttBag = 1,
    }
    class RadarSweepComponentData extends FB.ComponentData {

        /**
         * Creates a new RadarSweepComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RadarSweepComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to RadarSweepComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to RadarSweepComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RadarSweepComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RadarSweepComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RadarSweepComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        controllableSpeedThreshold: number;
        controllableSweepRadius: number;
        controllableSweepInterval: number;
        mineSweepInterval: number;
        mineSweepRadius: number;
        sweepForMines: boolean;
        sweepForControllables: boolean;

    }

    class RadioAltitudeData extends VUShared.DataContainer {

        /**
         * Creates a new RadioAltitudeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RadioAltitudeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RadioAltitudeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RadioAltitudeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        range: number;
        updateFrequency: number;
        collisionMethod: FB.CollisionMethodEnum;

    }

    class RadioComponentData extends FB.ComponentData {

        /**
         * Creates a new RadioComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RadioComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to RadioComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to RadioComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RadioComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RadioComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RadioComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soundEffect: FB.SoundAsset | undefined;

    }

    class RadiosityEntityData extends FB.EntityData {

        /**
         * Creates a new RadiosityEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RadiosityEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to RadiosityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RadiosityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RadiosityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RadiosityEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RadiosityEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RadiosityMaterial extends VUShared.DataContainer {

        /**
         * Creates a new RadiosityMaterial frostbite instance.
         */
        constructor();
        /**
         * Creates a new RadiosityMaterial frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RadiosityMaterial. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RadiosityMaterial type.
         */
        static typeInfo: VUShared.TypeInformation;

        color: VUShared.Vec3;
        name: string;
        emissive: boolean;

    }

    class RagdollAsset extends FB.Asset {

        /**
         * Creates a new RagdollAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RagdollAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to RagdollAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RagdollAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RagdollAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        materialPair: FB.MaterialContainerPair | undefined;
        useServerRagdoll: boolean;

    }

    class RagdollBinding {

        /**
         * Creates a new RagdollBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new RagdollBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RagdollBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        ragdollOnBack: FB.AntRef;
        ragdollBlend: FB.AntRef;
        ragdollForceBlendDisabled: FB.AntRef;
        ragdollActiveTime: FB.AntRef;
        ragdollFullyBlendedIn: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RagdollBinding;

    }

    class RagdollComponentData extends FB.ComponentData {

        /**
         * Creates a new RagdollComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RagdollComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to RagdollComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to RagdollComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RagdollComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RagdollComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RagdollComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        skeletonAsset: FB.SkeletonAsset | undefined;
        ragdollAsset: FB.RagdollAsset | undefined;
        skeletonCollisionData: FB.SkeletonCollisionData | undefined;
        binding: FB.RagdollBinding;
        leftLegBoneName: string;
        rightLegBoneName: string;

    }

    class RandomDelayEntityData extends FB.EntityData {

        /**
         * Creates a new RandomDelayEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomDelayEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to RandomDelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RandomDelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RandomDelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RandomDelayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomDelayEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minDelay: number;
        maxDelay: number;
        realm: FB.Realm;
        autoStart: boolean;
        runOnce: boolean;

    }

    class RandomEvaluatorData extends FB.EvaluatorData {

        /**
         * Creates a new RandomEvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomEvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to RandomEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to RandomEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to RandomEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomEvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        max: number;
        min: number;

    }

    class RandomEventEntityData extends FB.EntityData {

        /**
         * Creates a new RandomEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to RandomEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RandomEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RandomEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RandomEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        probability: number;
        randomizeFirstOnly: boolean;
        autoStart: boolean;

    }

    class RandomFloatEntityData extends FB.EntityData {

        /**
         * Creates a new RandomFloatEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomFloatEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to RandomFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RandomFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RandomFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RandomFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomFloatEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        min: number;
        max: number;

    }

    class RandomMultiEventEntityData extends FB.EntityData {

        /**
         * Creates a new RandomMultiEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomMultiEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to RandomMultiEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RandomMultiEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RandomMultiEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RandomMultiEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomMultiEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        randomEventWeight: number[];
        uniformDistribution: boolean;
        resetOutputsWhenAllHasTriggered: boolean;
        disableOutputOnTrigger: boolean;

    }

    class RandomWalkOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new RandomWalkOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomWalkOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to RandomWalkOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to RandomWalkOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to RandomWalkOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RandomWalkOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RandomWalkOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RandomWalkOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomWalkOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        combatForbidden: boolean;

    }

    class RandomXYZEvaluatorData extends FB.EvaluatorData {

        /**
         * Creates a new RandomXYZEvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RandomXYZEvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to RandomXYZEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to RandomXYZEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to RandomXYZEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RandomXYZEvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxX: number;
        minX: number;
        maxY: number;
        minY: number;
        maxZ: number;
        minZ: number;

    }

    class RankLevelData extends VUShared.DataContainer {

        /**
         * Creates a new RankLevelData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RankLevelData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RankLevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RankLevelData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rankName: string;
        pointsNeeded: number;
        imageName: string;
        iconName: string;
        soundName: string;
        unlockInfos: FB.BasicUnlockInfo[];
        rankNumber: number;

    }

    class RankParamsAsset extends FB.Asset {

        /**
         * Creates a new RankParamsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RankParamsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to RankParamsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RankParamsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RankParamsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        ranks: FB.RankLevelData[];

    }

    class RasterCoverageData extends VUShared.DataContainer {

        /**
         * Creates a new RasterCoverageData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RasterCoverageData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RasterCoverageData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RasterCoverageData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum RasterNodeUsage {
        RasterNodeUsage_Default = 0,
        RasterNodeUsage_Disabled = 1,
        RasterNodeUsage_Persistent = 2,
        RasterNodeUsage_PersistentDedicatedServer = 3,
        RasterNodeUsage_Pruned = 4,
    }
    class RasterQuadtreeData extends FB.Asset {

        /**
         * Creates a new RasterQuadtreeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RasterQuadtreeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to RasterQuadtreeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RasterQuadtreeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RasterQuadtreeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RasterQuadtreeNodeData extends VUShared.DataContainer {

        /**
         * Creates a new RasterQuadtreeNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RasterQuadtreeNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RasterQuadtreeNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RasterQuadtreeNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RasterTreeAsset extends VUShared.DataContainer {

        /**
         * Creates a new RasterTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RasterTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RasterTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RasterTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum RasterTreeBuildMode {
        RasterTreeBuildMode_InlinePersistentStreamRest = 0,
        RasterTreeBuildMode_InlinePersistentRemoveRest = 1,
        RasterTreeBuildMode_InlineAll = 2,
    }
    class RawFileAsset extends FB.Asset {

        /**
         * Creates a new RawFileAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RawFileAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to RawFileAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RawFileAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RawFileAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RawFileDataAsset extends FB.RawFileAsset {

        /**
         * Creates a new RawFileDataAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RawFileDataAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RawFileAsset to RawFileDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RawFileAsset);
        /**
         * Casts an instance of type Asset to RawFileDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RawFileDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RawFileDataAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        rawData: number[];
        size: number;

    }

    class RawFileImportActionParams extends VUShared.DataContainer {

        /**
         * Creates a new RawFileImportActionParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new RawFileImportActionParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RawFileImportActionParams. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RawFileImportActionParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        sourceFile: string;

    }

    class RawFileResourceAsset extends FB.RawFileAsset {

        /**
         * Creates a new RawFileResourceAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RawFileResourceAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RawFileAsset to RawFileResourceAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RawFileAsset);
        /**
         * Casts an instance of type Asset to RawFileResourceAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RawFileResourceAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RawFileResourceAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum ReadinessLevel {
        RLPatrol = 0,
        RLReady = 1,
        RLCombat = 2,
        RLNone = 3,
    }
    class ReadinessLevelCharacteristics {

        /**
         * Creates a new ReadinessLevelCharacteristics frostbite instance.
         */
        constructor();
        /**
         * Creates a new ReadinessLevelCharacteristics frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ReadinessLevelCharacteristics type.
         */
        static typeInfo: VUShared.TypeInformation;

        minReactionTime: number;
        maxReactionTime: number;
        reductionTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ReadinessLevelCharacteristics;

    }

    class ReadinessLevels {

        /**
         * Creates a new ReadinessLevels frostbite instance.
         */
        constructor();
        /**
         * Creates a new ReadinessLevels frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ReadinessLevels type.
         */
        static typeInfo: VUShared.TypeInformation;

        patrol: FB.ReadinessLevelCharacteristics;
        ready: FB.ReadinessLevelCharacteristics;
        combat: FB.ReadinessLevelCharacteristics;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ReadinessLevels;

    }

    export enum ReadinessState {
        RSPatrol = 0,
        RSReady = 1,
        RSCombat = 2,
    }
    export enum Realm {
        Realm_Client = 0,
        Realm_Server = 1,
        Realm_ClientAndServer = 2,
        Realm_None = 3,
        Realm_Pipeline = 4,
    }
    class ReceivedAwardSurveyEvent extends FB.MetricEvent {

        /**
         * Creates a new ReceivedAwardSurveyEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new ReceivedAwardSurveyEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to ReceivedAwardSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to ReceivedAwardSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ReceivedAwardSurveyEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        awardName: string;
        surveyMetricLink: VUShared.Guid;

    }

    class ReceiveEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new ReceiveEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new ReceiveEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to ReceiveEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to ReceiveEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ReceiveEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        out: FB.AudioGraphNodePort;
        source: FB.AudioGraphParameter | undefined;
        parameter: number;
        savedValue: number;

    }

    class ReceiveNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ReceiveNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ReceiveNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ReceiveNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ReceiveNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ReceiveNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.ReceiveEntry[];

    }

    class RecoilData {

        /**
         * Creates a new RecoilData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RecoilData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RecoilData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxRecoilAngleX: number;
        minRecoilAngleX: number;
        maxRecoilAngleY: number;
        minRecoilAngleY: number;
        maxRecoilAngleZ: number;
        minRecoilAngleZ: number;
        maxRecoilFov: number;
        minRecoilFov: number;
        recoilFollowsDispersion: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RecoilData;

    }

    class RecordedInputData extends FB.Asset {

        /**
         * Creates a new RecordedInputData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RecordedInputData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to RecordedInputData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RecordedInputData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RecordedInputData type.
         */
        static typeInfo: VUShared.TypeInformation;

        trackData: FB.InputRecorderTrackData[];

    }

    class RectangularCoverageData {

        /**
         * Creates a new RectangularCoverageData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RectangularCoverageData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RectangularCoverageData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RectangularCoverageData;

    }

    class ReferenceObjectData extends FB.GameObjectData {

        /**
         * Creates a new ReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to ReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        blueprintTransform: VUShared.LinearTransform;
        blueprint: FB.Blueprint | undefined;
        objectVariation: FB.ObjectVariation | undefined;
        streamRealm: FB.StreamRealm;
        castSunShadowEnable: boolean;
        excluded: boolean;

    }

    class RefreshNode extends FB.UINodeData {

        /**
         * Creates a new RefreshNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new RefreshNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to RefreshNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to RefreshNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RefreshNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        out: FB.UINodePort | undefined;
        dataSource: FB.UIDataSourceInfo;

    }

    class RegistryContainer extends VUShared.DataContainer {

        /**
         * Creates a new RegistryContainer frostbite instance.
         */
        constructor();
        /**
         * Creates a new RegistryContainer frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RegistryContainer. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RegistryContainer type.
         */
        static typeInfo: VUShared.TypeInformation;

        entityRegistry: VUShared.DataContainer[];
        assetRegistry: VUShared.DataContainer[];
        blueprintRegistry: VUShared.DataContainer[];
        referenceObjectRegistry: VUShared.DataContainer[];

    }

    class RegularCameraViewData {

        /**
         * Creates a new RegularCameraViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RegularCameraViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RegularCameraViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshOffset: VUShared.Vec3;
        inputSuppression: FB.InputSuppressionData;
        fieldOfView: number;
        mesh: FB.RigidMeshAsset | undefined;
        screenExposureAreaScale: number;
        maskMeshBlueprint: FB.ObjectBlueprint | undefined;
        lockMeshToRenderView: boolean;
        allowFieldOfViewScaling: boolean;
        flirEnabled: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RegularCameraViewData;

    }

    class RegularSocketObjectData extends FB.SocketObjectData {

        /**
         * Creates a new RegularSocketObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RegularSocketObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SocketObjectData to RegularSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectData);
        /**
         * Casts an instance of type SocketObjectDataBase to RegularSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectDataBase);
        /**
         * Casts an instance of type DataContainer to RegularSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RegularSocketObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        mesh3pTransforms: VUShared.LinearTransform[];

    }

    export enum ReloadBehavior {
        RbInCover = 0,
        RbStationary = 1,
        RbAnywhere = 2,
    }
    export enum ReloadLogic {
        rlWeaponSwitchCancelsUnfinishedReload = 0,
        rlReloadUnaffectedByWeaponSwitch = 1,
    }
    export enum ReloadType {
        rtSingleBullet = 0,
        rtMagazine = 1,
        rtMagazineWithPossibleShorterReload = 2,
    }
    class RemoteEntryComponentData extends FB.EntryComponentData {

        /**
         * Creates a new RemoteEntryComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RemoteEntryComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntryComponentData to RemoteEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntryComponentData);
        /**
         * Casts an instance of type ComponentData to RemoteEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to RemoteEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RemoteEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RemoteEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RemoteEntryComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum RenderBlendMode {
        RenderBlendMode_Zero = 0,
        RenderBlendMode_One = 1,
        RenderBlendMode_SourceColor = 2,
        RenderBlendMode_InvSourceColor = 3,
        RenderBlendMode_SourceAlpha = 4,
        RenderBlendMode_InvSourceAlpha = 5,
        RenderBlendMode_DestColor = 6,
        RenderBlendMode_InvDestColor = 7,
        RenderBlendMode_DestAlpha = 8,
        RenderBlendMode_InvDestAlpha = 9,
        RenderBlendMode_SourceAlphaSaturate = 10,
    }
    export enum RenderBlendOp {
        RenderBlendOp_Add = 0,
        RenderBlendOp_Subtract = 1,
        RenderBlendOp_RevSubtract = 2,
        RenderBlendOp_Min = 3,
        RenderBlendOp_Max = 4,
    }
    export enum RenderClearMask {
        RenderClearMask_Color0 = 1,
        RenderClearMask_Color1 = 2,
        RenderClearMask_Color2 = 4,
        RenderClearMask_Color3 = 8,
        RenderClearMask_Color4 = 16,
        RenderClearMask_Color5 = 32,
        RenderClearMask_Color6 = 64,
        RenderClearMask_Color7 = 128,
        RenderClearMask_Color = 255,
        RenderClearMask_Depth = 256,
        RenderClearMask_Stencil = 512,
        RenderClearMask_All = 1023,
    }
    export enum RenderCullMode {
        RenderCullMode_None = 0,
        RenderCullMode_Front = 1,
        RenderCullMode_Back = 2,
    }
    export enum RenderDepthMode {
        RenderDepthMode_Disabled = 0,
        RenderDepthMode_ReadOnly = 1,
        RenderDepthMode_ReadAndWrite = 2,
        RenderDepthMode_WriteOnly = 3,
    }
    export enum RenderFillMode {
        RenderFillMode_Solid = 0,
        RenderFillMode_Wireframe = 1,
    }
    class RenderTextureAsset extends FB.TextureBaseAsset {

        /**
         * Creates a new RenderTextureAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RenderTextureAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TextureBaseAsset to RenderTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TextureBaseAsset);
        /**
         * Casts an instance of type Asset to RenderTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RenderTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RenderTextureAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RenderVolumeEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new RenderVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RenderVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to RenderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to RenderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RenderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RenderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RenderVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RenderVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        userMasks: VUShared.Vec4;
        shader: FB.SurfaceShaderInstanceDataStruct;
        transformType: FB.RenderVolumeTransformType;
        enabled: boolean;

    }

    export enum RenderVolumeTransformType {
        RenderVolumeTransformType_WorldSpaceInv = 0,
        RenderVolumeTransformType_WorldSpaceNoScale = 1,
    }
    export enum RenderWriteMask {
        RenderWriteMask_None = 0,
        RenderWriteMask_Red = 1,
        RenderWriteMask_Green = 2,
        RenderWriteMask_Blue = 4,
        RenderWriteMask_Color = 7,
        RenderWriteMask_Alpha = 8,
        RenderWriteMask_All = 15,
    }
    class RepairToolWeaponData extends FB.PowerToolWeaponData {

        /**
         * Creates a new RepairToolWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RepairToolWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PowerToolWeaponData to RepairToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PowerToolWeaponData);
        /**
         * Casts an instance of type WeaponData to RepairToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to RepairToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to RepairToolWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RepairToolWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rechargeSpeed: number;

    }

    export enum ResourceBundleKind {
        ResourceBundleKind_AlwaysLoaded = 0,
        ResourceBundleKind_GlobalPackage = 1,
        ResourceBundleKind_AssetPackage = 2,
        ResourceBundleKind_SubLevelPackage = 3,
        ResourceBundleKind_BlueprintBundle = 4,
    }
    class ResourceManagerSettings extends FB.SystemSettings {

        /**
         * Creates a new ResourceManagerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ResourceManagerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to ResourceManagerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to ResourceManagerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ResourceManagerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        casBundleReadBufferSizeKb: number;
        casBundleDecompressBufferSizeKb: number;
        casBundleDecompressBufferCount: number;
        bundleProfilingEnable: boolean;
        spuDecompressEnable: boolean;

    }

    class RGBRasterData extends FB.RasterQuadtreeData {

        /**
         * Creates a new RGBRasterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RGBRasterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterQuadtreeData to RGBRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterQuadtreeData);
        /**
         * Casts an instance of type Asset to RGBRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RGBRasterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RGBRasterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RibbonData extends FB.VisualVectorShapeData {

        /**
         * Creates a new RibbonData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RibbonData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VisualVectorShapeData to RibbonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VisualVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to RibbonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to RibbonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to RibbonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RibbonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RibbonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RibbonData type.
         */
        static typeInfo: VUShared.TypeInformation;

        ribbonPoints: FB.RibbonPointData[];

    }

    class RibbonPointData {

        /**
         * Creates a new RibbonPointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RibbonPointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RibbonPointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        userMaskRight: VUShared.Vec4;
        userMaskLeft: VUShared.Vec4;
        right: number;
        left: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RibbonPointData;

    }

    class RichPresenceContext extends VUShared.DataContainer {

        /**
         * Creates a new RichPresenceContext frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresenceContext frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RichPresenceContext. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RichPresenceContext type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        values: FB.RichPresenceContextValue[];
        defaultValue: FB.RichPresenceContextValue | undefined;
        index: number;

    }

    class RichPresenceContextSetting {

        /**
         * Creates a new RichPresenceContextSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresenceContextSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RichPresenceContextSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        context: FB.RichPresenceContext | undefined;
        value: FB.RichPresenceContextValue | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RichPresenceContextSetting;

    }

    class RichPresenceContextValue extends VUShared.DataContainer {

        /**
         * Creates a new RichPresenceContextValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresenceContextValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RichPresenceContextValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RichPresenceContextValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        sid: string;
        index: number;

    }

    class RichPresenceContextValueWithKey extends FB.RichPresenceContextValue {

        /**
         * Creates a new RichPresenceContextValueWithKey frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresenceContextValueWithKey frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RichPresenceContextValue to RichPresenceContextValueWithKey. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RichPresenceContextValue);
        /**
         * Casts an instance of type DataContainer to RichPresenceContextValueWithKey. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RichPresenceContextValueWithKey type.
         */
        static typeInfo: VUShared.TypeInformation;

        key: string;

    }

    class RichPresenceData extends FB.Asset {

        /**
         * Creates a new RichPresenceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresenceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to RichPresenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RichPresenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RichPresenceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        presenceModes: FB.RichPresencePresenceString[];
        defaultMode: FB.RichPresencePresenceString | undefined;
        inactiveMode: FB.RichPresencePresenceString | undefined;
        contexts: FB.RichPresenceContext[];
        properties: FB.RichPresenceProperty[];

    }

    class RichPresencePresenceString extends VUShared.DataContainer {

        /**
         * Creates a new RichPresencePresenceString frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresencePresenceString frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RichPresencePresenceString. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RichPresencePresenceString type.
         */
        static typeInfo: VUShared.TypeInformation;

        sid: string;
        interpolated: boolean;
        index: number;

    }

    class RichPresenceProperty {

        /**
         * Creates a new RichPresenceProperty frostbite instance.
         */
        constructor();
        /**
         * Creates a new RichPresenceProperty frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RichPresenceProperty type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        propertyType: FB.RichPresencePropertyType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RichPresenceProperty;

    }

    export enum RichPresencePropertyType {
        RichPresencePropertyType_Float = 0,
        RichPresencePropertyType_Integer = 1,
        RichPresencePropertyType_LongFloat = 2,
        RichPresencePropertyType_LongInteger = 3,
    }
    export enum RigidBodyCollisionLayer {
        RigidBodyCollisionLayer_Invalid = 0,
        RigidBodyCollisionLayer_VehicleLayer = 1,
        RigidBodyCollisionLayer_VehicleAndCharacterCollisionLayer = 2,
        RigidBodyCollisionLayer_Size = 3,
    }
    class RigidBodyConeConstraintData extends FB.RigidBodyConstraintData {

        /**
         * Creates a new RigidBodyConeConstraintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidBodyConeConstraintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RigidBodyConstraintData to RigidBodyConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RigidBodyConstraintData);
        /**
         * Casts an instance of type GameObjectData to RigidBodyConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RigidBodyConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RigidBodyConeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RigidBodyConeConstraintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngle: number;
        angularFriction: number;
        maxAngle: number;
        hasLimits: boolean;

    }

    class RigidBodyConstraintData extends FB.GameObjectData {

        /**
         * Creates a new RigidBodyConstraintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidBodyConstraintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to RigidBodyConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RigidBodyConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RigidBodyConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RigidBodyConstraintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        parentBody: VUShared.DataContainer | undefined;
        breakThreshold: number;
        isBreakable: boolean;

    }

    class RigidBodyData extends VUShared.DataContainer {

        /**
         * Creates a new RigidBodyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidBodyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RigidBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RigidBodyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inertiaModifier: VUShared.Vec3;
        rigidBodyType: FB.RigidBodyType;
        mass: number;
        restitution: number;
        friction: number;
        angularVelocityDamping: number;
        linearVelocityDamping: number;
        interactionToolkitCollisionVolumeId: number;
        motionType: FB.RigidBodyMotionType;
        qualityType: FB.RigidBodyQualityType;
        collisionLayer: FB.RigidBodyCollisionLayer;
        floatPhysics: FB.FloatPhysicsData | undefined;
        constraints: FB.RigidBodyConstraintData[];

    }

    class RigidBodyHingeConstraintData extends FB.RigidBodyConstraintData {

        /**
         * Creates a new RigidBodyHingeConstraintData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidBodyHingeConstraintData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RigidBodyConstraintData to RigidBodyHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RigidBodyConstraintData);
        /**
         * Casts an instance of type GameObjectData to RigidBodyHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RigidBodyHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RigidBodyHingeConstraintData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RigidBodyHingeConstraintData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minAngle: number;
        angularFriction: number;
        maxAngle: number;
        hasLimits: boolean;

    }

    export enum RigidBodyMotionType {
        RigidBodyMotionType_Invalid = 0,
        RigidBodyMotionType_Fixed = 1,
        RigidBodyMotionType_Keyframed = 2,
        RigidBodyMotionType_Dynamic = 3,
        RigidBodyMotionType_Size = 4,
    }
    export enum RigidBodyQualityType {
        RigidBodyQualityType_Invalid = 0,
        RigidBodyQualityType_Fixed = 1,
        RigidBodyQualityType_Debris = 2,
        RigidBodyQualityType_DebrisSimpleToi = 3,
        RigidBodyQualityType_Moving = 4,
        RigidBodyQualityType_Critical = 5,
        RigidBodyQualityType_Size = 6,
    }
    export enum RigidBodyType {
        RBTypeCollision = 0,
        RBTypeDetail = 1,
        RBTypeCharacter = 2,
        RBTypeRaycast = 3,
        RBTypeGroup = 4,
        RBTypeSize = 5,
    }
    class RigidMeshAsset extends FB.MeshAsset {

        /**
         * Creates a new RigidMeshAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidMeshAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshAsset to RigidMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshAsset);
        /**
         * Casts an instance of type Asset to RigidMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to RigidMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RigidMeshAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RigidMeshEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new RigidMeshEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidMeshEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to RigidMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to RigidMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RigidMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RigidMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RigidMeshEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RigidMeshEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mesh: FB.RigidMeshAsset | undefined;

    }

    class RigidMeshSocketTransform {

        /**
         * Creates a new RigidMeshSocketTransform frostbite instance.
         */
        constructor();
        /**
         * Creates a new RigidMeshSocketTransform frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RigidMeshSocketTransform type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        socketObject: FB.WeaponRegularSocketObjectData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RigidMeshSocketTransform;

    }

    class RiverData extends FB.RibbonData {

        /**
         * Creates a new RiverData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RiverData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RibbonData to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RibbonData);
        /**
         * Casts an instance of type VisualVectorShapeData to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VisualVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RiverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RiverData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class RoadData extends FB.RibbonData {

        /**
         * Creates a new RoadData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RoadData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RibbonData to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RibbonData);
        /**
         * Casts an instance of type VisualVectorShapeData to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VisualVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RoadData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RoadData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shader2d: FB.SurfaceShaderBaseAsset | undefined;
        shader3dZOnly: FB.SurfaceShaderBaseAsset | undefined;
        uvTileFactor: number;
        stickToTerrain: boolean;

    }

    class RotateToHitData {

        /**
         * Creates a new RotateToHitData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RotateToHitData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RotateToHitData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotationSpeedFactor: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RotateToHitData;

    }

    class RotateVectorData extends FB.EvaluatorData {

        /**
         * Creates a new RotateVectorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RotateVectorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to RotateVectorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to RotateVectorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to RotateVectorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RotateVectorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        angle: number;
        rotateWithinPlane: boolean;
        inputAffectsPhi: boolean;

    }

    export enum RotationAxis {
        raX = 0,
        raY = 1,
        raZ = 2,
    }
    export enum RotationAxisEnum {
        RALeft = 0,
        RAUp = 1,
        RADof = 2,
    }
    class RotationBodyData extends FB.MovingBodyData {

        /**
         * Creates a new RotationBodyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RotationBodyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MovingBodyData to RotationBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovingBodyData);
        /**
         * Casts an instance of type DataContainer to RotationBodyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RotationBodyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        angularMomentumMultiplier: number;
        angularMomentumThreshold: number;
        angularMomentumDamping: number;
        angularMomentumDampingAcc: number;
        angularMomentumDampingDeacc: number;
        angularConstraintMin: number;
        extendedConstraints: FB.ExtendedConstraintsData | undefined;
        angularConstraintMax: number;
        rotationAxis: number;
        usePostSatisfyConstraints: boolean;
        useAngularMomentumThreshold: boolean;
        useAngularMomentumDamping: boolean;
        useAngularConstraint: boolean;

    }

    export enum RotationChannel {
        RotationChannel_Pitch = 0,
        RotationChannel_Yaw = 1,
        RotationChannel_Roll = 2,
    }
    class RotorComponentData extends FB.ComponentData {

        /**
         * Creates a new RotorComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RotorComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to RotorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to RotorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RotorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RotorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RotorComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lowRpmModel: FB.RotorModelData;
        highRpmModel: FB.RotorModelData;
        rotationAxis: FB.RotationAxis;
        rotationMultiplier: number;
        changeModelRpm: number;
        blowEffect: FB.EffectBlueprint | undefined;
        triggerGroundEffectHeight: number;
        criticallyDamagedRotationForce: number;
        onlyTriggerBlowEffectInWater: boolean;
        groundEffectOnTerrainOnly: boolean;
        criticalDamage: boolean;

    }

    class RotorModelData {

        /**
         * Creates a new RotorModelData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RotorModelData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RotorModelData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotationRpm: number;
        partIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RotorModelData;

    }

    class RotorParameters extends VUShared.DataContainer {

        /**
         * Creates a new RotorParameters frostbite instance.
         */
        constructor();
        /**
         * Creates a new RotorParameters frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to RotorParameters. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RotorParameters type.
         */
        static typeInfo: VUShared.TypeInformation;

        cyclicInputScaleRoll: number;
        cyclicInputScalePitch: number;
        collectiveThrottleInputScale: number;
        collectiveBrakeInputScale: number;
        collectiveInputIdle: number;
        horizontalForceModifier: number;
        angleOfAttack: VUShared.Vec2[];
        cyclicFadeOutOffset: number;
        additionalGravityModifier: number;
        horisontalMinEffectMod: number;
        horisontalMinEffectVelocity: number;
        enableHorisontalMinEffect: boolean;
        reverseThrottle: boolean;

    }

    class RoundEvent extends FB.MetricEvent {

        /**
         * Creates a new RoundEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new RoundEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to RoundEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to RoundEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RoundEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelName: string;
        juiceSessionId: number;

    }

    class RoundOverEntityData extends FB.EntityData {

        /**
         * Creates a new RoundOverEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RoundOverEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to RoundOverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to RoundOverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to RoundOverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to RoundOverEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RoundOverEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        team: FB.TeamId;

    }

    class RoundOverEvent extends FB.MetricEvent {

        /**
         * Creates a new RoundOverEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new RoundOverEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to RoundOverEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to RoundOverEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RoundOverEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        winningTeam: number;
        ticketsLeft: number;

    }

    export enum RouteChannel {
        RouteChannel_0 = 0,
        RouteChannel_1 = 1,
        RouteChannel_2 = 2,
        RouteChannel_3 = 3,
        RouteChannel_4 = 4,
        RouteChannel_5 = 5,
        RouteChannel_6 = 6,
        RouteChannel_7 = 7,
        RouteChannel_8 = 8,
        RouteChannel_9 = 9,
        RouteChannel_10 = 10,
        RouteChannel_11 = 11,
        RouteChannel_12 = 12,
        RouteChannel_13 = 13,
        RouteChannel_14 = 14,
        RouteChannel_15 = 15,
        RouteChannel_16 = 16,
        RouteChannel_17 = 17,
        RouteChannel_18 = 18,
        RouteChannel_19 = 19,
        RouteChannel_21 = 20,
        RouteChannel_22 = 21,
        RouteChannel_23 = 22,
        RouteChannel_24 = 23,
        RouteChannel_25 = 24,
        RouteChannel_26 = 25,
        RouteChannel_27 = 26,
        RouteChannel_28 = 27,
        RouteChannel_29 = 28,
        RouteChannel_30 = 29,
        RouteChannel_31 = 30,
        RouteChannel_32 = 31,
        RouteChannel_33 = 32,
        RouteChannel_34 = 33,
        RouteChannel_35 = 34,
        RouteChannel_36 = 35,
        RouteChannel_37 = 36,
        RouteChannel_38 = 37,
        RouteChannel_39 = 38,
        RouteChannel_40 = 39,
        RouteChannel_41 = 40,
        RouteChannel_42 = 41,
        RouteChannel_43 = 42,
        RouteChannel_44 = 43,
        RouteChannel_45 = 44,
        RouteChannel_46 = 45,
        RouteChannel_47 = 46,
        RouteChannel_48 = 47,
        RouteChannel_49 = 48,
        RouteChannel_50 = 49,
        RouteChannel_51 = 50,
        RouteChannel_52 = 51,
        RouteChannel_53 = 52,
        RouteChannel_54 = 53,
        RouteChannel_55 = 54,
        RouteChannel_56 = 55,
        RouteChannel_57 = 56,
        RouteChannel_58 = 57,
        RouteChannel_59 = 58,
        RouteChannel_60 = 59,
        RouteChannel_61 = 60,
        RouteChannel_62 = 61,
        RouteChannel_63 = 62,
    }
    class RouteEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new RouteEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new RouteEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to RouteEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to RouteEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RouteEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        output: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class RouteNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new RouteNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RouteNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to RouteNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to RouteNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the RouteNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        routes: FB.RouteEntry[];

    }

    export enum RouteType {
        RouteStop = 0,
        RouteCircular = 1,
    }
    class RumbleFiringData {

        /**
         * Creates a new RumbleFiringData frostbite instance.
         */
        constructor();
        /**
         * Creates a new RumbleFiringData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the RumbleFiringData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lowRumble: number;
        highRumble: number;
        rumbleDuration: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.RumbleFiringData;

    }

    export enum SampleCenter {
        SampleCenter_Center = 0,
        SampleCenter_TopLeft = 1,
    }
    class SamplerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SamplerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SamplerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SamplerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SamplerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SamplerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        externalWave: FB.AudioGraphNodePort;
        variation: FB.AudioGraphNodePort;
        offset: FB.AudioGraphNodePort;
        delay: FB.AudioGraphNodePort;
        pitch: FB.AudioGraphNodePort;
        amplitude: FB.AudioGraphNodePort;
        enableStep: FB.AudioGraphNodePort;
        buffer: FB.AudioGraphNodePort;
        trigger: FB.AudioGraphNodePort;
        release: FB.AudioGraphNodePort;
        step: FB.AudioGraphNodePort;
        output: FB.AudioGraphNodePort;
        finished: FB.AudioGraphNodePort;
        buffered: FB.AudioGraphNodePort;
        position: FB.AudioGraphNodePort;
        wave: FB.SoundWaveAsset | undefined;
        basePitch: number;
        loop: FB.LoopType;
        plugins: FB.SamplerPlugins[];
        shuffleSegments: boolean;

    }

    class SamplerPlugins {

        /**
         * Creates a new SamplerPlugins frostbite instance.
         */
        constructor();
        /**
         * Creates a new SamplerPlugins frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SamplerPlugins type.
         */
        static typeInfo: VUShared.TypeInformation;

        sndPlayer: FB.SoundGraphPluginRef;
        resample: FB.SoundGraphPluginRef;
        pause: FB.SoundGraphPluginRef;
        gain: FB.SoundGraphPluginRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SamplerPlugins;

    }

    class SampleTextureData extends FB.EvaluatorData {

        /**
         * Creates a new SampleTextureData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SampleTextureData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to SampleTextureData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to SampleTextureData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SampleTextureData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SampleTextureData type.
         */
        static typeInfo: VUShared.TypeInformation;

        textureDimensions: VUShared.Vec2;
        colorIntensityMax: VUShared.Vec3;
        colorIntensityMin: VUShared.Vec3;
        gradientData: VUShared.Vec4[];
        textureOriginU: number;
        textureOriginV: number;

    }

    class SaveEntityData extends FB.EntityData {

        /**
         * Creates a new SaveEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SaveEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SaveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SaveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SaveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SaveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SaveEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        saveScreenTexture: FB.TextureAsset | undefined;
        levelName: string;
        saveFileName: string;
        saveNameSID: string;
        checkForHumanPlayer: boolean;

    }

    class SaveGameLoadedEntityData extends FB.EntityData {

        /**
         * Creates a new SaveGameLoadedEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SaveGameLoadedEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SaveGameLoadedEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SaveGameLoadedEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SaveGameLoadedEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SaveGameLoadedEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SaveGameLoadedEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ScaleClampNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ScaleClampNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScaleClampNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ScaleClampNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ScaleClampNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScaleClampNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        inMin: FB.AudioGraphNodePort;
        inMax: FB.AudioGraphNodePort;
        outMin: FB.AudioGraphNodePort;
        outMax: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;

    }

    class ScenarioTaskData {

        /**
         * Creates a new ScenarioTaskData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScenarioTaskData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ScenarioTaskData type.
         */
        static typeInfo: VUShared.TypeInformation;

        endPointWorldOffset: VUShared.Vec3;
        startPoint: VUShared.Vec3;
        scenarioId: number;
        actorId: number;
        partId: number;
        levelId: number;
        worldAngle: number;
        connectTransforms: VUShared.LinearTransform[];
        startTurnDistance: number;
        startTimerDistance: number;
        triggerScenarioDelay: number;
        triggerScenario: boolean;
        useClientPosition: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ScenarioTaskData;

    }

    class ScenarioWaypointData extends FB.AbstractLocoWaypointData {

        /**
         * Creates a new ScenarioWaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScenarioWaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractLocoWaypointData to ScenarioWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractLocoWaypointData);
        /**
         * Casts an instance of type WaypointData to ScenarioWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WaypointData);
        /**
         * Casts an instance of type DataContainer to ScenarioWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScenarioWaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scenarioAntRef: FB.AntRef;
        scenarioTask: FB.ScenarioTaskData;

    }

    class SceneRecordingData extends VUShared.DataContainer {

        /**
         * Creates a new SceneRecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SceneRecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SceneRecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SceneRecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: FB.EntityRecordingData[];

    }

    class ScopeFilterData extends FB.Asset {

        /**
         * Creates a new ScopeFilterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScopeFilterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScopeFilterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ScoreAggregate extends FB.MetricAggregate {

        /**
         * Creates a new ScoreAggregate frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScoreAggregate frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricAggregate to ScoreAggregate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricAggregate);
        /**
         * Casts an instance of type MetricEvent to ScoreAggregate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to ScoreAggregate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScoreAggregate type.
         */
        static typeInfo: VUShared.TypeInformation;

        totalScore: number;

    }

    export enum ScoreboardPosition {
        ScoreboardPosition_FirstPlace = 0,
        ScoreboardPosition_SecondPlace = 1,
        ScoreboardPosition_ThirdPlace = 2,
        ScoreboardPosition_FourthPlace = 3,
        ScoreboardPosition_FifthPlace = 4,
        ScoreboardPosition_LAST_ITEM = 5,
    }
    export enum ScoringBucket {
        ScoringBucket_General = 0,
        ScoringBucket_Teamwork = 1,
        ScoringBucket_Bonus = 2,
        ScoringBucket_Squad = 3,
        ScoringBucket_Objective = 4,
        ScoringBucket_Award = 5,
        ScoringBucket_VehicleMBT = 6,
        ScoringBucket_VehicleIFV = 7,
        ScoringBucket_VehicleAA = 8,
        ScoringBucket_VehicleAttackHeli = 9,
        ScoringBucket_VehicleScoutHeli = 10,
        ScoringBucket_VehicleJet = 11,
        ScoringBucket_KitAssault = 12,
        ScoringBucket_KitEngineer = 13,
        ScoringBucket_KitRecon = 14,
        ScoringBucket_KitSupport = 15,
        ScoringBucket_SinglePlayer = 16,
        ScoringBucket_Cooperation = 17,
        ScoringBucket_CoopIndivid = 18,
        ScoringBucket_Unlock = 19,
        ScoringBucket_SpecialKit = 20,
        ScoringBucket_VehicleLBT = 21,
        ScoringBucket_VehicleArtillery = 22,
        ScoringBucket_LastScoringBucketItem = 23,
    }
    class ScoringBucketData extends VUShared.DataContainer {

        /**
         * Creates a new ScoringBucketData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScoringBucketData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ScoringBucketData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScoringBucketData type.
         */
        static typeInfo: VUShared.TypeInformation;

        destinationBucket: FB.ScoringBucket;
        bucketType: FB.ScoringBucketType;
        name: string;
        teamTotalBucket: FB.ScoringBucketData | undefined;
        unlocks: FB.ScoringBucketUnlockData[];
        connectedCategories: FB.StatsCategoryBaseData[];
        addToEntry: boolean;
        roundScore: boolean;
        globalScore: boolean;

    }

    export enum ScoringBucketType {
        ScoringBucketType_Disabled = 0,
        ScoringBucketType_Normal = 1,
        ScoringBucketType_Vehicle = 2,
        ScoringBucketType_Kit = 3,
        ScoringBucketType_Count = 4,
    }
    class ScoringBucketUnlockData {

        /**
         * Creates a new ScoringBucketUnlockData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScoringBucketUnlockData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ScoringBucketUnlockData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pointsNeeded: number;
        unlockInfo: FB.BasicUnlockInfo;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ScoringBucketUnlockData;

    }

    class ScoringData extends FB.Asset {

        /**
         * Creates a new ScoringData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScoringData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ScoringData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ScoringData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScoringData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scoringTypes: FB.ScoringTypeData[];
        scoringHandlers: FB.ScoringHandlerData[];
        buckets: FB.ScoringBucketData[];

    }

    class ScoringHandlerData extends VUShared.DataContainer {

        /**
         * Creates a new ScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ScoringTypeData extends VUShared.DataContainer {

        /**
         * Creates a new ScoringTypeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScoringTypeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ScoringTypeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScoringTypeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        measuring: FB.StatEvent;
        paramX: FB.StatsCategoryBaseData | undefined;
        paramY: FB.StatsCategoryBaseData | undefined;
        limit: number;
        descriptionSid: string;
        visibilityType: FB.ScoringVisibilityType;
        bucket: FB.ScoringBucket;
        score: number;
        additionalValueMultiplier: number;
        showForTeam: boolean;

    }

    export enum ScoringVisibilityType {
        ScoringVisibilityType_Major = 0,
        ScoringVisibilityType_Minor = 1,
        ScoringVisibilityType_Hidden = 2,
    }
    class ScreenEffectComponentData extends FB.ComponentData {

        /**
         * Creates a new ScreenEffectComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScreenEffectComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to ScreenEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ScreenEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ScreenEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ScreenEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScreenEffectComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        screenEffectParams: VUShared.Vec4;
        frameType: FB.ScreenEffectFrameType;
        shader: FB.SurfaceShaderBaseAsset | undefined;
        frameWidth: number;
        outerFrameOpacity: number;
        innerFrameOpacity: number;
        angle: number;
        realm: FB.Realm;

    }

    export enum ScreenEffectFrameType {
        ScreenEffectFrameType_FullFrame = 0,
        ScreenEffectFrameType_SingleFramePart = 1,
        ScreenEffectFrameType_SingleSquareFramePart = 2,
    }
    class ScreenshotInfo {

        /**
         * Creates a new ScreenshotInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScreenshotInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ScreenshotInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        cropImageY1: number;
        cropImageX1: number;
        cropImageX2: number;
        cropImageY2: number;
        resizeOutputImageHeight: number;
        resizeOutputImageWidth: number;
        resizeOutputImage: boolean;
        cropImage: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ScreenshotInfo;

    }

    class ScriptEntityData extends FB.EntityData {

        /**
         * Creates a new ScriptEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ScriptEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ScriptEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ScriptEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ScriptEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ScriptEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ScriptEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        code: string;
        realm: FB.Realm;

    }

    class SearchAndDestroyConstantData extends FB.Asset {

        /**
         * Creates a new SearchAndDestroyConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SearchAndDestroyConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SearchAndDestroyConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SearchAndDestroyConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SearchAndDestroyConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeToWaitMin: number;
        timeToWaitMax: number;
        defaultSearchAndDestroyRadius: number;

    }

    class SearchAndDestroyOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new SearchAndDestroyOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SearchAndDestroyOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to SearchAndDestroyOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to SearchAndDestroyOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to SearchAndDestroyOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SearchAndDestroyOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SearchAndDestroyOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SearchAndDestroyOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SearchAndDestroyOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        targetPosKnowledge: FB.TargetPosKnowledgeType;
        findTargetTime: number;
        targetAreaFollowsTarget: boolean;
        aggressive: boolean;

    }

    export enum SecureReason {
        SecureReason_Ok = 0,
        SecureReason_WrongProtocolVersion = 1,
        SecureReason_WrongTitleVersion = 2,
        SecureReason_ServerFull = 3,
        SecureReason_KickedOut = 4,
        SecureReason_Banned = 5,
        SecureReason_GenericError = 6,
        SecureReason_WrongPassword = 7,
        SecureReason_KickedOutDemoOver = 8,
        SecureReason_RankRestricted = 9,
        SecureReason_ConfigurationNotAllowed = 10,
        SecureReason_ServerReclaimed = 11,
        SecureReason_MissingContent = 12,
        SecureReason_NotVerified = 13,
        SecureReason_TimedOut = 14,
        SecureReason_ConnectFailed = 15,
        SecureReason_NoReply = 16,
        SecureReason_AcceptFailed = 17,
        SecureReason_MismatchingContent = 18,
        SecureReason_InteractivityTimeout = 19,
        SecureReason_KickedFromQueue = 20,
        SecureReason_TeamKills = 21,
        SecureReason_KickedByAdmin = 22,
        SecureReason_KickedViaPunkBuster = 23,
        SecureReason_KickedOutServerFull = 24,
        SecureReason_ESportsMatchStarting = 25,
        SecureReason_NotInESportsRosters = 26,
        SecureReason_ESportsMatchEnding = 27,
        SecureReason_VirtualServerExpired = 28,
        SecureReason_VirtualServerRecreate = 29,
        SecureReason_ESportsTeamFull = 30,
        SecureReason_ESportsMatchAborted = 31,
        SecureReason_ESportsMatchWalkover = 32,
        SecureReason_ESportsMatchWarmupTimedOut = 33,
        SecureReason_NotAllowedToSpectate = 34,
        SecureReason_NoSpectateSlotAvailable = 35,
        SecureReason_InvalidSpectateJoin = 36,
        SecureReason_PremiumStatusMismatch = 37,
    }
    class SelectEventEntityData extends FB.EntityData {

        /**
         * Creates a new SelectEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SelectEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SelectEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SelectEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SelectEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SelectEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SelectEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        events: string[];

    }

    class SendEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new SendEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new SendEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to SendEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to SendEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SendEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        target: FB.AudioGraphParameter | undefined;

    }

    class SendNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SendNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SendNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SendNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SendNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SendNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        entries: FB.SendEntry[];

    }

    class SenseTerrainSphereData extends FB.SphereData {

        /**
         * Creates a new SenseTerrainSphereData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SenseTerrainSphereData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SphereData to SenseTerrainSphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SphereData);
        /**
         * Casts an instance of type BaseShapeData to SenseTerrainSphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to SenseTerrainSphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SenseTerrainSphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SenseTerrainSphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SenseTerrainSphereData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SensingComponentData extends FB.ComponentData {

        /**
         * Creates a new SensingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SensingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SensingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SensingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SensingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SensingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        template: FB.SensingTemplateData | undefined;
        settings: FB.SensingSettings | undefined;
        enabled: boolean;
        sharedPlayerMemory: boolean;
        useWeaponTransform: boolean;

    }

    class SensingLimits {

        /**
         * Creates a new SensingLimits frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensingLimits frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SensingLimits type.
         */
        static typeInfo: VUShared.TypeInformation;

        hearingDistance: number;
        hearingCutoff: number;
        viewAngle: number;
        viewDistance: number;
        peripheralViewAngle: number;
        peripheralViewDistance: number;
        peripheralMovementCutoff: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SensingLimits;

    }

    class SensingManagerEntityData extends FB.EntityData {

        /**
         * Creates a new SensingManagerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensingManagerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SensingManagerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SensingManagerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SensingManagerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SensingManagerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SensingManagerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        senseTerrainAreas: FB.SensingSphere[];

    }

    class SensingSettings extends FB.Asset {

        /**
         * Creates a new SensingSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensingSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SensingSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SensingSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SensingSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        sensingTimeSpan: number;
        attackerTrackTime: number;
        lineOfSightTestTime: number;
        maxRays: number;
        characterVisionBoxSettings: FB.VisionBoxSettings;
        vehicleVisionBoxSettings: FB.VisionBoxSettings;
        closeFireImpactDistance: number;
        closeExplosiveImpactDistance: number;
        closeTrajectoryDistance: number;
        impactSenseDistance: number;
        maxVolume: number;
        maxSize: number;
        maxSpeed: number;
        volumeModifier: number;
        movementModifier: number;
        luckModifier: number;
        backgroundLoudnessFactor: number;
        motionSizeFactor: number;
        motionSpeedFactor: number;
        motionPeripheralityFactor: number;
        motionDistanceFactor: number;
        smokeSphereRadius: number;
        smokeSphereDuration: number;
        spawnOutOfLOSRaycastHeight: number;
        spawnOutOfLOSTraceDistance: number;
        spawnOutOfLOSRaycastDistance: number;
        spawnOutOfLOSRadius: number;
        defaultTemplate: FB.SensingTemplateData | undefined;

    }

    class SensingSphere {

        /**
         * Creates a new SensingSphere frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensingSphere frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SensingSphere type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        radiusSqr: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SensingSphere;

    }

    class SensingTemplateData extends FB.GameSensingTemplateData {

        /**
         * Creates a new SensingTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensingTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameSensingTemplateData to SensingTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameSensingTemplateData);
        /**
         * Casts an instance of type Asset to SensingTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SensingTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SensingTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        awareForgetTime: number;
        lostForgetTime: number;
        timeUntilUnseenIsLost: number;
        maximumMergeDistance: number;
        maximumAlertDistance: number;
        maximumReadinessRaiseDistance: number;
        readyLimits: FB.SensingLimits;
        relaxedLimits: FB.SensingLimits;
        debugText: string;
        combatLimits: FB.SensingLimits;
        useSenseSharing: boolean;
        noticeBullets: boolean;

    }

    class SensitivityAtVelocity {

        /**
         * Creates a new SensitivityAtVelocity frostbite instance.
         */
        constructor();
        /**
         * Creates a new SensitivityAtVelocity frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SensitivityAtVelocity type.
         */
        static typeInfo: VUShared.TypeInformation;

        steeringSensitivity: number;
        velocity: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SensitivityAtVelocity;

    }

    class SequenceData extends FB.SequenceEntityData {

        /**
         * Creates a new SequenceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SequenceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SequenceEntityData to SequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SequenceEntityData);
        /**
         * Casts an instance of type EntityData to SequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SequenceData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SequenceEntityData extends FB.EntityData {

        /**
         * Creates a new SequenceEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SequenceEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SequenceEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        events: FB.SequenceEventData[];
        sequenceStartTime: number;
        sequenceLength: number;
        externalTime: number;
        propertyTracks: FB.PropertyTrackData[];
        realm: FB.Realm;
        serverUpdatePass: FB.UpdatePass;
        clientUpdatePass: FB.UpdatePass;
        customSequenceTracks: FB.CustomSequenceTrackData[];
        autoPlayFirstFrame: boolean;
        looping: boolean;
        autoStart: boolean;
        playInReverse: boolean;

    }

    class SequenceEventData {

        /**
         * Creates a new SequenceEventData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SequenceEventData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SequenceEventData type.
         */
        static typeInfo: VUShared.TypeInformation;

        event: FB.EventSpec;
        time: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SequenceEventData;

    }

    class SequenceGeneratorNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SequenceGeneratorNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SequenceGeneratorNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SequenceGeneratorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SequenceGeneratorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SequenceGeneratorNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        trigger: FB.AudioGraphNodePort;
        reset: FB.AudioGraphNodePort;
        min: FB.AudioGraphNodePort;
        max: FB.AudioGraphNodePort;
        step: FB.AudioGraphNodePort;
        value: FB.AudioGraphNodePort;

    }

    export enum ServerBackendAttribute {
        ServerBackendAttribute_Level = 0,
        ServerBackendAttribute_GameMode = 1,
        ServerBackendAttribute_LevelLocation = 2,
        ServerBackendAttribute_Mod = 3,
        ServerBackendAttribute_Public = 4,
        ServerBackendAttribute_Vip = 5,
        ServerBackendAttribute_Preset = 6,
        ServerBackendAttribute_Settings1 = 7,
        ServerBackendAttribute_Settings2 = 8,
        ServerBackendAttribute_MapSettings = 9,
        ServerBackendAttribute_Maps1 = 10,
        ServerBackendAttribute_Maps2 = 11,
        ServerBackendAttribute_Description1 = 12,
        ServerBackendAttribute_Description2 = 13,
        ServerBackendAttribute_Admins1 = 14,
        ServerBackendAttribute_Admins2 = 15,
        ServerBackendAttribute_ReservedSlots1 = 16,
        ServerBackendAttribute_ReservedSlots2 = 17,
        ServerBackendAttribute_Message = 18,
        ServerBackendAttribute_BannerUrl = 19,
        ServerBackendAttribute_Mission = 20,
        ServerBackendAttribute_Difficulty = 21,
        ServerBackendAttribute_PingSite = 22,
        ServerBackendAttribute_MapsInfo = 23,
        ServerBackendAttribute_Owner = 24,
        ServerBackendAttribute_MatchId = 25,
        ServerBackendAttribute_RosterA1 = 26,
        ServerBackendAttribute_RosterA2 = 27,
        ServerBackendAttribute_RosterA3 = 28,
        ServerBackendAttribute_RosterA4 = 29,
        ServerBackendAttribute_RosterA5 = 30,
        ServerBackendAttribute_RosterA6 = 31,
        ServerBackendAttribute_RosterA7 = 32,
        ServerBackendAttribute_RosterA8 = 33,
        ServerBackendAttribute_RosterA9 = 34,
        ServerBackendAttribute_RosterB1 = 35,
        ServerBackendAttribute_RosterB2 = 36,
        ServerBackendAttribute_RosterB3 = 37,
        ServerBackendAttribute_RosterB4 = 38,
        ServerBackendAttribute_RosterB5 = 39,
        ServerBackendAttribute_RosterB6 = 40,
        ServerBackendAttribute_RosterB7 = 41,
        ServerBackendAttribute_RosterB8 = 42,
        ServerBackendAttribute_RosterB9 = 43,
        ServerBackendAttribute_Spectators = 44,
        ServerBackendAttribute_ExpirationDate = 45,
        ServerBackendAttribute_MatchState = 46,
        ServerBackendAttribute_PremiumStatus = 47,
        ServerBackendAttribute_Count = 48,
    }
    class ServerBackendAttributeMapping {

        /**
         * Creates a new ServerBackendAttributeMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new ServerBackendAttributeMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ServerBackendAttributeMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        attribute: FB.ServerBackendAttribute;
        setting: string;
        defaultValue: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ServerBackendAttributeMapping;

    }

    class ServerBackendData extends FB.Asset {

        /**
         * Creates a new ServerBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ServerBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ServerBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ServerBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mappings: FB.ServerBackendAttributeMapping[];

    }

    class ServerInfoSetting {

        /**
         * Creates a new ServerInfoSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new ServerInfoSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ServerInfoSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        key: string;
        name: string;
        isBool: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ServerInfoSetting;

    }

    export enum ServerMapSequencerEventType {
        ServerMapSequencerEventType_Add = 0,
        ServerMapSequencerEventType_Remove = 1,
        ServerMapSequencerEventType_Clear = 2,
        ServerMapSequencerEventType_List = 3,
        ServerMapSequencerEventType_Load = 4,
        ServerMapSequencerEventType_Save = 5,
        ServerMapSequencerEventType_SetNextMapIndex = 6,
        ServerMapSequencerEventType_GetMapIndices = 7,
        ServerMapSequencerEventType_GetRounds = 8,
        ServerMapSequencerEventType_RunNextRound = 9,
        ServerMapSequencerEventType_RestartRound = 10,
        ServerMapSequencerEventType_AvailableMaps = 11,
    }
    class ServerMetricsSettings extends VUShared.DataContainer {

        /**
         * Creates a new ServerMetricsSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ServerMetricsSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ServerMetricsSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ServerMetricsSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        reportName: string;
        enabled: boolean;
        dbxReportEnabled: boolean;
        tickTelemetryEnabled: boolean;
        developmentTelemetryEnabled: boolean;
        performanceTelemetryEnabled: boolean;
        juiceTelemetryEnabled: boolean;
        performanceProfileStateEnabled: boolean;
        transactionTelemetryEnabled: boolean;
        compressTransactions: boolean;

    }

    class ServerPerformanceEvent extends FB.MetricEvent {

        /**
         * Creates a new ServerPerformanceEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new ServerPerformanceEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to ServerPerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to ServerPerformanceEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ServerPerformanceEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        cpuAverage: number;
        cpuMemory: number;
        received: number;
        sent: number;
        receivedAverage: number;
        sentAverage: number;

    }

    class ServerSettings extends FB.SystemSettings {

        /**
         * Creates a new ServerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ServerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to ServerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to ServerSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ServerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        instancePath: string;
        remoteControlPort: number;
        duplicationChance: number;
        maxQueriesPerSecond: number;
        corruptionChance: number;
        remoteAdministrationPort: string;
        maxDropDuration: number;
        reorderingChance: number;
        humanHealthMultiplier: number;
        serverName: string;
        minDropDuration: number;
        saveGameVersion: number;
        packetDrops: number;
        dropSpikeChance: number;
        maxLatency: number;
        outgoingRate: number;
        incomingRate: number;
        playlist: string;
        savePoint: string;
        ingameTimeout: number;
        outgoingFrequency: number;
        respawnTimeModifier: number;
        minLatency: number;
        serverPassword: string;
        timeoutTime: number;
        playerCountNeededForMultiplayer: number;
        vehicleSpawnDelayModifier: number;
        debugMenuClick: string;
        administrationPassword: string;
        loadingTimeout: number;
        dedicatedServerCpu: number;
        deathmatchDebugInfo: boolean;
        timeoutGame: boolean;
        aiLooksIntoCamera: boolean;
        isStatsEnabled: boolean;
        isTreeDestructionEnabled: boolean;
        havokCaptureToFile: boolean;
        showTriggerDebugText: boolean;
        isInternetSimulationEnabled: boolean;
        disableCutscenes: boolean;
        jobEnable: boolean;
        threadingEnable: boolean;
        drawActivePhysicsObjects: boolean;
        isRanked: boolean;
        unlockResolver: boolean;
        scoringLogEnabled: boolean;
        havokVisualDebugger: boolean;
        isSoldierDetailedCollisionEnabled: boolean;
        loadSavePoint: boolean;
        isSoldierAnimationEnabled: boolean;
        isAiEnabled: boolean;
        isReconfigurable: boolean;
        isDestructionEnabled: boolean;
        forcePlaylist: boolean;
        isNetworkStatsEnabled: boolean;
        autoUnspawnBangers: boolean;
        regulatedAIThrottle: boolean;
        enableAnimationCulling: boolean;
        fallBackToSquadSpawn: boolean;
        allowIndestructibleParts: boolean;
        isPresenceEnabled: boolean;
        waterPhysicsEnabled: boolean;
        respawnOnDeathPosition: boolean;
        isRenderDamageEvents: boolean;
        vehicleSpawnAllowed: boolean;
        queryProviderEnabled: boolean;
        isDesertingAllowed: boolean;
        debrisClusterEnabled: boolean;
        administrationEnabled: boolean;
        administrationLogEnabled: boolean;
        administrationTimeStampLogNames: boolean;
        administrationEventsEnabled: boolean;
        administrationServerNameRestricted: boolean;
        threadedLoadingEnable: boolean;
        vegetationEnabled: boolean;

    }

    export enum ServerUnlockListEventType {
        ServerUnlockListEventType_Add = 0,
        ServerUnlockListEventType_Remove = 1,
        ServerUnlockListEventType_Clear = 2,
        ServerUnlockListEventType_List = 3,
        ServerUnlockListEventType_Load = 4,
        ServerUnlockListEventType_Save = 5,
        ServerUnlockListEventType_GetMode = 6,
        ServerUnlockListEventType_SetMode = 7,
        ServerUnlockListEventType_SetFromBitmap = 8,
    }
    export enum ServerUnlockSystemType {
        ServerUnlockSystemType_All = 0,
        ServerUnlockSystemType_Common = 1,
        ServerUnlockSystemType_None = 2,
        ServerUnlockSystemType_FromStats = 3,
        ServerUnlockSystemType_FromWhiteList = 4,
        ServerUnlockSystemType_FromBlackList = 5,
        ServerUnlockSystemType_Count = 6,
    }
    class SettingConfig {

        /**
         * Creates a new SettingConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new SettingConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SettingConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        key: string;
        nameSid: string;
        descSid: string;
        max: number;
        default: number;
        min: number;
        ranked: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SettingConfig;

    }

    class SettingEntityData extends FB.EntityData {

        /**
         * Creates a new SettingEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SettingEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SettingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SettingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SettingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SettingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SettingEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        boolSettingName: string;
        intSettingName: string;
        floatSettingName: string;

    }

    class SettingsBundleAsset extends FB.Asset {

        /**
         * Creates a new SettingsBundleAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SettingsBundleAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SettingsBundleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SettingsBundleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SettingsBundleAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        settings: FB.SystemSettings[];

    }

    export enum ShaderBlendMode {
        ShaderBlendMode_Lerp = 0,
        ShaderBlendMode_Additive = 1,
        ShaderBlendMode_Multiply = 2,
        ShaderBlendMode_LerpPremultiplied = 3,
        ShaderBlendMode_DecalLerpNoSpec = 4,
        ShaderBlendMode_DecalLerpNormal = 5,
        ShaderBlendMode_DecalLerpNormalMultiplyDiffuse = 6,
        ShaderBlendMode_DecalLerpDiffuse = 7,
        ShaderBlendMode_DecalLerpDiffuseNoSpec = 8,
    }
    export enum ShaderBranchMethod {
        SbmStatic = 0,
        SbmFlat = 1,
        SbmDynamicIfElse = 2,
        SbmDynamicIfTrue = 3,
        SbmDynamicIfFalse = 4,
    }
    class ShaderColorUnlockPartCollection extends FB.ShaderCustomizationUnlockPartCollection {

        /**
         * Creates a new ShaderColorUnlockPartCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderColorUnlockPartCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ShaderCustomizationUnlockPartCollection to ShaderColorUnlockPartCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ShaderCustomizationUnlockPartCollection);
        /**
         * Casts an instance of type DataContainer to ShaderColorUnlockPartCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderColorUnlockPartCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultColorReference: FB.ColorReference | undefined;
        unlockParts: FB.ColorUnlockPartData[];

    }

    export enum ShaderComparisonOperator {
        ScoEquals = 0,
        ScoNotEquals = 1,
        ScoLess = 2,
        ScoLessEquals = 3,
        ScoGreater = 4,
        ScoGreaterEquals = 5,
    }
    export enum ShaderConstantFunction {
        ShaderConstantFunction_ViewMatrix = 0,
        ShaderConstantFunction_ViewProjMatrix = 1,
        ShaderConstantFunction_WorldViewMatrix = 2,
        ShaderConstantFunction_WorldViewProjMatrix = 3,
        ShaderConstantFunction_CrViewProjMatrix = 4,
        ShaderConstantFunction_CrWorldViewProjMatrix = 5,
        ShaderConstantFunction_CameraPos = 6,
        ShaderConstantFunction_PrevViewProjMatrix = 7,
        ShaderConstantFunction_PrevWorldViewProjMatrix = 8,
        ShaderConstantFunction_WorldMatrix = 9,
        ShaderConstantFunction_PrevWorldMatrix = 10,
        ShaderConstantFunction_BoneVectors = 11,
        ShaderConstantFunction_PrevBoneVectors = 12,
        ShaderConstantFunction_LightProbeShR = 13,
        ShaderConstantFunction_LightProbeShG = 14,
        ShaderConstantFunction_LightProbeShB = 15,
        ShaderConstantFunction_LightProbeShO = 16,
        ShaderConstantFunction_LightMapUvTransform = 17,
        ShaderConstantFunction_LightMapUvTranslation = 18,
        ShaderConstantFunction_LightMapIrradianceTexture = 19,
        ShaderConstantFunction_LightMapIrradianceChromaTexture = 20,
        ShaderConstantFunction_LightMapIrradianceLumaTexture = 21,
        ShaderConstantFunction_LightMapDirectionTexture = 22,
        ShaderConstantFunction_LightMapSkyVisibilityTexture = 23,
        ShaderConstantFunction_DepthBufferTexture = 24,
        ShaderConstantFunction_ViewportZMinMaxKzKw = 25,
        ShaderConstantFunction_Time = 26,
        ShaderConstantFunction_ScreenSize = 27,
        ShaderConstantFunction_OutdoorLightDir = 28,
        ShaderConstantFunction_OutdoorLightHemisphereDir = 29,
        ShaderConstantFunction_OutdoorLightKeyColor = 30,
        ShaderConstantFunction_OutdoorLightKeySpecularColorAndHemisphereVisibility = 31,
        ShaderConstantFunction_OutdoorLightTopColor = 32,
        ShaderConstantFunction_OutdoorLightBottomColor = 33,
        ShaderConstantFunction_OutdoorLightShadowTransform = 34,
        ShaderConstantFunction_OutdoorLightShadowmapSizeAndInvSize = 35,
        ShaderConstantFunction_OutdoorLightShadowmapTexture = 36,
        ShaderConstantFunction_OutdoorLightTransparencyShadowmapTexture = 37,
        ShaderConstantFunction_OutdoorLightSkyEnvmap = 38,
        ShaderConstantFunction_OutdoorLightDynamicEnvmap = 39,
        ShaderConstantFunction_OutdoorLightTopColorEnvmap = 40,
        ShaderConstantFunction_OutdoorLightBottomColorEnvmap = 41,
        ShaderConstantFunction_OutdoorLightKeyColorEnvmap = 42,
        ShaderConstantFunction_OutdoorLightSkyEnvmap8BitTexInvScale = 43,
        ShaderConstantFunction_TransparentStartAndEndAndClamp = 44,
        ShaderConstantFunction_BestFitNormalScaleTexture = 45,
        ShaderConstantFunction_SceneTexture = 46,
        ShaderConstantFunction_ColorScale = 47,
        ShaderConstantFunction_DebugNonFiniteColor = 48,
        ShaderConstantFunction_XenonInstancingIndexCount = 49,
        ShaderConstantFunction_Ps3ClipPlane = 50,
        ShaderConstantFunction_DxVectorBufferOffsets = 51,
        ShaderConstantFunctionCount = 52,
    }
    export enum ShaderConstantSystemTexture {
        ShaderConstantSystemTexture_DepthBufferTexture = 0,
        ShaderConstantSystemTextureCount = 1,
    }
    class ShaderCustomizationUnlockPartCollection extends VUShared.DataContainer {

        /**
         * Creates a new ShaderCustomizationUnlockPartCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderCustomizationUnlockPartCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ShaderCustomizationUnlockPartCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderCustomizationUnlockPartCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        meshBlueprints: FB.ObjectBlueprint[];
        shaderNodeName: string;
        meshMaterials: FB.CustomizedMeshMaterialsData[];

    }

    class ShaderDatabaseAsset extends FB.Asset {

        /**
         * Creates a new ShaderDatabaseAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderDatabaseAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to ShaderDatabaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ShaderDatabaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderDatabaseAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelName: string;

    }

    export enum ShaderDepthBiasGroup {
        ShaderDepthBiasGroup_Default = 0,
        ShaderDepthBiasGroup_Decal = 1,
        ShaderDepthBiasGroup_EmitterOcclusion = 2,
        ShaderDepthBiasGroup_EdgeModel = 3,
        ShaderDepthBiasGroup_TerrainDecal = 4,
        ShaderDepthBiasGroup_TerrainDecalZPass = 5,
        ShaderDepthBiasGroup_Shadow16Bit = 6,
        ShaderDepthBiasGroup_Shadow24Bit = 7,
        ShaderDepthBiasGroup_ZPass = 8,
        ShaderDepthBiasGroup_Emissive = 9,
        ShaderDepthBiasGroupCount = 10,
    }
    export enum ShaderGBufferLayout {
        ShaderGBufferLayout_Default = 0,
        ShaderGBufferLayout_Test = 1,
    }
    export enum ShaderGeometrySpace {
        ShaderGeometrySpace_Object = 0,
        ShaderGeometrySpace_ObjectScaled = 1,
        ShaderGeometrySpace_World = 2,
        ShaderGeometrySpace_Screen = 3,
    }
    class ShaderGraph extends FB.SurfaceShaderBaseAsset {

        /**
         * Creates a new ShaderGraph frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderGraph frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SurfaceShaderBaseAsset to ShaderGraph. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SurfaceShaderBaseAsset);
        /**
         * Casts an instance of type Asset to ShaderGraph. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ShaderGraph. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderGraph type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxSubMaterialCount: number;
        gammaCorrectionEnable: boolean;

    }

    export enum ShaderInstancingMethod {
        ShaderInstancingMethod_None = 0,
        ShaderInstancingMethod_ObjectTransform4x3Half = 1,
        ShaderInstancingMethod_ObjectTransform4x3InstanceData4x1Half = 2,
        ShaderInstancingMethod_ObjectTransform4x3InstanceData4x2Half = 3,
        ShaderInstancingMethod_WorldTransform4x3Float = 4,
        ShaderInstancingMethod_ObjectTranslationScaleHalf = 5,
        ShaderInstancingMethod_ObjectTranslationScaleHalfInstanceData4x1Half = 6,
        ShaderInstancingMethod_ObjectTranslationScaleHalfInstanceData4x2Half = 7,
        ShaderInstancingMethod_VertexAnimation = 8,
        ShaderInstancingMethod_DxBuffer = 9,
        ShaderInstancingMethodCount = 10,
    }
    export enum ShaderInterpolationType {
        ShaderInterpolationType_Linear = 0,
        ShaderInterpolationType_Centroid = 1,
        ShaderInterpolationType_NoInterpolation = 2,
        ShaderInterpolationType_NoPerspective = 3,
        ShaderInterpolationType_Sample = 4,
        ShaderInterpolationType_Count = 5,
    }
    export enum ShaderLightingModel {
        ShaderLightingModel_Standard = 0,
        ShaderLightingModel_Metallic = 1,
        ShaderLightingModel_Skin = 2,
        ShaderLightingModel_DynamicEnvmap = 3,
        ShaderLightingModel_Translucent = 4,
    }
    export enum ShaderObjectLighting {
        ShaderObjectLighting_None = 0,
        ShaderObjectLighting_LightProbe = 1,
        ShaderObjectLighting_LightMap = 2,
    }
    class ShaderParameterComponentData extends FB.ComponentData {

        /**
         * Creates a new ShaderParameterComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderParameterComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to ShaderParameterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ShaderParameterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ShaderParameterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ShaderParameterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderParameterComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shaderParameterVectors: FB.ShaderParameterVector[];

    }

    export enum ShaderParameterType {
        ShaderParameterType_Bool = 0,
        ShaderParameterType_Int = 1,
        ShaderParameterType_Scalar = 2,
        ShaderParameterType_Vec2 = 3,
        ShaderParameterType_Vec3 = 4,
        ShaderParameterType_Vec4 = 5,
        ShaderParameterType_Color = 6,
        ShaderParameterType_TextureSlice = 7,
        ShaderParameterTypeCount = 8,
    }
    class ShaderParameterVector {

        /**
         * Creates a new ShaderParameterVector frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderParameterVector frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ShaderParameterVector type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: VUShared.Vec4;
        parameterName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ShaderParameterVector;

    }

    class ShaderParamsComponentData extends FB.ComponentData {

        /**
         * Creates a new ShaderParamsComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderParamsComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to ShaderParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to ShaderParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ShaderParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ShaderParamsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderParamsComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: VUShared.Vec4;
        parameterName: string;

    }

    export enum ShaderPortType {
        SptBool = 0,
        SptInteger = 1,
        SptScalar = 2,
        SptVec2 = 3,
        SptVec3 = 4,
        SptVec4 = 5,
        SptColor = 6,
    }
    export enum ShaderPositionSpace {
        ShaderPositionSpace_Object = 0,
        ShaderPositionSpace_World = 1,
    }
    export enum ShaderProgram {
        ShaderProgram_DebugRender_Font2d = 0,
        ShaderProgram_DebugRender_FontShadow2d = 1,
        ShaderProgram_DebugRender_Color2d = 2,
        ShaderProgram_DebugRender_Color3d = 3,
        ShaderProgram_DebugRender_Lit3d = 4,
        ShaderProgram_DebugRender_LitGrid3d = 5,
        ShaderProgram_SimpleWhite = 6,
        ShaderProgram_MaterialID = 7,
        ShaderProgram_DownsampleQuarter = 8,
        ShaderProgram_DownsampleQuarterZ = 9,
        ShaderProgram_DownsampleHalf = 10,
        ShaderProgram_DownsampleDepthHalfSingleSample = 11,
        ShaderProgram_DownsampleHalfGrayscaleLog = 12,
        ShaderProgram_DownsampleCubeHalfPoisson13 = 13,
        ShaderProgram_DownsampleCubeHalfPoisson13Clamped = 14,
        ShaderProgram_SeperableFilter = 15,
        ShaderProgram_GaussianBlurRgb15HCube = 16,
        ShaderProgram_GaussianBlurRgb15VCube = 17,
        ShaderProgram_FastGaussian9H = 18,
        ShaderProgram_FastGaussian9V = 19,
        ShaderProgram_GreyscaleGaussian9H = 20,
        ShaderProgram_GreyscaleGaussian9V = 21,
        ShaderProgram_CosineBlurRgbHCube = 22,
        ShaderProgram_CosineBlurRgbVCube = 23,
        ShaderProgram_GaussianBlurRgba15HCube = 24,
        ShaderProgram_GaussianBlurRgba15VCube = 25,
        ShaderProgram_CosineBlurRgbaHCube = 26,
        ShaderProgram_CosineBlurRgbaVCube = 27,
        ShaderProgram_Tex2d = 28,
        ShaderProgram_Tex2dConstantAlpha = 29,
        ShaderProgram_Tex2dSaturateAlpha = 30,
        ShaderProgram_Tex2dAlpha = 31,
        ShaderProgram_Tex2dAlphaOverlayAdd = 32,
        ShaderProgram_Tex2dAlphaOverlayLerp = 33,
        ShaderProgram_Tex2dPow = 34,
        ShaderProgram_Tex2dPowAlpha = 35,
        ShaderProgram_Tex2dMrt2 = 36,
        ShaderProgram_Tex2dMrt3 = 37,
        ShaderProgram_Tex2dMrt4 = 38,
        ShaderProgram_Tex2dGrayscaleLog = 39,
        ShaderProgram_Tex3d = 40,
        ShaderProgram_TexCube = 41,
        ShaderProgram_TexCubeAlpha = 42,
        ShaderProgram_TexCubeAlphaOverlayAdd = 43,
        ShaderProgram_TexCubeAlphaOverlayLerp = 44,
        ShaderProgram_Color = 45,
        ShaderProgram_Tonemap = 46,
        ShaderProgram_ColorGrade = 47,
        ShaderProgram_Dof = 48,
        ShaderProgram_UnprojectDepthBuffer = 49,
        ShaderProgram_UnprojectDepthBufferHalf = 50,
        ShaderProgram_UnprojectDepthBufferMsaa = 51,
        ShaderProgram_SingleDepthSampleMsaa = 52,
        ShaderProgram_MaxDepthSampleMsaa = 53,
        ShaderProgram_TexYCrCb = 54,
        ShaderProgram_CombineTextures2 = 55,
        ShaderProgram_CombineTextures3 = 56,
        ShaderProgram_CombineTextures4 = 57,
        ShaderProgram_CombineTextures5 = 58,
        ShaderProgram_CombineTextures6 = 59,
        ShaderProgram_CombineTextures2Bilinear = 60,
        ShaderProgram_CombineTextures3Bilinear = 61,
        ShaderProgram_CombineTextures4Bilinear = 62,
        ShaderProgram_CombineTextures5Bilinear = 63,
        ShaderProgram_CombineTextures6Bilinear = 64,
        ShaderProgram_CombineOpaqueAndTrans2d = 65,
        ShaderProgram_CombineOpaqueAndTransCube = 66,
        ShaderProgram_CombineOpaqueAndTrans2dSpecial = 67,
        ShaderProgram_CombineOpaqueAndTransCubeSpecial = 68,
        ShaderProgram_CrtHudFx = 69,
        ShaderProgram_CrtAnalogLinkHudFx = 70,
        ShaderProgram_RadialBlur = 71,
        ShaderProgram_PoissonRadialBlur = 72,
        ShaderProgram_ChromaticAberrationWithRadialBlend = 73,
        ShaderProgram_FLIR = 74,
        ShaderProgram_ColorTint = 75,
        ShaderProgram_WriteZ = 76,
        ShaderProgram_WriteHalfResZ = 77,
        ShaderProgram_WriteHalfResZFat = 78,
        ShaderProgram_WriteHalfResZAverage = 79,
        ShaderProgram_LinearZ = 80,
        ShaderProgram_ParticleVertexShadows = 81,
        ShaderProgram_ParticleVertexShadowsAccum = 82,
        ShaderProgram_ParticleVertexShadowsAccumBlend = 83,
        ShaderProgram_HalfResUpsampleBilateral = 84,
        ShaderProgram_HalfResUpsampleBilateralTiled = 85,
        ShaderProgram_HalfResUpsampleBilinearTiled = 86,
        ShaderProgram_HalfResCategorize = 87,
        ShaderProgram_HalfResCategorizeDownsample = 88,
        ShaderProgram_DigitalDistortion = 89,
        ShaderProgram_MotionBlur = 90,
        ShaderProgram_CalcVelocityFromZBuffer = 91,
        ShaderProgram_FXAA = 92,
        ShaderProgram_HorizonBasedAO = 93,
        ShaderProgram_HorizonBasedAO_BlurPS = 94,
        ShaderProgram_HorizonBasedAO_BlurCS = 95,
        ShaderProgram_HorizonBasedAO_PackAODepth = 96,
        ShaderProgram_HorizonBasedAO_CompositeTemporal = 97,
        ShaderProgram_HorizonBasedAO_NoiseDetection = 98,
        ShaderProgram_SSAO = 99,
        ShaderProgram_SSAO_DilateDraw = 100,
        ShaderProgram_LightTileDownsampleHalf = 101,
        ShaderProgram_LightTileDownsampleHalfStage2 = 102,
        ShaderProgram_LightTileDownsampleHalfStage3 = 103,
        ShaderProgram_TiledLightVisibility_Point = 104,
        ShaderProgram_TiledLightVisibility_Spot = 105,
        ShaderProgram_TiledLightVisibility_Line = 106,
        ShaderProgram_TiledLightVisibility_CalcTileFrustaData = 107,
        ShaderProgram_DeferredGBufferSimpleFixup = 108,
        ShaderProgram_MsaaClassify = 109,
        ShaderProgram_DeferredPointLight = 110,
        ShaderProgram_DeferredPointLightCS = 111,
        ShaderProgram_DeferredPointLightTile = 112,
        ShaderProgram_DeferredPointLightZ = 113,
        ShaderProgram_DeferredLineLight = 114,
        ShaderProgram_DeferredLineLightTile = 115,
        ShaderProgram_DeferredSpotLight = 116,
        ShaderProgram_DeferredSpotLightZ = 117,
        ShaderProgram_DeferredConeLight = 118,
        ShaderProgram_DeferredConeLightTile = 119,
        ShaderProgram_DeferredOutdoorLight = 120,
        ShaderProgram_DeferredOutdoorLightTile = 121,
        ShaderProgram_DeferredShadow = 122,
        ShaderProgram_Sky = 123,
        ShaderProgram_HeightfieldTessellation = 124,
        ShaderProgram_XenonMemCopy = 125,
        ShaderProgram_XenonFastUntile = 126,
        ShaderProgram_XenonFastDepthStencilFill = 127,
        ShaderProgram_XenonFastDepthStencilFill_ZOnly = 128,
        ShaderProgram_XenonJobEnable = 129,
        ShaderProgram_Ui_Textured = 130,
        ShaderProgram_Ui_Textured2 = 131,
        ShaderProgram_Ui_Textured3 = 132,
        ShaderProgram_Ui_Textured2GlobalColor = 133,
        ShaderProgram_Ui_Scaleform_StripSolidColor = 134,
        ShaderProgram_Ui_Scaleform_StripCxformTextureMultiply = 135,
        ShaderProgram_Ui_Scaleform_StripCxformTexture = 136,
        ShaderProgram_Ui_Scaleform_StripCxformGauraudNoAddAlpha = 137,
        ShaderProgram_Ui_Scaleform_StripCxformGauraud = 138,
        ShaderProgram_Ui_Scaleform_StripCxformGauraudTexture = 139,
        ShaderProgram_Ui_Scaleform_StripCxform2Texture = 140,
        ShaderProgram_Ui_Scaleform_StripCxformGauraudMultiply = 141,
        ShaderProgram_Ui_Scaleform_StripCxformGauraudMultiplyNoAddAlpha = 142,
        ShaderProgram_Ui_Scaleform_StripCxformGauraudMultiplyTexture = 143,
        ShaderProgram_Ui_Scaleform_StripCxformMultiply2Texture = 144,
        ShaderProgram_Ui_Scaleform_XY16iC32SolidColor = 145,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformTextureMultiply = 146,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformTexture = 147,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudNoAddAlpha = 148,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraud = 149,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudTexture = 150,
        ShaderProgram_Ui_Scaleform_XY16iC32Cxform2Texture = 151,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudMultiply = 152,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudMultiplyNoAddAlpha = 153,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudMultiplyTexture = 154,
        ShaderProgram_Ui_Scaleform_XY16iC32CxformMultiply2Texture = 155,
        ShaderProgram_Ui_Scaleform_XY16iCF32SolidColor = 156,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformTextureMultiply = 157,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformTexture = 158,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudNoAddAlpha = 159,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraud = 160,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudTexture = 161,
        ShaderProgram_Ui_Scaleform_XY16iCF32Cxform2Texture = 162,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudMultiply = 163,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudMultiplyNoAddAlpha = 164,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudMultiplyTexture = 165,
        ShaderProgram_Ui_Scaleform_XY16iCF32CxformMultiply2Texture = 166,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2SolidColor = 167,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformTextureMultiply = 168,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformTexture = 169,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudNoAddAlpha = 170,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraud = 171,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudTexture = 172,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2Cxform2Texture = 173,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudMultiply = 174,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudMultiplyNoAddAlpha = 175,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudMultiplyTexture = 176,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformMultiply2Texture = 177,
        ShaderProgram_Ui_Scaleform_GlyphTextTextureAlpha = 178,
        ShaderProgram_Ui_Scaleform_GlyphTextTextureColorMultiply = 179,
        ShaderProgram_Ui_Scaleform_GlyphTextTextureColor = 180,
        ShaderProgram_Ui_Scaleform_StripFilterBlur = 181,
        ShaderProgram_Ui_Scaleform_StripFilterShadow = 182,
        ShaderProgram_Ui_Scaleform_XY16iC32FilterBlur = 183,
        ShaderProgram_Ui_Scaleform_XY16iC32FilterShadow = 184,
        ShaderProgram_Ui_Scaleform_XY16iCF32FilterBlur = 185,
        ShaderProgram_Ui_Scaleform_XY16iCF32FilterShadow = 186,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2FilterBlur = 187,
        ShaderProgram_Ui_Scaleform_XY16iCF32_T2FilterShadow = 188,
        ShaderProgram_Ui_Scaleform_GlyphFilterBlur = 189,
        ShaderProgram_Ui_Scaleform_GlyphFilterShadow = 190,
        ShaderProgram_Ui_Minimap = 191,
        ShaderProgram_Ui_MinimapIcon = 192,
        ShaderProgram_Ui_CombatArea = 193,
        ShaderProgram_ExperimentShader_A = 194,
        ShaderProgram_ExperimentShader_B = 195,
        ShaderProgram_TextureCompress_A = 196,
        ShaderProgram_TextureCompress_DXT1 = 197,
        ShaderProgram_TextureCompress_DXT5 = 198,
        ShaderProgram_ErrorDifferenceSurface_RGB = 199,
        ShaderProgram_ErrorDifferenceSurface_Alpha = 200,
        ShaderProgram_XenonEncodeDXT5MemExport = 201,
        ShaderProgram_TerrainEncodeSurface_A = 202,
        ShaderProgram_TerrainEncodeSurface_B = 203,
        ShaderProgram_TerrainPatchVertexYFetch = 204,
        ShaderProgram_TerrainMeshScatteringYFetch = 205,
        ShaderProgram_TexYCrCbA = 206,
        ShaderProgram_RgbSeparation = 207,
        ShaderProgram_Distort = 208,
        ShaderProgram_DiffusionDofComputeRadius = 209,
        ShaderProgram_DiffusionDofTridiagonalFill = 210,
        ShaderProgram_DiffusionDofForwardCR = 211,
        ShaderProgram_DiffusionDofBackwardCR = 212,
        ShaderProgram_DiffusionDofSolveFinal = 213,
        ShaderProgram_DiffusionDofOutputPS = 214,
        ShaderProgram_DiffusionDofLinearRadiusPS = 215,
        ShaderProgram_DiffusionDofNonLinearRadiusPS = 216,
        ShaderProgram_DiffusionDofDetectForegroundPS = 217,
        ShaderProgram_DiffusionDofCombineForegroundPS = 218,
        ShaderProgram_DiffusionDofBlurXForegroundPS = 219,
        ShaderProgram_DiffusionDofBlurYForegroundPS = 220,
        ShaderProgram_Ui_DetailTexturedMinimap = 221,
        ShaderProgramCount = 222,
    }
    export enum ShaderRenderMode {
        ShaderRenderMode_Default = 0,
        ShaderRenderMode_DynamicEnvmap = 1,
        ShaderRenderMode_ZOnly = 2,
        ShaderRenderMode_DeferredShadingGBufferLayout0 = 3,
        ShaderRenderMode_DeferredShadingGBufferLayout1 = 4,
        ShaderRenderMode_DeferredShadingEmissive = 5,
        ShaderRenderMode_DeferredShadingUnlit = 6,
        ShaderRenderMode_VelocityVector = 7,
        ShaderRenderMode_DistortionVector = 8,
        ShaderRenderMode_AmbientOcclusionVolume = 9,
        ShaderRenderMode_DebugSimple = 10,
        ShaderRenderMode_DebugMulti = 11,
        ShaderRenderMode_DebugOverdraw = 12,
        ShaderRenderMode_DebugShaderCost = 13,
        ShaderRenderModeCount = 14,
    }
    export enum ShaderRenderPath {
        ShaderRenderPath_Dx10 = 0,
        ShaderRenderPath_Dx10Plus = 1,
        ShaderRenderPath_Dx10_1 = 2,
        ShaderRenderPath_Dx11 = 3,
        ShaderRenderPath_Xenon = 4,
        ShaderRenderPath_Ps3 = 5,
        ShaderRenderPath_Gl = 6,
        ShaderRenderPathCount = 7,
    }
    export enum ShaderShadowmapMethod {
        ShaderShadowmapMethod_None = 0,
        ShaderShadowmapMethod_Single = 1,
        ShaderShadowmapMethod_SingleDiscard = 2,
        ShaderShadowmapMethod_CascadedBox3 = 3,
        ShaderShadowmapMethod_CascadedBox4 = 4,
    }
    export enum ShaderShadowmapQuality {
        ShaderShadowmapQuality_Pcf2x2 = 0,
        ShaderShadowmapQuality_Pcf4x4 = 1,
        ShaderShadowmapQuality_Gaussian = 2,
    }
    export enum ShaderSkinningMethod {
        ShaderSkinningMethod_None = 0,
        ShaderSkinningMethod_Linear1Bone = 1,
        ShaderSkinningMethod_Linear2Bone = 2,
        ShaderSkinningMethod_Linear4Bone = 4,
        ShaderSkinningMethod_Linear8Bone = 8,
        ShaderSkinningMethod_Null = 9,
        ShaderSkinningMethod_DualQuaternion4Bone = 10,
    }
    export enum ShaderStageType {
        ShaderStageType_Vertex = 0,
        ShaderStageType_Pixel = 1,
        ShaderStageType_Hull = 2,
        ShaderStageType_Domain = 3,
        ShaderStageType_Geometry = 4,
        ShaderStageType_Compute = 5,
        ShaderStageTypeCount = 6,
    }
    class ShaderSystemSettings extends VUShared.DataContainer {

        /**
         * Creates a new ShaderSystemSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderSystemSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ShaderSystemSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderSystemSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugNonFiniteColor: VUShared.Vec3;
        dxInstancingBufferHandlingMethod: number;
        frameMemoryBufferSize: number;
        xenonDispatchCmdBufferSize: number;
        xenonDispatchCmdBufferSegmentSize: number;
        dxDispatchJobBlocksPerCommandList: number;
        dxDispatchJobMinBlockCount: number;
        dxFrameVertexBufferPoolSize: number;
        xenonDispatchOnlyJob: number;
        dxVsExternalConstantBufferSize: number;
        dxVsFunctionConstantBufferSize: number;
        dxPsFunctionConstantBufferSize: number;
        ps3GeometryYieldGranularity: number;
        xenonDispatchJobCount: number;
        dispatchPrepareJobCount: number;
        ps3MinMipmap: number;
        ps3ZCullInFrontLimit: number;
        ps3ZCullBehindLimit: number;
        ps3DispatchOnlyJob: number;
        ps3DispatchJobSpuCount: number;
        dxMaxInstructionCount: number;
        overdrawMaxLayerCount: number;
        ps3GeometryJobCount: number;
        dxMaxInstanceCount: number;
        ps3DispatchYieldGranularity: number;
        dxPsExternalConstantBufferSize: number;
        xenonDispatchBlocksPerJob: number;
        ps3DispatchJobCount: number;
        dxDispatchJobCount: number;
        drawCallMultiplier: number;
        ps3MaxMipmap: number;
        mipmapBias: number;
        maxAnisotropy: number;
        zOnlyMaxAnisotropy: number;
        xenonTrilinearThreshold: number;
        ps3DispatchJobPriority: number;
        xenonDispatchMinJobBlockCount: number;
        ps3GeometryJobSpuCount: number;
        ps3DispatchBlocksPerJob: number;
        ps3GeometryJobPriority: number;
        singlePrimitiveEnable: boolean;
        sortBlocksEnable: boolean;
        drawCallEnable: boolean;
        gcmReplayMarkersEnable: boolean;
        clipPlanesEnable: boolean;
        depthTestEnable: boolean;
        stencilEnable: boolean;
        shaderPixScopeEnable: boolean;
        singleFrameBlockLogEnable: boolean;
        alphaBlendEnable: boolean;
        pixBlockEventsEnable: boolean;
        simpleTexturesEnable: boolean;
        simpleVertexShaderEnable: boolean;
        pseudoInstancingEnable: boolean;
        statesEnable: boolean;
        pixelConstantsEnable: boolean;
        vertexConstantsEnable: boolean;
        pixelConstantRedundancyCheckingEnable: boolean;
        vertexConstantRedundancyCheckingEnable: boolean;
        simpleTextureFilteringEnable: boolean;
        depthWriteEnable: boolean;
        dispatchDirectEnable: boolean;
        drawTileClassifiedBlocks: boolean;
        depthEnable: boolean;
        drawStreamedTextureBlocks: boolean;
        forcePointFiltering: boolean;
        logEnable: boolean;
        zeroViewportEnable: boolean;
        drawTransparentDecal: boolean;
        singleFrameLogEnable: boolean;
        singleFrameLogOverwrite: boolean;
        forceDoubleSided: boolean;
        onDemandMonitoringEnable: boolean;
        ps3PixelShaderRedundancyCheckingEnable: boolean;
        ps3PixelShaderHashStoreEnable: boolean;
        ps3DispatchPrepareSpuJobEnable: boolean;
        ps3DispatchSetupSpuJobEnable: boolean;
        ps3GeometryJobEnable: boolean;
        databaseLoadingEnable: boolean;
        simplePixelShaderEnable: boolean;
        ps3GeometryJobWithoutDispatchJobEnable: boolean;
        ps3GeometryDebugRenderEnable: boolean;
        boneConstantOptimizationEnable: boolean;
        ps3DrawEdgeGeometryEnable: boolean;
        ps3DrawNonEdgeGeometryEnable: boolean;
        ps3TriangleCullEnable: boolean;
        ps3TriangleFrustumCullEnable: boolean;
        ps3TriangleBackfaceCullEnable: boolean;
        ps3TriangleCullZPassEnable: boolean;
        ps3TriangleCullDoubleSidedEnable: boolean;
        ps3TriangleCull1BoneSkinningEnable: boolean;
        ps3TriangleCull4BoneSkinningEnable: boolean;
        ps3TrianglePartCullEnable: boolean;
        ps3DrawBlockCullEnable: boolean;
        ps3PartitionFrustumCullEnable: boolean;
        ps3PartitionClipPlaneCullEnable: boolean;
        ps3PartitionVolumeCullEnable: boolean;
        ps3SpuInstancingEnable: boolean;
        ps3SpuClipPlaneRejectEnable: boolean;
        ps3SpuCullVolumesEnable: boolean;
        ps3DispatchJobEnable: boolean;
        onDemandBuildingEnable: boolean;
        onDemandPrimingEnable: boolean;
        dispatchExecuteEnable: boolean;
        textureGammaCorrectionEnable: boolean;
        tileClassificationEnable: boolean;
        ps3DispatchSpuBufferLinkingEnable: boolean;
        ps3DispatchFrameBlockEnable: boolean;
        ps3SCullEnable: boolean;
        ps3ZCullEnable: boolean;
        drawInstancedBlocks: boolean;
        dispatchPrepareBlockEnable: boolean;
        drawNonInstancedBlocks: boolean;
        drawNonStreamedTextureBlocks: boolean;
        ps3TxpDemotionEnable: boolean;
        ps3CmdBufVertexShaderInlineEnable: boolean;
        ps3CmdBufClearEnable: boolean;
        ps3SpuYieldingEnable: boolean;
        xenonDispatchJobEnable: boolean;
        drawInlineBlocks: boolean;
        ps3FlushEnable: boolean;
        ps3FinishEnable: boolean;
        dxMultisampleEnable: boolean;
        dxTransparencySupersamplingEnable: boolean;
        dxSamplerStatesEnable: boolean;
        dxBatchedSamplerStatesEnable: boolean;
        dxBatchedTexturesEnable: boolean;
        dxStatesEnable: boolean;
        drawOpaqueAlphaTestSimple: boolean;
        flushEnable: boolean;
        drawTransparent: boolean;
        drawAdvancedStats: boolean;
        dxParallelShaderLoadingEnable: boolean;
        dxDelayedShaderLoadingEnable: boolean;
        drawOpaque: boolean;
        drawOpaqueAlphaTest: boolean;
        xenonHiZEnable: boolean;
        drawZOnly: boolean;
        drawStats: boolean;
        xenonDispatchBlockOnCmdBufEnable: boolean;

    }

    export enum ShaderTextureCoordType {
        ShaderTextureCoordType_Unknown = 0,
        ShaderTextureCoordType_VertexElement = 1,
        ShaderTextureCoordType_WorldPos = 2,
    }
    export enum ShaderTextureDecompression {
        ShaderTextureDecompression_None = 0,
        ShaderTextureDecompression_NormalAG = 1,
        ShaderTextureDecompression_NormalRG = 2,
        ShaderTextureDecompression_NormalRGA = 3,
        ShaderTextureDecompression_RGBE = 4,
        ShaderTextureDecompression_SrgbToLinear = 5,
        ShaderTextureDecompression_NormalRGorAG = 6,
    }
    class ShaderTextureUnlockPartCollection extends FB.ShaderCustomizationUnlockPartCollection {

        /**
         * Creates a new ShaderTextureUnlockPartCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShaderTextureUnlockPartCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ShaderCustomizationUnlockPartCollection to ShaderTextureUnlockPartCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ShaderCustomizationUnlockPartCollection);
        /**
         * Casts an instance of type DataContainer to ShaderTextureUnlockPartCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShaderTextureUnlockPartCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultTextureReference: FB.TextureReference | undefined;
        unlockParts: FB.TextureUnlockPartData[];

    }

    export enum ShaderTimeType {
        ShaderTimeType_Game = 0,
        ShaderTimeType_Real = 1,
    }
    export enum ShaderValueFormat {
        ShaderValueFormat_Half = 0,
        ShaderValueFormat_Float = 1,
        ShaderValueFormat_Int = 2,
        ShaderValueFormat_UInt = 3,
        ShaderValueFormat_Bool = 4,
    }
    export enum ShaderValueParameterType {
        SvptLiteral = 0,
        SvptExternalPermutation = 1,
        SvptExternalConstant = 2,
        SvptExternalSubMaterial = 3,
    }
    export enum ShaderValueType {
        ShaderValueType_None = 0,
        ShaderValueType_Half1 = 1,
        ShaderValueType_Half1x2 = 2,
        ShaderValueType_Half1x3 = 3,
        ShaderValueType_Half1x4 = 4,
        ShaderValueType_Half2 = 5,
        ShaderValueType_Half2x2 = 6,
        ShaderValueType_Half2x3 = 7,
        ShaderValueType_Half2x4 = 8,
        ShaderValueType_Half3 = 9,
        ShaderValueType_Half3x2 = 10,
        ShaderValueType_Half3x3 = 11,
        ShaderValueType_Half3x4 = 12,
        ShaderValueType_Half4 = 13,
        ShaderValueType_Half4x2 = 14,
        ShaderValueType_Half4x3 = 15,
        ShaderValueType_Half4x4 = 16,
        ShaderValueType_Float1 = 17,
        ShaderValueType_Float1x2 = 18,
        ShaderValueType_Float1x3 = 19,
        ShaderValueType_Float1x4 = 20,
        ShaderValueType_Float2 = 21,
        ShaderValueType_Float2x2 = 22,
        ShaderValueType_Float2x3 = 23,
        ShaderValueType_Float2x4 = 24,
        ShaderValueType_Float3 = 25,
        ShaderValueType_Float3x2 = 26,
        ShaderValueType_Float3x3 = 27,
        ShaderValueType_Float3x4 = 28,
        ShaderValueType_Float4 = 29,
        ShaderValueType_Float4x2 = 30,
        ShaderValueType_Float4x3 = 31,
        ShaderValueType_Float4x4 = 32,
        ShaderValueType_Int1 = 33,
        ShaderValueType_Int1x2 = 34,
        ShaderValueType_Int1x3 = 35,
        ShaderValueType_Int1x4 = 36,
        ShaderValueType_Int2 = 37,
        ShaderValueType_Int2x2 = 38,
        ShaderValueType_Int2x3 = 39,
        ShaderValueType_Int2x4 = 40,
        ShaderValueType_Int3 = 41,
        ShaderValueType_Int3x2 = 42,
        ShaderValueType_Int3x3 = 43,
        ShaderValueType_Int3x4 = 44,
        ShaderValueType_Int4 = 45,
        ShaderValueType_Int4x2 = 46,
        ShaderValueType_Int4x3 = 47,
        ShaderValueType_Int4x4 = 48,
        ShaderValueType_UInt1 = 49,
        ShaderValueType_UInt1x2 = 50,
        ShaderValueType_UInt1x3 = 51,
        ShaderValueType_UInt1x4 = 52,
        ShaderValueType_UInt2 = 53,
        ShaderValueType_UInt2x2 = 54,
        ShaderValueType_UInt2x3 = 55,
        ShaderValueType_UInt2x4 = 56,
        ShaderValueType_UInt3 = 57,
        ShaderValueType_UInt3x2 = 58,
        ShaderValueType_UInt3x3 = 59,
        ShaderValueType_UInt3x4 = 60,
        ShaderValueType_UInt4 = 61,
        ShaderValueType_UInt4x2 = 62,
        ShaderValueType_UInt4x3 = 63,
        ShaderValueType_UInt4x4 = 64,
        ShaderValueType_Bool1 = 65,
        ShaderValueType_Bool1x2 = 66,
        ShaderValueType_Bool1x3 = 67,
        ShaderValueType_Bool1x4 = 68,
        ShaderValueType_Bool2 = 69,
        ShaderValueType_Bool2x2 = 70,
        ShaderValueType_Bool2x3 = 71,
        ShaderValueType_Bool2x4 = 72,
        ShaderValueType_Bool3 = 73,
        ShaderValueType_Bool3x2 = 74,
        ShaderValueType_Bool3x3 = 75,
        ShaderValueType_Bool3x4 = 76,
        ShaderValueType_Bool4 = 77,
        ShaderValueType_Bool4x2 = 78,
        ShaderValueType_Bool4x3 = 79,
        ShaderValueType_Bool4x4 = 80,
        ShaderValueType_Sampler1d = 81,
        ShaderValueType_Sampler1dArray = 82,
        ShaderValueType_Sampler2d = 83,
        ShaderValueType_Sampler2dArray = 84,
        ShaderValueType_Sampler3d = 85,
        ShaderValueType_SamplerCube = 86,
    }
    export enum ShapeType {
        ShapeType_Hull = 0,
        ShapeType_Box = 1,
        ShapeType_OBB = 2,
        ShapeType_Sphere = 3,
        ShapeType_Cylinder = 4,
        ShapeType_Capsule = 5,
        ShapeType_Mesh = 6,
        ShapeType_Decompose = 7,
        ShapeType_Unknown = 8,
    }
    class ShootAtFromCoverData extends FB.EntityData {

        /**
         * Creates a new ShootAtFromCoverData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShootAtFromCoverData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ShootAtFromCoverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ShootAtFromCoverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ShootAtFromCoverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ShootAtFromCoverData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShootAtFromCoverData type.
         */
        static typeInfo: VUShared.TypeInformation;

        strengthType: FB.StrengthType;
        shootType: FB.ShootType;
        cycleTargets: boolean;
        randomTargetOrder: boolean;
        preferAlternativeWeapon: boolean;

    }

    export enum ShooterInfo {
        ShooterInfoInVehicle = 1,
        ShooterInfoInLandVehicle = 2,
        ShooterInfoInAerialVehicle = 4,
        ShooterInfoDrivingVehicle = 8,
        ShooterInfoInStationaryWeapon = 16,
        ShooterInfoInLightArmoredVehicle = 32,
        ShooterInfoInMediumArmoredVehicle = 64,
        ShooterInfoInHeavyArmoredVehicle = 128,
        ShooterInfoInBoat = 256,
        ShooterInfoUsedGrenade = 512,
        ShooterInfoUsedArtilleryStrike = 1024,
        ShooterInfoUsedLaserDesignator = 2048,
        ShooterInfoUsedMortarStrike = 4096,
        ShooterInfoUsedStingerMissile = 8192,
        ShooterInfoNoTeamKillPenalty = 16384,
    }
    class ShootOrderEntityData extends FB.BFOrderEntityData {

        /**
         * Creates a new ShootOrderEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShootOrderEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BFOrderEntityData to ShootOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BFOrderEntityData);
        /**
         * Casts an instance of type OrderEntityData to ShootOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OrderEntityData);
        /**
         * Casts an instance of type EntityData to ShootOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ShootOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ShootOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ShootOrderEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ShootOrderEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        strengthType: FB.StrengthType;
        pose: FB.PoseType;
        shootType: FB.ShootType;
        preferAlternativeWeapon: boolean;
        completeWhenHumanIsSensed: boolean;
        cycleTargets: boolean;
        randomTargetOrder: boolean;

    }

    export enum ShootType {
        ShootType_OneBurstPerTarget = 0,
        ShootType_Continuous = 1,
    }
    class ShotConfigData {

        /**
         * Creates a new ShotConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ShotConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ShotConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialPosition: VUShared.Vec3;
        initialDirection: VUShared.Vec3;
        initialSpeed: VUShared.Vec3;
        inheritWeaponSpeedAmount: number;
        muzzleExplosion: FB.ExplosionEntityData | undefined;
        projectileData: FB.ProjectileEntityData | undefined;
        secondaryProjectileData: FB.ProjectileEntityData | undefined;
        projectile: FB.ProjectileBlueprint | undefined;
        secondaryProjectile: FB.ProjectileBlueprint | undefined;
        alternateProjectiles: FB.UnlockableProjectile[];
        spawnDelay: number;
        numberOfBulletsPerShell: number;
        numberOfBulletsPerShot: number;
        numberOfBulletsPerBurst: number;
        relativeTargetAiming: boolean;
        forceSpawnToCamera: boolean;
        spawnVisualAtWeaponBone: boolean;
        activeForceSpawnToCamera: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ShotConfigData;

    }

    class SimpleAnimationControlBinding {

        /**
         * Creates a new SimpleAnimationControlBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleAnimationControlBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SimpleAnimationControlBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        locoTarget: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SimpleAnimationControlBinding;

    }

    class SimpleAnimationControlComponentData extends FB.ComponentData {

        /**
         * Creates a new SimpleAnimationControlComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleAnimationControlComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SimpleAnimationControlComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SimpleAnimationControlComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SimpleAnimationControlComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SimpleAnimationControlComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SimpleAnimationControlComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.SimpleAnimationControlBinding;
        animationEntitySpacePriority: number;
        run: boolean;

    }

    class SimpleMovementActionBaseData extends FB.MovementActionData {

        /**
         * Creates a new SimpleMovementActionBaseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleMovementActionBaseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MovementActionData to SimpleMovementActionBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovementActionData);
        /**
         * Casts an instance of type DataContainer to SimpleMovementActionBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SimpleMovementActionBaseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        startTimeInfo: FB.SimpleMovementActionTimeData;
        runTimeInfo: FB.SimpleMovementActionTimeData;

    }

    class SimpleMovementActionData extends FB.SimpleMovementActionBaseData {

        /**
         * Creates a new SimpleMovementActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleMovementActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimpleMovementActionBaseData to SimpleMovementActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimpleMovementActionBaseData);
        /**
         * Casts an instance of type MovementActionData to SimpleMovementActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovementActionData);
        /**
         * Casts an instance of type DataContainer to SimpleMovementActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SimpleMovementActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        level: number;
        action: FB.EntryInputActionEnum;
        specialAnimationIndex: number;
        respawn: boolean;
        teleport: boolean;

    }

    class SimpleMovementActionTimeData {

        /**
         * Creates a new SimpleMovementActionTimeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleMovementActionTimeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SimpleMovementActionTimeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        time: number;
        maxVariation: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SimpleMovementActionTimeData;

    }

    class SimplePropertyTrackData extends FB.PropertyTrackData {

        /**
         * Creates a new SimplePropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimplePropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyTrackData to SimplePropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to SimplePropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SimplePropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        interpolationType: FB.InterpolationType;

    }

    class SimpleTransformNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SimpleTransformNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleTransformNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SimpleTransformNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SimpleTransformNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SimpleTransformNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: FB.AudioGraphNodePort;
        y: FB.AudioGraphNodePort;
        z: FB.AudioGraphNodePort;
        operation: FB.SimpleTransformOperation;
        angleUnit: FB.AngleUnit;

    }

    export enum SimpleTransformOperation {
        SimpleTransformOperation_Add = 0,
        SimpleTransformOperation_Subtract = 1,
        SimpleTransformOperation_Multiply = 2,
        SimpleTransformOperation_Divide = 3,
        SimpleTransformOperation_Sine = 4,
        SimpleTransformOperation_Cosine = 5,
        SimpleTransformOperation_ArcSine = 6,
        SimpleTransformOperation_ArcCosine = 7,
        SimpleTransformOperation_Modulus = 8,
        SimpleTransformOperation_Round = 9,
        SimpleTransformOperation_Floor = 10,
        SimpleTransformOperation_Ceiling = 11,
        SimpleTransformOperation_Power = 12,
        SimpleTransformOperation_SquareRoot = 13,
        SimpleTransformOperation_Absolute = 14,
        SimpleTransformOperation_Exp = 15,
        SimpleTransformOperation_Log = 16,
        SimpleTransformOperation_Log10 = 17,
        SimpleTransformOperation_Tangent = 18,
        SimpleTransformOperation_ArcTangent = 19,
    }
    class SimpleValueSelectorNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SimpleValueSelectorNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SimpleValueSelectorNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SimpleValueSelectorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SimpleValueSelectorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SimpleValueSelectorNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outValues: number[];
        index: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;

    }

    class SingleTerrainLayerData extends FB.TerrainLayerData {

        /**
         * Creates a new SingleTerrainLayerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SingleTerrainLayerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TerrainLayerData to SingleTerrainLayerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TerrainLayerData);
        /**
         * Casts an instance of type DataContainer to SingleTerrainLayerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SingleTerrainLayerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SkeletonAsset extends FB.BaseSkeletonAsset {

        /**
         * Creates a new SkeletonAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkeletonAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BaseSkeletonAsset to SkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseSkeletonAsset);
        /**
         * Casts an instance of type Asset to SkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SkeletonAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SkeletonAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        boneNames: string[];
        hierarchy: number[];
        localPose: VUShared.LinearTransform[];
        modelPose: VUShared.LinearTransform[];
        weaponBoneName: string;
        headBoneName: string;
        hipBoneName: string;
        cameraBoneName: string;

    }

    class SkeletonCollisionData extends VUShared.DataContainer {

        /**
         * Creates a new SkeletonCollisionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkeletonCollisionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SkeletonCollisionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SkeletonCollisionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        skeletonAsset: FB.SkeletonAsset | undefined;
        boneCollisionData: FB.BoneCollisionData[];

    }

    class SkinnedMeshAsset extends FB.MeshAsset {

        /**
         * Creates a new SkinnedMeshAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkinnedMeshAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshAsset to SkinnedMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshAsset);
        /**
         * Casts an instance of type Asset to SkinnedMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SkinnedMeshAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SkinnedMeshAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        boundingBoxPositionOffset: VUShared.Vec3;
        boundingBoxSizeOffset: VUShared.Vec3;

    }

    class SkinnedSocketObjectData extends FB.SocketObjectData {

        /**
         * Creates a new SkinnedSocketObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkinnedSocketObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SocketObjectData to SkinnedSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectData);
        /**
         * Casts an instance of type SocketObjectDataBase to SkinnedSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectDataBase);
        /**
         * Casts an instance of type DataContainer to SkinnedSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SkinnedSocketObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        faceposerLibraryIndex: number;

    }

    export enum SKU {
        WW = 0,
        EU = 1,
        US = 2,
        JPN = 3,
        ROA = 4,
        RU = 5,
        EN = 6,
    }
    class SkyCloudLayer {

        /**
         * Creates a new SkyCloudLayer frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkyCloudLayer frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SkyCloudLayer type.
         */
        static typeInfo: VUShared.TypeInformation;

        color: VUShared.Vec3;
        tileFactor: number;
        rotation: number;
        altitude: number;
        speed: number;
        sunLightPower: number;
        ambientLightIntensity: number;
        sunLightIntensity: number;
        alphaMul: number;
        texture: FB.TextureAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SkyCloudLayer;

    }

    class SkyComponentData extends FB.ComponentData {

        /**
         * Creates a new SkyComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkyComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SkyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SkyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SkyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SkyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SkyComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cloudLayerSunColor: VUShared.Vec3;
        cloudLayer2Color: VUShared.Vec3;
        cloudLayer1Color: VUShared.Vec3;
        skyGradientTexture: FB.TextureAsset | undefined;
        sunSize: number;
        brightnessScale: number;
        sunScale: number;
        panoramicUVMaxX: number;
        panoramicUVMinY: number;
        panoramicUVMaxY: number;
        realm: FB.Realm;
        panoramicUVMinX: number;
        panoramicTexture: FB.TextureAsset | undefined;
        panoramicAlphaTexture: FB.TextureAsset | undefined;
        panoramicTileFactor: number;
        cloudLayerMaskTexture: FB.TextureAsset | undefined;
        cloudLayer1Altitude: number;
        cloudLayer1TileFactor: number;
        cloudLayer1Rotation: number;
        cloudLayer1Speed: number;
        cloudLayer1SunLightIntensity: number;
        panoramicRotation: number;
        cloudLayer1AmbientLightIntensity: number;
        cloudLayer1SunLightPower: number;
        cloudLayer1AlphaMul: number;
        cloudLayer1Texture: FB.TextureAsset | undefined;
        cloudLayer2Altitude: number;
        cloudLayer2TileFactor: number;
        cloudLayer2Rotation: number;
        cloudLayer2Speed: number;
        cloudLayer2SunLightIntensity: number;
        cloudLayer2SunLightPower: number;
        cloudLayer2AmbientLightIntensity: number;
        staticEnvmapScale: number;
        cloudLayer2AlphaMul: number;
        cloudLayer2Texture: FB.TextureAsset | undefined;
        staticEnvmapTexture: FB.TextureAsset | undefined;
        skyVisibilityExponent: number;
        skyEnvmap8BitTexScale: number;
        customEnvmapTexture: FB.TextureAsset | undefined;
        customEnvmapScale: number;
        customEnvmapAmbient: number;
        enable: boolean;

    }

    class SkyEffectState extends VUShared.DataContainer {

        /**
         * Creates a new SkyEffectState frostbite instance.
         */
        constructor();
        /**
         * Creates a new SkyEffectState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SkyEffectState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SkyEffectState type.
         */
        static typeInfo: VUShared.TypeInformation;

        cloudLayerSunColor: VUShared.Vec3;
        panoramicTileFactor: number;
        sunSize: number;
        skyGradientScale: number;
        sunScale: number;
        panoramicUVMinX: number;
        skyGradientTexture: FB.TextureAsset | undefined;
        panoramicUVMinY: number;
        panoramicUVMaxY: number;
        panoramicUVMaxX: number;
        panoramicRotation: number;
        panoramicTexture: FB.TextureAsset | undefined;
        panoramicAlphaTexture: FB.TextureAsset | undefined;
        windDirection: number;
        cloudLayerMaskTexture: FB.TextureAsset | undefined;
        cloudLayer1: FB.SkyCloudLayer;
        cloudLayer2: FB.SkyCloudLayer;
        staticEnvmapTexture: FB.TextureAsset | undefined;
        enable: boolean;

    }

    class SlidingStateData extends FB.CharacterStateData {

        /**
         * Creates a new SlidingStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SlidingStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to SlidingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to SlidingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SlidingStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        horizontalInputScale: number;
        gravityScale: number;

    }

    class SlowMotionEntityData extends FB.EntityData {

        /**
         * Creates a new SlowMotionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SlowMotionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SlowMotionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SlowMotionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SlowMotionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SlowMotionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SlowMotionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        timeScale: number;
        scaleDownTransitionTime: number;
        scaleUpTransitionTime: number;

    }

    class SmokeJammingData {

        /**
         * Creates a new SmokeJammingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SmokeJammingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SmokeJammingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        jammingTime: number;
        maxRadius: number;
        minRadius: number;
        targetUpdateTime: number;
        enableSmokeJamming: boolean;
        jammingPositionIsLocationDependent: boolean;
        reportJammedBasedOnStartPosition: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SmokeJammingData;

    }

    class SniperLensScopeFilterData extends FB.ScopeFilterData {

        /**
         * Creates a new SniperLensScopeFilterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SniperLensScopeFilterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScopeFilterData to SniperLensScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScopeFilterData);
        /**
         * Casts an instance of type Asset to SniperLensScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SniperLensScopeFilterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SniperLensScopeFilterData type.
         */
        static typeInfo: VUShared.TypeInformation;

        chromaticAberrationStrengths: VUShared.Vec2;
        blurCenter: VUShared.Vec2;
        chromaticAberrationColor1: VUShared.Vec3;
        chromaticAberrationColor2: VUShared.Vec3;
        radialBlendDistanceCoefficients: VUShared.Vec2;
        chromaticAberrationDisplacement1: VUShared.Vec2;
        chromaticAberrationDisplacement2: VUShared.Vec2;
        blurScale: number;
        colorTintData: FB.ColorTintData;

    }

    class SocketData extends VUShared.DataContainer {

        /**
         * Creates a new SocketData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SocketData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SocketData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SocketData type.
         */
        static typeInfo: VUShared.TypeInformation;

        boneRigidTransform: VUShared.LinearTransform;
        transform: VUShared.LinearTransform;
        unlockAsset: FB.UnlockAssetBase | undefined;
        boneId: number;
        boneName: string;
        availableObjects: FB.SocketObjectDataBase[];
        gearSlot: FB.GearSlot;
        socketType: FB.SocketType;
        usesDefaultObject: boolean;
        excluded: boolean;
        defaultEnableSocketEntities: boolean;
        forceSocketEntitiesEnabled: boolean;
        hideByZoomTransition: boolean;
        hideByLightToggle: boolean;

    }

    class SocketObjectData extends FB.SocketObjectDataBase {

        /**
         * Creates a new SocketObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SocketObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SocketObjectDataBase to SocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectDataBase);
        /**
         * Casts an instance of type DataContainer to SocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SocketObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        asset1pGuid: VUShared.Guid;
        variation1pGuids: VUShared.Guid[];
        asset1pZoomGuid: VUShared.Guid;
        variation1pZoomGuids: VUShared.Guid[];
        asset3pGuid: VUShared.Guid;
        variation3pGuids: VUShared.Guid[];
        customizedMaterials: FB.CustomizedMaterialData[];

    }

    class SocketObjectDataBase extends VUShared.DataContainer {

        /**
         * Creates a new SocketObjectDataBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new SocketObjectDataBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SocketObjectDataBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SocketObjectDataBase type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum SocketPhysics {
        SocketPhysics_Default = 0,
        SocketPhysics_FakePhysics = 1,
        SocketPhysics_Droppable = 2,
    }
    export enum SocketType {
        SocketType_Undefined = 0,
        SocketType_Gameplay = 1,
        SocketType_Visual = 2,
    }
    class SoldierAimAssistData extends FB.GameDataContainer {

        /**
         * Creates a new SoldierAimAssistData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierAimAssistData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainer to SoldierAimAssistData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierAimAssistData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierAimAssistData type.
         */
        static typeInfo: VUShared.TypeInformation;

        eyePosOffset: VUShared.Vec3;
        stickyBoxScale: VUShared.Vec3;
        snapDistanceScale: VUShared.Vec3;
        snapBoxScale: VUShared.Vec3;
        stickyDistanceScale: VUShared.Vec3;
        maxAcceleration: VUShared.Vec2;
        accelerationDamping: number;
        accelerationInputThreshold: number;
        accelerationMultiplier: number;
        squaredAcceleration: number;
        yawSpeedStrength: number;
        zoomedInputPolynomial: number[];
        accelerationTimeThreshold: number;
        attractDistanceFallOff: number[];
        attractUserInputMultiplier: number;
        attractOwnSpeedInfluence: number;
        attractTargetSpeedInfluence: number;
        attractOwnRequiredMovementForMaximumAttract: number;
        attractStartInputThreshold: number;
        attractZoomingMultiplier: number;
        attractZoomingPostTime: number;
        attractYawStrength: number;
        attractPitchStrength: number;
        pitchSpeedStrength: number;
        attractSoftZone: number;
        inputPolynomial: number[];
        useYawAcceleration: boolean;
        usePitchAcceleration: boolean;

    }

    class SoldierAimingConstraintsData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierAimingConstraintsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierAimingConstraintsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierAimingConstraintsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierAimingConstraintsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        swimmingConstraints: FB.AimingConstraintsData;

    }

    class SoldierAimingSimulationData extends FB.GameDataContainer {

        /**
         * Creates a new SoldierAimingSimulationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierAimingSimulationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainer to SoldierAimingSimulationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierAimingSimulationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierAimingSimulationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        zoomLevels: FB.ZoomLevelData[];
        zoomTransitionTime: number;
        aimAssist: FB.SoldierAimAssistData | undefined;
        standPose: FB.AimingPoseData;
        crouchPose: FB.AimingPoseData;
        pronePose: FB.AimingPoseData;
        zoomTransitionTimeArray: FB.ZoomLevelSpecificTransitionTime[];
        fovTransitionTime: number;
        fovDelayTime: number;
        modifiers: FB.AimerModifierData[];
        aimingRange: number;
        lockAimToTargetSpeed: number;
        returnToZoomAfterReload: boolean;

    }

    class SoldierAnimatedCameraData {

        /**
         * Creates a new SoldierAnimatedCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierAnimatedCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierAnimatedCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cameraTransitionTime: number;
        enableFeature: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierAnimatedCameraData;

    }

    class SoldierAsset extends FB.SoldierBlueprint {

        /**
         * Creates a new SoldierAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoldierBlueprint to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoldierBlueprint);
        /**
         * Casts an instance of type CharacterBlueprint to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterBlueprint);
        /**
         * Casts an instance of type ObjectBlueprint to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierAutoAimData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierAutoAimData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierAutoAimData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierAutoAimData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierAutoAimData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poses: FB.AutoAimData[];

    }

    class SoldierBlueprint extends FB.CharacterBlueprint {

        /**
         * Creates a new SoldierBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterBlueprint to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterBlueprint);
        /**
         * Casts an instance of type ObjectBlueprint to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierBodyComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierBodyComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierBodyComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierBodyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierBodyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierBodyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierBodyComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierBodyComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sprintMultiplier: number;
        overrideGravityValue: number;
        overrideVelocityY: number;
        overrideVelocity: boolean;
        overrideGravity: boolean;

    }

    export enum SoldierBuffId {
        SBImprovedBodyArmor = 0,
        SBCount = 1,
    }
    class SoldierCameraComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierCameraComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierCameraComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierCameraComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierCameraComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        explosionImpulseMultiplier: number;
        strafeTiltStrength: number;
        pitchTiltStrength: number;
        cameras: FB.TargetCameraData[];
        cameraBinding: FB.CameraBinding;
        forceFieldOfView: number;
        authoritativeEyePosition: boolean;
        disableAiming: boolean;

    }

    export enum SoldierChangeAction {
        SCA_Done = 0,
        SCA_Altered = 1,
        SCA_None = 2,
    }
    class SoldierCustomizationAsset extends FB.CharacterCustomizationAsset {

        /**
         * Creates a new SoldierCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterCustomizationAsset to SoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterCustomizationAsset);
        /**
         * Casts an instance of type Asset to SoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponTable: FB.CustomizationTable | undefined;

    }

    class SoldierDecalComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierDecalComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierDecalComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierDecalComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierDecalComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierDecalComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierDecalComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierDecalComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        splashDecal: FB.DecalTemplateData | undefined;
        splashRayLength: number;
        poolDecal: FB.DecalTemplateData | undefined;
        poolRayYOffset: number;
        poolRayLength: number;

    }

    class SoldierDetonationData {

        /**
         * Creates a new SoldierDetonationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierDetonationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierDetonationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        angle: number;
        minSpeedForActivation: number;
        radius: number;
        soldierDetonationActivationDelay: number;
        useAngle: boolean;
        hasSoldierDetonation: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierDetonationData;

    }

    export enum SoldierEmote {
        SoldierEmote_Spot = 0,
        SoldierEmote_Ok = 1,
        SoldierEmote_NeedARide = 2,
        SoldierEmote_GoGoGo = 3,
        SoldierEmote_NeedBackup = 4,
        SoldierEmote_Thanks = 5,
        SoldierEmote_NeedMedic = 6,
        SoldierEmote_FollowMe = 7,
        SoldierEmote_NeedAmmo = 8,
        SoldierEmote_Sorry = 9,
        SoldierEmote_No = 10,
        SoldierEmote_DefendCapturePoint = 11,
        SoldierEmote_AttackCapturePoint = 12,
        SoldierEmote_MoveToPosition = 13,
        SoldierEmote_Count = 14,
    }
    class SoldierEmoteBinding {

        /**
         * Creates a new SoldierEmoteBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierEmoteBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierEmoteBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        speak: FB.AntRef;
        isSquadLeader: FB.AntRef;
        emoteSpot: FB.AntRef;
        emoteOk: FB.AntRef;
        emoteNeedARide: FB.AntRef;
        emoteGoGoGo: FB.AntRef;
        emoteNeedBackup: FB.AntRef;
        emoteThanks: FB.AntRef;
        emoteNeedMedic: FB.AntRef;
        emoteFollowMe: FB.AntRef;
        emoteNeedAmmo: FB.AntRef;
        emoteSorry: FB.AntRef;
        emoteNo: FB.AntRef;
        emoteDefendCapturePoint: FB.AntRef;
        emoteAttackCapturePoint: FB.AntRef;
        emoteMoveToPosition: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierEmoteBinding;

    }

    class SoldierEmoteComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierEmoteComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierEmoteComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierEmoteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierEmoteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierEmoteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierEmoteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierEmoteComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.SoldierEmoteBinding;
        networkedMessageMappings: FB.SoldierEmoteNetworkedMessageMapping[];

    }

    class SoldierEmoteNetworkedMessageMapping extends VUShared.DataContainer {

        /**
         * Creates a new SoldierEmoteNetworkedMessageMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierEmoteNetworkedMessageMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierEmoteNetworkedMessageMapping. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierEmoteNetworkedMessageMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        emote: FB.SoldierEmote;
        messages: FB.UIMessageType[];

    }

    class SoldierEntityData extends FB.CharacterEntityData {

        /**
         * Creates a new SoldierEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterEntityData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterEntityData);
        /**
         * Casts an instance of type ControllableEntityData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ControllableEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        flirKeyColor: VUShared.Vec3;
        headMaterialPair: FB.MaterialContainerPair | undefined;
        boneFakePhysics: FB.BoneFakePhysicsData[];
        autoAim: FB.SoldierAutoAimData | undefined;
        aimingConstraints: FB.SoldierAimingConstraintsData | undefined;
        headCollision: FB.SoldierHeadCollisionData | undefined;
        characterPhysics: FB.CharacterPhysicsData | undefined;
        footMaterialPair: FB.MaterialContainerPair | undefined;
        sprintSettings: FB.SoldierSprintSettingsData | undefined;
        meshes1p: FB.SoldierMeshData[];
        meshes3p: FB.SoldierMeshData[];
        hidableMeshParts: FB.HidableSoldierMeshWeaponPart[];
        sound: FB.SoldierSoundData | undefined;
        streamGroup1p: FB.StreamGroupData | undefined;
        impulseReactionTime: number;
        healthModule: FB.SoldierHealthModuleData | undefined;
        maxHealth: number;
        collisionInfo: FB.CollisionData | undefined;
        voiceOverInfo: FB.EntityVoiceOverInfo | undefined;
        flirValue: number;
        breathControl: FB.BreathControlData[];
        explosionDamageModifier: number;
        uiParts: FB.UIPartData[];
        regenerationDelayModifier: number;
        freeSpaceCheck: boolean;
        proximityCheck: boolean;
        enableGroundmapLighting: boolean;
        showWeaponWhenDead: boolean;
        lowerGunOnOwnTeam: boolean;
        useSpineXRotation: boolean;
        collisionEnabled: boolean;
        physicsControlled: boolean;
        isPushable: boolean;
        humanPlayerControlled: boolean;
        interactiveManDownAllowed: boolean;
        showNametag: boolean;

    }

    class SoldierEntityInteractionComponentData extends FB.EntityInteractionComponentData {

        /**
         * Creates a new SoldierEntityInteractionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierEntityInteractionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityInteractionComponentData to SoldierEntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityInteractionComponentData);
        /**
         * Casts an instance of type ComponentData to SoldierEntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierEntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierEntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierEntityInteractionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierEntityInteractionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierEntryComponentData extends FB.EntryComponentData {

        /**
         * Creates a new SoldierEntryComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierEntryComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntryComponentData to SoldierEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntryComponentData);
        /**
         * Casts an instance of type ComponentData to SoldierEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierEntryComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierEntryComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimingConstraints: FB.AimingConstraintsData;
        antEntryEnumeration: FB.AntEnumeration | undefined;
        alignConstraintsToEntity: boolean;

    }

    class SoldierFootplantEffectComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierFootplantEffectComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierFootplantEffectComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierFootplantEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierFootplantEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierFootplantEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierFootplantEffectComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierFootplantEffectComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        footMaterialPair: FB.MaterialContainerPair | undefined;
        heightOverGroundThreshold: number;
        footVelocityThreshold: number;
        lodDistance: number;
        fullFootplantingEnabled: boolean;

    }

    class SoldierGripComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierGripComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierGripComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierGripComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierGripComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierGripComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierGripComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierGripComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierHeadCollisionData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierHeadCollisionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierHeadCollisionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierHeadCollisionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierHeadCollisionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        headRadius: number;
        poseStates: FB.SoldierHeadCollisionPoseData[];

    }

    class SoldierHeadCollisionPoseData {

        /**
         * Creates a new SoldierHeadCollisionPoseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierHeadCollisionPoseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierHeadCollisionPoseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        idleOffset: VUShared.Vec3;
        movingForwardOffset: VUShared.Vec3;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierHeadCollisionPoseData;

    }

    class SoldierHealthModuleBinding {

        /**
         * Creates a new SoldierHealthModuleBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierHealthModuleBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierHealthModuleBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        headShot: FB.AntRef;
        leftArmHit: FB.AntRef;
        rightArmHit: FB.AntRef;
        leftLegHit: FB.AntRef;
        rightLegHit: FB.AntRef;
        onGround: FB.AntRef;
        deathAnimationTriggered: FB.AntRef;
        randomAnimationIndex: FB.AntRef;
        sprinting: FB.AntRef;
        hitLeft: FB.AntRef;
        hitRight: FB.AntRef;
        hitFront: FB.AntRef;
        hitBack: FB.AntRef;
        deathHitDirection: FB.AntRef;
        explosion: FB.AntRef;
        dead: FB.AntRef;
        revived: FB.AntRef;
        randomValue: FB.AntRef;
        pose: FB.AntRef;
        rightSpeed: FB.AntRef;
        forwardSpeed: FB.AntRef;
        criticallyHit: FB.AntRef;
        interactiveManDown: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierHealthModuleBinding;

    }

    class SoldierHealthModuleData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierHealthModuleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierHealthModuleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierHealthModuleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierHealthModuleData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierMeshData {

        /**
         * Creates a new SoldierMeshData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierMeshData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierMeshData type.
         */
        static typeInfo: VUShared.TypeInformation;

        mesh: FB.SkinnedMeshAsset | undefined;
        meshBlueprint: FB.ObjectBlueprint | undefined;
        randomGroup: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierMeshData;

    }

    class SoldierMovementSequenceData extends FB.MovementActionData {

        /**
         * Creates a new SoldierMovementSequenceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierMovementSequenceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MovementActionData to SoldierMovementSequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MovementActionData);
        /**
         * Casts an instance of type DataContainer to SoldierMovementSequenceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierMovementSequenceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        recordedInput: FB.RecordedInputData | undefined;
        inputRecordingIndex: number;
        ignoreRecordingIndexFilter: boolean;
        reportWhenFinished: boolean;

    }

    class SoldierParachuteBinding {

        /**
         * Creates a new SoldierParachuteBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierParachuteBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierParachuteBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        enabled: FB.AntRef;
        steerLeftRight: FB.AntRef;
        accelerateBrake: FB.AntRef;
        pitch: FB.AntRef;
        roll: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierParachuteBinding;

    }

    class SoldierParachuteComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierParachuteComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierParachuteComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierParachuteComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.SoldierParachuteBinding;
        aimingConstraints: FB.AimingConstraintsData;
        undeployTime: number;

    }

    class SoldierSoundComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierSoundComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSoundComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierSoundComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierSoundComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierSoundComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierSoundComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSoundComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        walkVelocityThreshold: number;
        runVelocityThreshold: number;
        walkPeriod: number;
        runPeriod: number;

    }

    class SoldierSoundData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierSoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        movement: FB.SoundAsset | undefined;
        death: FB.SoundAsset | undefined;
        bulletImpact: FB.SoundAsset | undefined;
        healing: FB.SoundAsset | undefined;
        breathControl: FB.SoundAsset | undefined;
        hitIndicator: FB.SoundAsset | undefined;
        pickupKit: FB.SoundAsset | undefined;
        pickupAmmo: FB.SoundAsset | undefined;
        sprintTimeForRecovery: number;
        movementThreshold: number;
        minHealSoundTime: number;

    }

    class SoldierSpawnAppearanceTemplateData extends FB.Asset {

        /**
         * Creates a new SoldierSpawnAppearanceTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSpawnAppearanceTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoldierSpawnAppearanceTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierSpawnAppearanceTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSpawnAppearanceTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        body: number;

    }

    class SoldierSpawnKitTemplateData extends FB.Asset {

        /**
         * Creates a new SoldierSpawnKitTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSpawnKitTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoldierSpawnKitTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierSpawnKitTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSpawnKitTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        kit: number;
        mainGun: number;

    }

    class SoldierSpawnTemplateData extends FB.Asset {

        /**
         * Creates a new SoldierSpawnTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSpawnTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoldierSpawnTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierSpawnTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSpawnTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        customizeSoldierData: FB.CustomizeSoldierData | undefined;
        sensing: FB.GameSensingTemplateData | undefined;
        behaviour: FB.GameBehaviourTemplateData | undefined;
        animationTemplate: FB.AnimationSpawnTemplate | undefined;
        voiceOverLabels: FB.VoiceOverLabel[];

    }

    class SoldierSprintSettingsData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierSprintSettingsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSprintSettingsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierSprintSettingsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSprintSettingsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fov: number;
        fovInDelay: number;
        fovInTime: number;
        fovOutDelay: number;
        fovOutTime: number;
        recoverTime: number;
        sprintToProneRecoverTime: number;
        interruptingActions: FB.EntryInputActionEnum[];

    }

    class SoldierSuppressionComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierSuppressionComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierSuppressionComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierSuppressionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierSuppressionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierSuppressionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierSuppressionComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierSuppressionComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        reactionToSuppression: FB.SuppressionReactionData;
        suppressionResistModifier: number;
        suppressionBoostModifier: number;
        suppressionDecay: number;
        suppressionSphereRadius: number;
        fallOffDelay: number;
        fallOffMultiplier: number;
        suppressionAbortsHealthRegeneration: boolean;
        checkLineOfSight: boolean;

    }

    class SoldierTestEntityData extends FB.GameEntityData {

        /**
         * Creates a new SoldierTestEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierTestEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to SoldierTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SoldierTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SoldierTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoldierTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierTestEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierTestEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        testSoldier: FB.SoldierBlueprint | undefined;
        template: FB.SoldierSpawnTemplateData | undefined;
        testVehicle: FB.VehicleBlueprint | undefined;
        specialAnimationIndex: number;
        unlocksProfile: FB.RawFileAsset | undefined;
        team: FB.TeamId;
        randomSeed: number;
        startSequence: FB.MovementActionData | undefined;
        startSequenceRoot: FB.MovementActionRoot | undefined;
        yawInputVal: number;
        cameraMovementsFilename: string;
        inputRecorder: FB.InputRecorderData | undefined;
        throttleInputVal: number;
        fireInputVal: number;
        strafeInputVal: number;
        proneInputVal: number;
        pitchInputVal: number;
        rollInputVal: number;
        zoomInputVal: number;
        jumpInputVal: number;
        activeInputRecording: number;
        authoritativeAimingActive: number;
        fireCounterMeasure: number;
        authoritativeYaw: number;
        authoritativePitch: number;
        runAutomatically: boolean;
        useUnlocksProfile: boolean;
        sprintInputVal: boolean;

    }

    class SoldierWeaponAsset extends FB.SoldierWeaponBlueprint {

        /**
         * Creates a new SoldierWeaponAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoldierWeaponBlueprint to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoldierWeaponBlueprint);
        /**
         * Casts an instance of type ObjectBlueprint to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierWeaponBlueprint extends FB.ObjectBlueprint {

        /**
         * Creates a new SoldierWeaponBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ObjectBlueprint to SoldierWeaponBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to SoldierWeaponBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to SoldierWeaponBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to SoldierWeaponBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to SoldierWeaponBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoldierWeaponCustomizationAsset extends FB.Asset {

        /**
         * Creates a new SoldierWeaponCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoldierWeaponCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        customization: FB.CustomizationTable | undefined;

    }

    class SoldierWeaponData extends FB.WeaponEntityData {

        /**
         * Creates a new SoldierWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponEntityData to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponEntityData);
        /**
         * Casts an instance of type GameEntityData to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        interactionOffset: VUShared.Vec3;
        weaponModifierData: FB.WeaponModifierData[];
        aimingController: FB.SoldierAimingSimulationData | undefined;
        firstPersonCamera: FB.FirstPersonCameraData | undefined;
        hud: FB.HudData;
        damageGiverName: string;
        pickupSettings: FB.PickupSettingsData;
        animBaseSet: FB.WeaponAnimBaseSetEnum;
        animationData: FB.AntPackageAsset | undefined;
        renderFov: number;
        zoomRenderFov: number;
        streamGroup1p: FB.StreamGroupData | undefined;
        voiceOverInfo: FB.EntityVoiceOverInfo | undefined;
        quickThrowType: FB.QuickThrowTypeEnum;
        customization: FB.SoldierWeaponCustomizationAsset | undefined;
        weaponFloatParam: number;
        sockets: FB.SocketData[];
        switchWeaponStateInputAction: FB.EntryInputActionEnum;
        soldierWeaponBlueprint: FB.SoldierWeaponBlueprint | undefined;
        persistenceId: string;
        allowSwitchingToWeaponOutOfAmmo: boolean;
        hideWhenOutOfAmmo: boolean;
        lowerOnOwnTeam: boolean;
        redeployWhenSwitchingWeaponStates: boolean;
        useQuickThrowOnAutomaticSwitchback: boolean;
        enableBreathControl: boolean;
        canBeInSupportedShooting: boolean;
        allowSwitchingToWeaponReloading: boolean;
        switchToPrimaryWhenOutOfAmmo: boolean;
        allowSwitchingToWeaponInVehicles: boolean;
        isSilenced: boolean;

    }

    class SoldierWeaponDispersion {

        /**
         * Creates a new SoldierWeaponDispersion frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponDispersion frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoldierWeaponDispersion type.
         */
        static typeInfo: VUShared.TypeInformation;

        standDispersion: FB.FiringDispersionData;
        crouchDispersion: FB.FiringDispersionData;
        proneDispersion: FB.FiringDispersionData;
        jumpDispersionAngle: number;
        proneTransitionDispersionAngle: number;
        moveDispersionAngle: number;
        moveZoomedDispersionAngle: number;
        decreasePerSecond: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoldierWeaponDispersion;

    }

    class SoldierWeaponMultiUnlock extends FB.UnlockUserDataBase {

        /**
         * Creates a new SoldierWeaponMultiUnlock frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponMultiUnlock frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockUserDataBase to SoldierWeaponMultiUnlock. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockUserDataBase);
        /**
         * Casts an instance of type Asset to SoldierWeaponMultiUnlock. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponMultiUnlock. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponMultiUnlock type.
         */
        static typeInfo: VUShared.TypeInformation;

        first: FB.UnlockAssetBase | undefined;
        unlockAssetPairs: FB.UnlockAssetPair[];

    }

    class SoldierWeaponOverrideData extends VUShared.DataContainer {

        /**
         * Creates a new SoldierWeaponOverrideData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponOverrideData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponOverrideData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponOverrideData type.
         */
        static typeInfo: VUShared.TypeInformation;

        overrides: FB.WeaponOverrideData[];

    }

    class SoldierWeaponsComponentData extends FB.ComponentData {

        /**
         * Creates a new SoldierWeaponsComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponsComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SoldierWeaponsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SoldierWeaponsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoldierWeaponsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponsComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponsComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimDir: VUShared.LinearTransform;
        weaponSkeleton: FB.SkeletonAsset | undefined;
        primaryWeaponId: number;
        animatedWeaponBinding: FB.AnimatedWeaponBinding;
        animated1pOnlyWeaponBinding: FB.Animated1pOnlyWeaponBinding;
        animated3pOnlyWeaponBinding: FB.Animated3pOnlyWeaponBinding;
        lockTimeMultiplier: number;
        grenadeIncrease: number;
        ammoClipIncreaseMultiplier: number;
        explosiveIncreaseMultiplier: number;
        underslungGrenadeIncrease: number;
        useExternalAimDir: boolean;
        unlimitedAmmo: boolean;
        unlimitedMags: boolean;

    }

    class SoldierWeaponSwitchingData extends FB.Asset {

        /**
         * Creates a new SoldierWeaponSwitchingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponSwitchingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoldierWeaponSwitchingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponSwitchingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponSwitchingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        switchMap: FB.WeaponSwitchingMapData[];
        directSwitchMap: FB.DirectWeaponSwitchingMapData[];
        switchToGadgetCooldownTime: number;

    }

    class SoldierWeaponUnlockAsset extends FB.UnlockAssetBase {

        /**
         * Creates a new SoldierWeaponUnlockAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoldierWeaponUnlockAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockAssetBase to SoldierWeaponUnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockAssetBase);
        /**
         * Casts an instance of type Asset to SoldierWeaponUnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoldierWeaponUnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoldierWeaponUnlockAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        weapon: FB.SoldierWeaponBlueprint | undefined;
        extra: FB.UnlockAssetBase | undefined;
        weaponIdentifier: number;

    }

    class SoundAreaEntityData extends FB.EntityData {

        /**
         * Creates a new SoundAreaEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundAreaEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SoundAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoundAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoundAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoundAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundAreaEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundAsset | undefined;
        bigWorld: FB.BigWorldSettingsAsset | undefined;
        fadeWidth: number;
        proximityMultiplier: number;
        fadeCurve: FB.FadeCurveType;

    }

    class SoundAsset extends FB.Asset {

        /**
         * Creates a new SoundAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoundAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        scope: FB.SoundScopeData | undefined;

    }

    class SoundBusData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SoundBusData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundBusData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SoundBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SoundBusData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundBusData type.
         */
        static typeInfo: VUShared.TypeInformation;

        busName: string;
        submixPlugin: FB.SoundGraphPluginRef;
        channelCount: number;

    }

    class SoundDataAsset extends FB.Asset {

        /**
         * Creates a new SoundDataAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundDataAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoundDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundDataAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameHash: number;
        chunks: FB.SoundDataChunk[];

    }

    class SoundDataChunk {

        /**
         * Creates a new SoundDataChunk frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundDataChunk frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundDataChunk type.
         */
        static typeInfo: VUShared.TypeInformation;

        chunkId: VUShared.Guid;
        chunkSize: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundDataChunk;

    }

    export enum SoundDataRequestResult {
        SoundDataRequestResult_NotRequested = 0,
        SoundDataRequestResult_Requested = 1,
        SoundDataRequestResult_Available = 2,
    }
    export enum SoundDataState {
        SoundDataState_Pending = 0,
        SoundDataState_Cancelled = 1,
        SoundDataState_Lost = 2,
        SoundDataState_Valid = 3,
    }
    class SoundEffectEntityData extends FB.EffectEntityData {

        /**
         * Creates a new SoundEffectEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundEffectEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EffectEntityData to SoundEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EffectEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SoundEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SoundEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoundEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoundEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoundEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundEffectEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundAsset | undefined;

    }

    class SoundEntityData extends FB.EntityData {

        /**
         * Creates a new SoundEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        sound: FB.SoundAsset | undefined;
        obstructionHandle: number;
        playOnCreation: boolean;

    }

    class SoundEnvironmentConstantData extends FB.Asset {

        /**
         * Creates a new SoundEnvironmentConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundEnvironmentConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoundEnvironmentConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundEnvironmentConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundEnvironmentConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        humanPlayerSoldierMovementVolumeOverride: number;
        memoryTime: number;
        minimumLoudness: number;

    }

    class SoundGraphAsset extends FB.SoundAsset {

        /**
         * Creates a new SoundGraphAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundAsset to SoundGraphAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundAsset);
        /**
         * Casts an instance of type Asset to SoundGraphAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundGraphAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundGraphAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        graph: FB.SoundGraphData | undefined;
        mixer: FB.MixerAsset | undefined;

    }

    class SoundGraphData extends FB.AudioGraphData {

        /**
         * Creates a new SoundGraphData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphData to SoundGraphData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphData);
        /**
         * Casts an instance of type DataContainer to SoundGraphData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundGraphData type.
         */
        static typeInfo: VUShared.TypeInformation;

        info: FB.SoundGraphInfo;
        inputParameters: FB.AudioGraphParameter[];
        outputParameters: FB.AudioGraphParameter[];
        inputEvents: FB.AudioGraphEvent[];
        outputEvents: FB.AudioGraphEvent[];

    }

    class SoundGraphInfo {

        /**
         * Creates a new SoundGraphInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        voices: FB.SoundGraphVoiceInfo[];
        linkedPluginAttributes: FB.SoundGraphLinkedPluginAttribute[];
        connections: FB.SoundGraphPluginConnection[];
        constructParams: FB.SoundGraphPluginConstructParam[];
        pluginsParamCount: number;
        pluginCount: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphInfo;

    }

    class SoundGraphLinkedPluginAttribute {

        /**
         * Creates a new SoundGraphLinkedPluginAttribute frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphLinkedPluginAttribute frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphLinkedPluginAttribute type.
         */
        static typeInfo: VUShared.TypeInformation;

        plugin: FB.SoundGraphPluginRef;
        node: FB.AudioGraphNodeData | undefined;
        port: FB.AudioGraphNodePort;
        attributeIndex: number;
        allowExtremeValues: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphLinkedPluginAttribute;

    }

    class SoundGraphPluginConnection {

        /**
         * Creates a new SoundGraphPluginConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphPluginConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphPluginConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        connectionType: FB.SoundGraphPluginConnectionType;
        parameters: FB.SoundGraphPluginConnectionParam[];
        bus: FB.SoundBusData | undefined;
        voiceIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphPluginConnection;

    }

    class SoundGraphPluginConnectionParam {

        /**
         * Creates a new SoundGraphPluginConnectionParam frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphPluginConnectionParam frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphPluginConnectionParam type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: number;
        index: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphPluginConnectionParam;

    }

    export enum SoundGraphPluginConnectionType {
        SoundGraphPluginConnectionType_Unconnected = 0,
        SoundGraphPluginConnectionType_Voice = 1,
        SoundGraphPluginConnectionType_Bus = 2,
    }
    class SoundGraphPluginConstructParam {

        /**
         * Creates a new SoundGraphPluginConstructParam frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphPluginConstructParam frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphPluginConstructParam type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: number;
        index: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphPluginConstructParam;

    }

    class SoundGraphPluginInfo {

        /**
         * Creates a new SoundGraphPluginInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphPluginInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphPluginInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: number;
        enableAttributeReadMask: number;
        connectionIndex: number;
        outputChannelCount: number;
        constructParamsIndex: number;
        constructParamCount: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphPluginInfo;

    }

    class SoundGraphPluginRef {

        /**
         * Creates a new SoundGraphPluginRef frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphPluginRef frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphPluginRef type.
         */
        static typeInfo: VUShared.TypeInformation;

        isValid: boolean;
        voiceIndex: number;
        pluginIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphPluginRef;

    }

    class SoundGraphVoiceInfo {

        /**
         * Creates a new SoundGraphVoiceInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundGraphVoiceInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundGraphVoiceInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        plugins: FB.SoundGraphPluginInfo[];
        processingStage: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundGraphVoiceInfo;

    }

    class SoundMasterPatchAsset extends FB.SoundGraphAsset {

        /**
         * Creates a new SoundMasterPatchAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundMasterPatchAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundGraphAsset to SoundMasterPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundGraphAsset);
        /**
         * Casts an instance of type SoundAsset to SoundMasterPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundAsset);
        /**
         * Casts an instance of type Asset to SoundMasterPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundMasterPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundMasterPatchAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        busses: FB.SoundBusData[];
        rwMovieBus: FB.SoundBusData | undefined;

    }

    class SoundPatchAsset extends FB.SoundGraphAsset {

        /**
         * Creates a new SoundPatchAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPatchAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundGraphAsset to SoundPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundGraphAsset);
        /**
         * Casts an instance of type SoundAsset to SoundPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundAsset);
        /**
         * Casts an instance of type Asset to SoundPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundPatchAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundPatchAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        outputNodes: FB.AudioGraphNodeData[];
        loudness: number;
        aiLoudness: number;
        radius: number;
        dopplerFactor: number;
        masterPitch: number;
        mixGroup: FB.MixGroup | undefined;
        defaultStopEvent: FB.AudioGraphEvent | undefined;
        defaultStartEvent: FB.AudioGraphEvent | undefined;
        defaultForceInitEvent: FB.AudioGraphEvent | undefined;
        defaultEnterScopeEvent: FB.AudioGraphEvent | undefined;
        isPersistent: boolean;
        isLooping: boolean;

    }

    class SoundPatchConfigurationAsset extends FB.SoundAsset {

        /**
         * Creates a new SoundPatchConfigurationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPatchConfigurationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundAsset to SoundPatchConfigurationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundAsset);
        /**
         * Casts an instance of type Asset to SoundPatchConfigurationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundPatchConfigurationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundPatchConfigurationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundPatchAsset | undefined;
        entries: FB.SoundPatchConfigurationEntry[];
        loudness: number;

    }

    class SoundPatchConfigurationAssetEntry extends FB.SoundPatchConfigurationEntry {

        /**
         * Creates a new SoundPatchConfigurationAssetEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPatchConfigurationAssetEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundPatchConfigurationEntry to SoundPatchConfigurationAssetEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundPatchConfigurationEntry);
        /**
         * Casts an instance of type DataContainer to SoundPatchConfigurationAssetEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundPatchConfigurationAssetEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameHash: number;
        value: FB.Asset | undefined;

    }

    class SoundPatchConfigurationEntry extends VUShared.DataContainer {

        /**
         * Creates a new SoundPatchConfigurationEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPatchConfigurationEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundPatchConfigurationEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundPatchConfigurationEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoundPatchConfigurationParameterEntry extends FB.SoundPatchConfigurationEntry {

        /**
         * Creates a new SoundPatchConfigurationParameterEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPatchConfigurationParameterEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundPatchConfigurationEntry to SoundPatchConfigurationParameterEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundPatchConfigurationEntry);
        /**
         * Casts an instance of type DataContainer to SoundPatchConfigurationParameterEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundPatchConfigurationParameterEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameHash: number;
        value: number;

    }

    export enum SoundPatchDefaultEvent {
        SoundPatchDefaultEvent_Start = 0,
        SoundPatchDefaultEvent_Stop = 1,
        SoundPatchDefaultEvent_EnterScope = 2,
        SoundPatchDefaultEvent_ForceInit = 3,
    }
    class SoundPatchPublicNode {

        /**
         * Creates a new SoundPatchPublicNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPatchPublicNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundPatchPublicNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        node: FB.AudioGraphNodeData | undefined;
        id: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundPatchPublicNode;

    }

    class SoundPrimeEntityData extends FB.EntityData {

        /**
         * Creates a new SoundPrimeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundPrimeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SoundPrimeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoundPrimeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoundPrimeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoundPrimeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundPrimeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dataAssets: FB.SoundDataAsset[];

    }

    class SoundScopeData extends VUShared.DataContainer {

        /**
         * Creates a new SoundScopeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundScopeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundScopeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundScopeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        defaultStrategy: FB.SoundScopeStrategyData | undefined;

    }

    class SoundScopeSetupData extends VUShared.DataContainer {

        /**
         * Creates a new SoundScopeSetupData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundScopeSetupData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundScopeSetupData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundScopeSetupData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        mappings: FB.SoundScopeStrategyMapping[];

    }

    class SoundScopeSetupEntityData extends FB.EntityData {

        /**
         * Creates a new SoundScopeSetupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundScopeSetupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SoundScopeSetupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoundScopeSetupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoundScopeSetupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoundScopeSetupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundScopeSetupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        setup: FB.SoundScopeSetupData | undefined;

    }

    class SoundScopeStrategyData extends VUShared.DataContainer {

        /**
         * Creates a new SoundScopeStrategyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundScopeStrategyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundScopeStrategyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundScopeStrategyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class SoundScopeStrategyMapping {

        /**
         * Creates a new SoundScopeStrategyMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundScopeStrategyMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundScopeStrategyMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        scope: FB.SoundScopeData | undefined;
        strategy: FB.SoundScopeStrategyData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundScopeStrategyMapping;

    }

    class SoundSettings extends FB.SystemSettings {

        /**
         * Creates a new SoundSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to SoundSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to SoundSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        voEnglish: string;
        audioSystemUri: string;
        voCommon: string;
        voItalian: string;
        voSpanish: string;
        voFrench: string;
        voGerman: string;
        enable: boolean;

    }

    class SoundState extends VUShared.DataContainer {

        /**
         * Creates a new SoundState frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundState type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        lpCutoffFrequency: number;
        duration: number;
        fadeInTime: number;
        fadeOutTime: number;
        bypassSound: FB.SoundAsset | undefined;
        hdrSetting: FB.HdrSetting | undefined;
        mixer: FB.MixerAsset | undefined;
        fadeSound: boolean;

    }

    class SoundStateEntityData extends FB.EntityData {

        /**
         * Creates a new SoundStateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundStateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SoundStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SoundStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SoundStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SoundStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundStateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soundState: FB.SoundState | undefined;

    }

    class SoundStateSettingsAsset extends FB.Asset {

        /**
         * Creates a new SoundStateSettingsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundStateSettingsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoundStateSettingsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundStateSettingsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundStateSettingsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        soundStates: FB.SoundState[];
        impairedHearingImpulseThreshold: number;
        screamThreshold: number;
        supressionThreshold: number;

    }

    class SoundTestAsset extends FB.Asset {

        /**
         * Creates a new SoundTestAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SoundTestAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundTestAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        taskSpecs: FB.SoundTestTaskSpec[];
        testSpecs: FB.SoundTestSpec[];
        suites: FB.SoundTestSuite[];

    }

    class SoundTestEventTask extends FB.SoundTestTaskSpec {

        /**
         * Creates a new SoundTestEventTask frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestEventTask frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundTestTaskSpec to SoundTestEventTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundTestTaskSpec);
        /**
         * Casts an instance of type DataContainer to SoundTestEventTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestEventTask type.
         */
        static typeInfo: VUShared.TypeInformation;

        eventName: string;

    }

    export enum SoundTestParamBehavior {
        SoundTestParamBehavior_Constant = 0,
        SoundTestParamBehavior_LinearRamp = 1,
        SoundTestParamBehavior_Random = 2,
    }
    class SoundTestParamTask extends FB.SoundTestTaskSpec {

        /**
         * Creates a new SoundTestParamTask frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestParamTask frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundTestTaskSpec to SoundTestParamTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundTestTaskSpec);
        /**
         * Casts an instance of type DataContainer to SoundTestParamTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestParamTask type.
         */
        static typeInfo: VUShared.TypeInformation;

        paramName: string;
        behavior: FB.SoundTestParamBehavior;
        rangeMin: number;
        rangeMax: number;
        initialValue: number;

    }

    class SoundTestSpec extends VUShared.DataContainer {

        /**
         * Creates a new SoundTestSpec frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestSpec frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundTestSpec. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestSpec type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;
        mainStartTask: FB.SoundTestTask | undefined;
        mainStopTask: FB.SoundTestTask | undefined;
        duration: number;
        tasks: FB.SoundTestTask[];

    }

    class SoundTestSuite extends VUShared.DataContainer {

        /**
         * Creates a new SoundTestSuite frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestSuite frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundTestSuite. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestSuite type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        assets: FB.SoundAsset[];
        tests: FB.SoundTestSpec[];
        profileTests: boolean;

    }

    class SoundTestTask extends VUShared.DataContainer {

        /**
         * Creates a new SoundTestTask frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestTask frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundTestTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestTask type.
         */
        static typeInfo: VUShared.TypeInformation;

        spec: FB.SoundTestTaskSpec | undefined;
        param: FB.SoundTestTaskParam | undefined;
        startTime: number;
        repetitions: number;

    }

    class SoundTestTaskParam extends VUShared.DataContainer {

        /**
         * Creates a new SoundTestTaskParam frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestTaskParam frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundTestTaskParam. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestTaskParam type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SoundTestTaskSpec extends VUShared.DataContainer {

        /**
         * Creates a new SoundTestTaskSpec frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestTaskSpec frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundTestTaskSpec. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestTaskSpec type.
         */
        static typeInfo: VUShared.TypeInformation;

        description: string;
        duration: number;

    }

    export enum SoundTestTransformBehavior {
        SoundTestTransformBehavior_Static = 0,
    }
    class SoundTestTransformTask extends FB.SoundTestTaskSpec {

        /**
         * Creates a new SoundTestTransformTask frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundTestTransformTask frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundTestTaskSpec to SoundTestTransformTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundTestTaskSpec);
        /**
         * Casts an instance of type DataContainer to SoundTestTransformTask. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundTestTransformTask type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialPosition: VUShared.Vec3;
        behavior: FB.SoundTestTransformBehavior;
        relativeListener: boolean;

    }

    class SoundWaveAsset extends FB.SoundDataAsset {

        /**
         * Creates a new SoundWaveAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundWaveAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoundDataAsset to SoundWaveAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoundDataAsset);
        /**
         * Casts an instance of type Asset to SoundWaveAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SoundWaveAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundWaveAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        variations: FB.SoundWaveVariation[];
        localization: FB.SoundWaveLocalizationInfo[];
        subtitleStringIds: string[];
        selection: FB.SoundWaveVariationSelection;
        streamPool: FB.StreamPoolAsset | undefined;
        seekable: boolean;
        preferAvailableVariations: boolean;
        persistentVariationCount: number;
        channelCount: number;
        voicePriority: number;
        primePriority: number;
        requestPriority: number;

    }

    class SoundWaveLocalizationInfo {

        /**
         * Creates a new SoundWaveLocalizationInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundWaveLocalizationInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundWaveLocalizationInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        language: FB.AudioLanguage | undefined;
        firstVariationIndex: number;
        variationCount: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundWaveLocalizationInfo;

    }

    export enum SoundWaveReadPriority {
        SoundWaveReadPriority_Unspecified = 0,
        SoundWaveReadPriority_Low = 1,
        SoundWaveReadPriority_Medium = 2,
        SoundWaveReadPriority_Normal = 3,
        SoundWaveReadPriority_High = 4,
    }
    class SoundWaveSubtitle {

        /**
         * Creates a new SoundWaveSubtitle frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundWaveSubtitle frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundWaveSubtitle type.
         */
        static typeInfo: VUShared.TypeInformation;

        time: number;
        stringIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundWaveSubtitle;

    }

    class SoundWaveVariation extends VUShared.DataContainer {

        /**
         * Creates a new SoundWaveVariation frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundWaveVariation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SoundWaveVariation. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SoundWaveVariation type.
         */
        static typeInfo: VUShared.TypeInformation;

        subtitles: FB.SoundWaveSubtitle[];
        seekTablesSize: number;
        segments: FB.SoundWaveVariationSegment[];
        chunkIndex: number;
        firstLoopSegmentIndex: number;
        lastLoopSegmentIndex: number;

    }

    class SoundWaveVariationSegment {

        /**
         * Creates a new SoundWaveVariationSegment frostbite instance.
         */
        constructor();
        /**
         * Creates a new SoundWaveVariationSegment frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SoundWaveVariationSegment type.
         */
        static typeInfo: VUShared.TypeInformation;

        samplesOffset: number;
        seekTableOffset: number;
        segmentLength: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SoundWaveVariationSegment;

    }

    export enum SoundWaveVariationSelection {
        SwvsSequential = 0,
        SwvsRandom = 1,
    }
    export enum SoundWaveVoicePriority {
        SoundWaveVoicePriority_Unspecified = 0,
        SoundWaveVoicePriority_Low = 1,
        SoundWaveVoicePriority_Normal = 2,
        SoundWaveVoicePriority_High = 3,
        SoundWaveVoicePriority_Permanent = 4,
    }
    export enum SpaceType {
        STBody = 0,
        STWorld = 1,
    }
    class SpatialEntityData extends FB.EntityData {

        /**
         * Creates a new SpatialEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpatialEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SpatialEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SpatialEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpatialEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpatialEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpatialEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;

    }

    class SpatialPrefabBlueprint extends FB.PrefabBlueprint {

        /**
         * Creates a new SpatialPrefabBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpatialPrefabBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PrefabBlueprint to SpatialPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PrefabBlueprint);
        /**
         * Casts an instance of type Blueprint to SpatialPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to SpatialPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to SpatialPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to SpatialPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SpatialPrefabBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpatialPrefabBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpatialReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new SpatialReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpatialReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to SpatialReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to SpatialReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpatialReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpatialReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpatialReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpawnAnimationData extends FB.ProcessorData {

        /**
         * Creates a new SpawnAnimationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnAnimationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnAnimationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnAnimationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnAnimationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnAnimationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animationSpeed: number;

    }

    class SpawnAnimationFrameData extends FB.ProcessorData {

        /**
         * Creates a new SpawnAnimationFrameData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnAnimationFrameData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnAnimationFrameData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnAnimationFrameData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnAnimationFrameData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnAnimationFrameData type.
         */
        static typeInfo: VUShared.TypeInformation;

        animationFrame: number;

    }

    class SpawnDirectionData extends FB.ProcessorData {

        /**
         * Creates a new SpawnDirectionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnDirectionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnDirectionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnDirectionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnDirectionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnDirectionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        directionFromEmitterOrigin: number;
        inheritSpeedAndDirectionFromEmitter: boolean;

    }

    class SpawnEntitySelector extends VUShared.DataContainer {

        /**
         * Creates a new SpawnEntitySelector frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnEntitySelector frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SpawnEntitySelector. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnEntitySelector type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpawnEvent extends FB.MetricEvent {

        /**
         * Creates a new SpawnEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to SpawnEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to SpawnEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        time: number;

    }

    class SpawnOrientationData extends FB.ProcessorData {

        /**
         * Creates a new SpawnOrientationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnOrientationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnOrientationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnOrientationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnOrientationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnOrientationData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpawnPointManagerData extends FB.Asset {

        /**
         * Creates a new SpawnPointManagerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnPointManagerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SpawnPointManagerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SpawnPointManagerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnPointManagerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        useAiLodSystem: boolean;

    }

    class SpawnPositionData extends FB.ProcessorData {

        /**
         * Creates a new SpawnPositionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnPositionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnPositionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnPositionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnPositionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnPositionData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpawnRateData extends FB.ProcessorData {

        /**
         * Creates a new SpawnRateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnRateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnRateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnRateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnRateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnRateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        spawnRate: number;
        trailSegmentLength: number;
        distributeOverTime: boolean;
        distributeOverDistance: boolean;

    }

    class SpawnReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new SpawnReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to SpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to SpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        airdropTransform: VUShared.LinearTransform;
        controllableInput: VUShared.LinearTransform;
        controllableTransform: VUShared.LinearTransform;
        locationNameSid: string;
        locationTextSid: string;
        team: FB.TeamId;
        spawnProtectionFriendlyKilledCount: number;
        spawnProtectionFriendlyKilledTime: number;
        rotationRoll: number;
        throttle: number;
        initialSpawnDelay: number;
        spawnDelay: number;
        maxCount: number;
        maxCountSimultaneously: number;
        totalCountSimultaneouslyOfType: number;
        spawnAreaRadius: number;
        spawnProtectionRadius: number;
        rotationYaw: number;
        rotationPitch: number;
        initialVelocity: number;
        takeControlEntryIndex: number;
        spawnProtectionCheckAllTeams: boolean;
        clearBangersOnSpawn: boolean;
        tryToSpawnOutOfSight: boolean;
        sendWeaponEvents: boolean;
        takeControlOnTransformChange: boolean;
        returnControlOnIdle: boolean;
        autoSpawn: boolean;
        useAsSpawnPoint: boolean;
        lockedTeam: boolean;
        initialAutoSpawn: boolean;
        overwriteThrottle: boolean;
        onlySendEventForHumanPlayers: boolean;
        enabled: boolean;
        isDynamicSpawn: boolean;

    }

    class SpawnRotationData extends FB.ProcessorData {

        /**
         * Creates a new SpawnRotationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnRotationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnRotationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnRotationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnRotationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnRotationData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotation: number;

    }

    class SpawnRotationSpeedData extends FB.ProcessorData {

        /**
         * Creates a new SpawnRotationSpeedData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnRotationSpeedData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnRotationSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnRotationSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnRotationSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnRotationSpeedData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotationSpeed: number;

    }

    class SpawnScreenWeaponData {

        /**
         * Creates a new SpawnScreenWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnScreenWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpawnScreenWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponName: string;
        texture: FB.TextureAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpawnScreenWeaponData;

    }

    class SpawnSizeData extends FB.ProcessorData {

        /**
         * Creates a new SpawnSizeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnSizeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnSizeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnSizeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnSizeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnSizeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        size: number;

    }

    class SpawnSpeedData extends FB.ProcessorData {

        /**
         * Creates a new SpawnSpeedData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnSpeedData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to SpawnSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to SpawnSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SpawnSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnSpeedData type.
         */
        static typeInfo: VUShared.TypeInformation;

        speed: number;

    }

    class SpawnState extends FB.MetricState {

        /**
         * Creates a new SpawnState frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricState to SpawnState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricState);
        /**
         * Casts an instance of type MetricEvent to SpawnState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to SpawnState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnState type.
         */
        static typeInfo: VUShared.TypeInformation;

        team: number;

    }

    class SpawnSubViewData extends FB.SubViewData {

        /**
         * Creates a new SpawnSubViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnSubViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubViewData to SpawnSubViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubViewData);
        /**
         * Casts an instance of type DataContainer to SpawnSubViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnSubViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpawnSurveyEvent extends FB.MetricEvent {

        /**
         * Creates a new SpawnSurveyEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpawnSurveyEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to SpawnSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to SpawnSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpawnSurveyEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        surveyMetricLink: VUShared.Guid;

    }

    class SpecialMoveInterpolatedPoint {

        /**
         * Creates a new SpecialMoveInterpolatedPoint frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpecialMoveInterpolatedPoint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpecialMoveInterpolatedPoint type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: VUShared.Vec3;
        time: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpecialMoveInterpolatedPoint;

    }

    class SpecialMovesBinding {

        /**
         * Creates a new SpecialMovesBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpecialMovesBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpecialMovesBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        triggerHighVault: FB.AntRef;
        triggerUpVault: FB.AntRef;
        triggerLowVault: FB.AntRef;
        triggerSlideIntoProne: FB.AntRef;
        triggerSpecialAnimation: FB.AntRef;
        specialAnimationIndex: FB.AntRef;
        objectHeight: FB.AntRef;
        objectDistance: FB.AntRef;
        startObjectDistanceTimer: FB.AntRef;
        vaultObjectPositionX: FB.AntRef;
        vaultObjectPositionZ: FB.AntRef;
        cancelAnimation: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpecialMovesBinding;

    }

    class SpecialMovesComponentData extends FB.ComponentData {

        /**
         * Creates a new SpecialMovesComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpecialMovesComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SpecialMovesComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SpecialMovesComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpecialMovesComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpecialMovesComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpecialMovesComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vaultOverHighState: FB.SpecialMoveStateData;
        vaultUpHighState: FB.SpecialMoveStateData;
        vaultOverLowState: FB.SpecialMoveStateData;
        sprintToProneState: FB.SpecialMoveStateData;
        deathState: FB.SpecialMoveStateData;
        specialAnimationState: FB.SpecialMoveStateData;
        indexedDeathStates: FB.SpecialMoveStateData[];
        indexedSpecialAnimationStates: FB.SpecialMoveStateData[];
        indexedVaultOverHighStates: FB.SpecialMoveVaultStateCriteria[];
        indexedVaultUpStates: FB.SpecialMoveVaultStateCriteria[];
        indexedVaultOverLowStates: FB.SpecialMoveVaultStateCriteria[];
        binding: FB.SpecialMovesBinding;

    }

    export enum SpecialMovesPoseType {
        SpecialMovesPoseType_None = -1,
        SpecialMovesPoseType_Stand = 0,
        SpecialMovesPoseType_Crouch = 1,
        SpecialMovesPoseType_Prone = 2,
    }
    class SpecialMoveStateData {

        /**
         * Creates a new SpecialMoveStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpecialMoveStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpecialMoveStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minHeightScale: number;
        optimumDistanceFromObject: number;
        optimumHeightOfObject: number;
        optimumLengthOfObject: number;
        maxDistanceScale: number;
        minDistanceScale: number;
        maxHeightScale: number;
        motionPoints: FB.SpecialMoveInterpolatedPoint[];
        maxObjectLengthScale: number;
        minObjectLengthScale: number;
        exitAnimationDrivenStateVelocity: number;
        resetPose: FB.SpecialMovesPoseType;
        overridePose: FB.SpecialMovesPoseType;
        gravityPoints: FB.SpecialMoveInterpolatedPoint[];
        keepInitialSoldierDirection: boolean;
        scaleWithDistanceToObject: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpecialMoveStateData;

    }

    class SpecialMoveVaultStateCriteria {

        /**
         * Creates a new SpecialMoveVaultStateCriteria frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpecialMoveVaultStateCriteria frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpecialMoveVaultStateCriteria type.
         */
        static typeInfo: VUShared.TypeInformation;

        distToObject: number;
        distToObjectTolerance: number;
        heightOfObject: number;
        heightOfObjectTolerance: number;
        lengthOfObject: number;
        lengthOfObjectTolerance: number;
        specialMoveState: FB.SpecialMoveStateData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpecialMoveVaultStateCriteria;

    }

    class SpectatorReplayEntityData extends FB.EntityData {

        /**
         * Creates a new SpectatorReplayEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpectatorReplayEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SpectatorReplayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SpectatorReplayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpectatorReplayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpectatorReplayEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpectatorReplayEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpectatorSubViewData extends FB.SubViewData {

        /**
         * Creates a new SpectatorSubViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpectatorSubViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubViewData to SpectatorSubViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubViewData);
        /**
         * Casts an instance of type DataContainer to SpectatorSubViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpectatorSubViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpeedEventGateEntityData extends FB.GameEntityData {

        /**
         * Creates a new SpeedEventGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpeedEventGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to SpeedEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SpeedEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SpeedEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SpeedEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpeedEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpeedEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpeedEventGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minSpeed: number;
        maxSpeed: number;

    }

    class SpeedModifierData {

        /**
         * Creates a new SpeedModifierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpeedModifierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpeedModifierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        forwardConstant: number;
        backwardConstant: number;
        leftConstant: number;
        rightConstant: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpeedModifierData;

    }

    class SphereCollisionData {

        /**
         * Creates a new SphereCollisionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SphereCollisionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SphereCollisionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        extraRadius: number;
        counterNormalBrakeForceMod: number;
        enabled: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SphereCollisionData;

    }

    class SphereData extends FB.BaseShapeData {

        /**
         * Creates a new SphereData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SphereData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BaseShapeData to SphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to SphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SphereData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SphereData type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        radius: number;

    }

    class SphereEvaluatorData extends FB.EvaluatorData {

        /**
         * Creates a new SphereEvaluatorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SphereEvaluatorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EvaluatorData to SphereEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EvaluatorData);
        /**
         * Casts an instance of type EmitterComponentData to SphereEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to SphereEvaluatorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SphereEvaluatorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scale: VUShared.Vec3;
        pivot: VUShared.Vec3;
        radius: number;

    }

    class SplitterNode extends FB.UINodeData {

        /**
         * Creates a new SplitterNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new SplitterNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to SplitterNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to SplitterNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SplitterNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.UINodePort | undefined;
        outputs: FB.UINodePort[];

    }

    class SpotLightEntityData extends FB.LocalLightEntityData {

        /**
         * Creates a new SpotLightEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpotLightEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LocalLightEntityData to SpotLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LocalLightEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SpotLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SpotLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SpotLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpotLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpotLightEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpotLightEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shape: FB.SpotLightShape;
        coneInnerAngle: number;
        coneOuterAngle: number;
        frustumFov: number;
        frustumAspect: number;
        orthoWidth: number;
        orthoHeight: number;
        texture: FB.TextureAsset | undefined;
        castShadowsMinLevel: FB.QualityLevel;
        castShadowsEnable: boolean;

    }

    export enum SpotLightShape {
        SpotLightShape_Cone = 0,
        SpotLightShape_Frustum = 1,
        SpotLightShape_OrthoFrustum = 2,
    }
    class SpottingComponentData extends FB.ComponentData {

        /**
         * Creates a new SpottingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpottingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SpottingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SpottingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpottingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpottingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpottingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        spottingFov: number;
        teamOrderFov: number;
        spottingDistance: number;
        passiveSpottingTimeInterval: number;
        timeRequiredToPassiveSpot: number;
        orderNeedAmmoPercentage: number;
        orderHealPercentage: number;
        orderRepairPercentage: number;
        pickupOrderDistance: number;
        healOrderDistance: number;
        ammoOrderDistance: number;
        repairOrderDistance: number;
        coolDownHistoryTime: number;
        coolDownAllowedSpotsWithinHistory: number;
        onlyAllowedToHaveOneSpottedPlayer: boolean;

    }

    class SpottingEntityData extends FB.EntityData {

        /**
         * Creates a new SpottingEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpottingEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SpottingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SpottingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpottingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpottingEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpottingEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        teamToSpot: FB.TeamId;
        enabled: boolean;

    }

    class SpottingScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new SpottingScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpottingScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to SpottingScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to SpottingScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpottingScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SpottingTargetComponentData extends FB.ComponentData {

        /**
         * Creates a new SpottingTargetComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpottingTargetComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SpottingTargetComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SpottingTargetComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SpottingTargetComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SpottingTargetComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SpottingTargetComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        activeSpottedTime: number;
        passiveSpottedTime: number;
        activeSpottedTimeMultiplier: number;
        passiveSpottedTimeMultiplier: number;
        spotOnFireMultiplier: number;
        targetBoundingBoxCenter: boolean;

    }

    export enum SpottingType {
        STGunner = 0,
        STSquadLeader = 1,
        STDefault = 2,
        STPersonal = 3,
        STSnapshot = 4,
        STSquadUav = 5,
        STTypesCount = 6,
    }
    export enum SpotType {
        SpotType_None = 0,
        SpotType_Active = 1,
        SpotType_Passive = 2,
        SpotType_Radar = 3,
        SpotType_Unspottable = 4,
        SpotType_Count = 5,
    }
    class SpringData {

        /**
         * Creates a new SpringData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SpringData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SpringData type.
         */
        static typeInfo: VUShared.TypeInformation;

        length: number;
        stiffness: number;
        damping: number;
        maxSpringForce: number;
        progressiveStartRatio: number;
        progressiveExponent: number;
        visualClipOffset: number;
        attachOffsetY: number;
        disabledStrenghModifier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SpringData;

    }

    export enum SquadAction {
        SquadAction_PlayerJoined = 0,
        SquadAction_PlayerLeft = 1,
        SquadAction_PlayerWasKicked = 2,
    }
    export enum SquadId {
        SquadNone = 0,
        Squad1 = 1,
        Squad2 = 2,
        Squad3 = 3,
        Squad4 = 4,
        Squad5 = 5,
        Squad6 = 6,
        Squad7 = 7,
        Squad8 = 8,
        Squad9 = 9,
        Squad10 = 10,
        Squad11 = 11,
        Squad12 = 12,
        Squad13 = 13,
        Squad14 = 14,
        Squad15 = 15,
        Squad16 = 16,
        Squad17 = 17,
        Squad18 = 18,
        Squad19 = 19,
        Squad20 = 20,
        Squad21 = 21,
        Squad22 = 22,
        Squad23 = 23,
        Squad24 = 24,
        Squad25 = 25,
        Squad26 = 26,
        Squad27 = 27,
        Squad28 = 28,
        Squad29 = 29,
        Squad30 = 30,
        Squad31 = 31,
        Squad32 = 32,
        SquadIdCount = 33,
    }
    class StabilizerData extends VUShared.DataContainer {

        /**
         * Creates a new StabilizerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StabilizerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to StabilizerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StabilizerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pitchStrength: number;
        rollStrength: number;
        verticalVelocityStrength: number;
        yawStrength: number;
        advancedYaw: boolean;
        advanced: boolean;

    }

    export enum StabilizerProperty {
        SPPitchAngle = 0,
        SPYawAngle = 1,
        SPRollAngle = 2,
        SPVerticalPosition = 3,
        SPVerticalVelocity = 4,
    }
    class StabilizerSettings {

        /**
         * Creates a new StabilizerSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new StabilizerSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StabilizerSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        property: FB.StabilizerProperty;
        strength: number;
        advanced: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StabilizerSettings;

    }

    class StanceCameraData {

        /**
         * Creates a new StanceCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StanceCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StanceCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        validStances: number[];
        defaultCameraForStances: number[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StanceCameraData;

    }

    class StanceFilterComponentData extends FB.ComponentData {

        /**
         * Creates a new StanceFilterComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StanceFilterComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to StanceFilterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to StanceFilterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StanceFilterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StanceFilterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StanceFilterComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        validStances: number[];
        stanceChangeTime: number;
        actionsToFilter: FB.ActionSuppressor[];
        filterSpecificActions: boolean;
        undoParentStanceFilter: boolean;

    }

    class StanceSwitchSoundData {

        /**
         * Creates a new StanceSwitchSoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StanceSwitchSoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StanceSwitchSoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        stanceSwitchSound: FB.SoundAsset | undefined;
        validStances: number[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StanceSwitchSoundData;

    }

    class StandardMoveWaypointData extends FB.AbstractLocoWaypointData {

        /**
         * Creates a new StandardMoveWaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StandardMoveWaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractLocoWaypointData to StandardMoveWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractLocoWaypointData);
        /**
         * Casts an instance of type WaypointData to StandardMoveWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WaypointData);
        /**
         * Casts an instance of type DataContainer to StandardMoveWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StandardMoveWaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        moveTask: FB.AILocoMoveTaskData;

    }

    class StartEntityData extends FB.EntityData {

        /**
         * Creates a new StartEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StartEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to StartEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StartEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StartEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StartEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StartEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sortIndex: number;
        startName: string;
        isDefault: boolean;

    }

    class StatCategoriesAwardTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesAwardTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesAwardTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesAwardTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesAwardTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesAwardTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesAwardTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesAwardTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesAwardTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesBaseTree extends FB.TreeBase {

        /**
         * Creates a new StatCategoriesBaseTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesBaseTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeBase to StatCategoriesBaseTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesBaseTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesBaseTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesBaseTree type.
         */
        static typeInfo: VUShared.TypeInformation;

        rootBaseCategories: FB.StatsCategoryBaseData[];
        paramX: FB.CriteriaData[];
        paramY: FB.CriteriaData[];
        processAllLevelsInTree: boolean;

    }

    class StatCategoriesDifficultyTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesDifficultyTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesDifficultyTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesDifficultyTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesDifficultyTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesDifficultyTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesDifficultyTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesDifficultyTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesDifficultyTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesGuidTree extends FB.StatCategoriesBaseTree {

        /**
         * Creates a new StatCategoriesGuidTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesGuidTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesGuidTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesGuidTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesGuidTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesGuidTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesGuidTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesKitTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesKitTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesKitTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesKitTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesKitTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesKitTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesKitTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesKitTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesKitTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesLevelTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesLevelTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesLevelTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesLevelTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesLevelTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesLevelTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesLevelTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesLevelTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesLevelTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesPlayerRoleTree extends FB.StatCategoriesBaseTree {

        /**
         * Creates a new StatCategoriesPlayerRoleTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesPlayerRoleTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesPlayerRoleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesPlayerRoleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesPlayerRoleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesPlayerRoleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesPlayerRoleTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesScoreboardPositionTree extends FB.StatCategoriesBaseTree {

        /**
         * Creates a new StatCategoriesScoreboardPositionTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesScoreboardPositionTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesScoreboardPositionTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesScoreboardPositionTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesScoreboardPositionTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesScoreboardPositionTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesScoreboardPositionTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesScoringBucketTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesScoringBucketTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesScoringBucketTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesScoringBucketTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesScoringBucketTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesScoringBucketTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesScoringBucketTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesScoringBucketTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesScoringBucketTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesTree extends FB.StatCategoriesBaseTree {

        /**
         * Creates a new StatCategoriesTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesTree type.
         */
        static typeInfo: VUShared.TypeInformation;

        categories: FB.StatsCategoryData[];

    }

    class StatCategoriesVehicleStateTypeTree extends FB.StatCategoriesBaseTree {

        /**
         * Creates a new StatCategoriesVehicleStateTypeTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesVehicleStateTypeTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesVehicleStateTypeTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesVehicleStateTypeTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesVehicleStateTypeTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesVehicleStateTypeTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesVehicleStateTypeTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesVehicleTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesVehicleTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesVehicleTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesVehicleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesVehicleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesVehicleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesVehicleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesVehicleTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesVehicleTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesVehicleWeaponTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesVehicleWeaponTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesVehicleWeaponTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesVehicleWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesVehicleWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesVehicleWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesVehicleWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesVehicleWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesVehicleWeaponTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesWeaponAccessoryTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesWeaponAccessoryTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesWeaponAccessoryTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesWeaponAccessoryTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesWeaponAccessoryTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesWeaponAccessoryTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesWeaponAccessoryTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesWeaponAccessoryTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesWeaponAccessoryTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoriesWeaponTree extends FB.StatCategoriesGuidTree {

        /**
         * Creates a new StatCategoriesWeaponTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoriesWeaponTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatCategoriesGuidTree to StatCategoriesWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesGuidTree);
        /**
         * Casts an instance of type StatCategoriesBaseTree to StatCategoriesWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatCategoriesBaseTree);
        /**
         * Casts an instance of type TreeBase to StatCategoriesWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to StatCategoriesWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoriesWeaponTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoriesWeaponTree type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatCategoryTreeCollection extends FB.Asset {

        /**
         * Creates a new StatCategoryTreeCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatCategoryTreeCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to StatCategoryTreeCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatCategoryTreeCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatCategoryTreeCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        categoryTrees: FB.StatCategoriesBaseTree[];

    }

    class StateEventGateEntityData extends FB.GameEntityData {

        /**
         * Creates a new StateEventGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StateEventGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to StateEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to StateEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to StateEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StateEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StateEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StateEventGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StateEventGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        checkedState: FB.EventGateState;

    }

    class StateNode extends FB.UINodeData {

        /**
         * Creates a new StateNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new StateNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to StateNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to StateNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StateNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        screen: FB.UIScreenAsset | undefined;
        inValue: FB.UINodePort | undefined;
        show: FB.UINodePort | undefined;
        hide: FB.UINodePort | undefined;
        inputs: FB.UINodePort[];
        outputs: FB.UINodePort[];
        renderToTexture: boolean;

    }

    class StateRenderSettings extends VUShared.DataContainer {

        /**
         * Creates a new StateRenderSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new StateRenderSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to StateRenderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StateRenderSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        ps3PixelShaderConstantsEnable: boolean;

    }

    export enum StatEvent {
        StatEvent_Kill = 0,
        StatEvent_Kill_In_X = 1,
        StatEvent_Kill_As_X = 2,
        StatEvent_KillWith_X_As_Y = 3,
        StatEvent_KillDistance = 4,
        StatEvent_KillOf_X_As_Y = 5,
        StatEvent_KillOf_X_In_Y = 6,
        StatEvent_TeamKill = 7,
        StatEvent_AvengerKill = 8,
        StatEvent_SaviorKill = 9,
        StatEvent_DriverAssist = 10,
        StatEvent_TeamDriverAssist = 11,
        StatEvent_SquadDriverAssist = 12,
        StatEvent_PassengerAssist = 13,
        StatEvent_TeamPassengerAssist = 14,
        StatEvent_SquadPassengerAssist = 15,
        StatEvent_RoadKill = 16,
        StatEvent_Death = 17,
        StatEvent_DoubleKill = 18,
        StatEvent_TripleKill = 19,
        StatEvent_MultiKill = 20,
        StatEvent_PostMortemKill = 21,
        StatEvent_KillStreak = 22,
        StatEvent_KillStreakX = 23,
        StatEvent_CancelKillStreak = 24,
        StatEvent_Comeback = 25,
        StatEvent_SquadWipe = 26,
        StatEvent_NemesisKill = 27,
        StatEvent_NemesisKillX = 28,
        StatEvent_CancelNemesisKill = 29,
        StatEvent_SecondsAs_X = 30,
        StatEvent_SecondsWith_X = 31,
        StatEvent_SecondsIn_X = 32,
        StatEvent_SecondsOn_X = 33,
        StatEvent_Destroy_X = 34,
        StatEvent_Destroy_X_As_Y = 35,
        StatEvent_Destroy_X_In_Y = 36,
        StatEvent_DestroyWith_X_As_Y = 37,
        StatEvent_Destroy_X_With_Y = 38,
        StatEvent_DestroyExplosives = 39,
        StatEvent_Disabled_X = 40,
        StatEvent_KillOfWith_X_As_Y = 41,
        StatEvent_TaggedDamageAssist_X = 42,
        StatEvent_Tagged_X = 43,
        StatEvent_SuppressWith_X_As_Y = 44,
        StatEvent_Level_X_Completed_Y_Difficulty = 45,
        StatEvent_Level_X_Completed_Y_Difficulty_WithTimeValue = 46,
        StatEvent_CleanLevel_X_Completed = 47,
        StatEvent_RoundOverOutcome_X_On_Y = 48,
        StatEvent_Rounds = 49,
        StatEvent_Headshot_X_With_Y = 50,
        StatEvent_HeadshotAs_X_With_Y = 51,
        StatEvent_HeadshotDistance_With_X = 52,
        StatEvent_SelfHeal = 53,
        StatEvent_BestSquad = 54,
        StatEvent_ShotsFired_With_X = 55,
        StatEvent_ShotsHit_With_X = 56,
        StatEvent_SpotAssist = 57,
        StatEvent_SpotAssistFrom_X = 58,
        StatEvent_SuppressionAssist = 59,
        StatEvent_Heal = 60,
        StatEvent_TeamHeal = 61,
        StatEvent_SquadHeal = 62,
        StatEvent_Revive = 63,
        StatEvent_TeamRevive = 64,
        StatEvent_SquadRevive = 65,
        StatEvent_ReviveAccepted = 66,
        StatEvent_TeamReviveAccepted = 67,
        StatEvent_SquadReviveAccepted = 68,
        StatEvent_ManDownRevive = 69,
        StatEvent_Resupply = 70,
        StatEvent_TeamResupply = 71,
        StatEvent_SquadResupply = 72,
        StatEvent_KillAssist = 73,
        StatEvent_Repair = 74,
        StatEvent_TeamRepair = 75,
        StatEvent_SquadRepair = 76,
        StatEvent_VehicleDestroyAssist = 77,
        StatEvent_TreeDestroyed = 78,
        StatEvent_WallDestroyed = 79,
        StatEvent_CaptureCapturePoint = 80,
        StatEvent_CaptureCapturePointAssist = 81,
        StatEvent_NeutralizeCapturePoint = 82,
        StatEvent_NeutralizeCapturePointAssist = 83,
        StatEvent_CapturePointDefense = 84,
        StatEvent_CapturePointAttack = 85,
        StatEvent_CrateArmed = 86,
        StatEvent_CrateDisarmed = 87,
        StatEvent_CrateDestroyed = 88,
        StatEvent_CrateDefendKill = 89,
        StatEvent_CrateAttackKill = 90,
        StatEvent_SquadDefendOrder = 91,
        StatEvent_SquadAttackOrder = 92,
        StatEvent_SquadLeaderDefendOrder = 93,
        StatEvent_SquadLeaderAttackOrder = 94,
        StatEvent_RankUp = 95,
        StatEvent_UniqueAward = 96,
        StatEvent_DogTag = 97,
        StatEvent_DogTagSavior = 98,
        StatEvent_SquadSpawn = 99,
        StatEvent_SquadSpawnOnRemoteVehicle_X = 100,
        StatEvent_Suicide = 101,
        StatEvent_GainAward_X = 102,
        StatEvent_PlayerScoreboardPosition_X = 103,
        StatEvent_GainedHighestRank = 104,
        StatEvent_GainedHighestUnlockInBucket_X = 105,
        StatEvent_Misc_X_and_Y = 106,
        StatEvent_TotalScoreOn_X_Difficulty_Y = 107,
        StatEvent_Invalid = 108,
        StatEvent_Damage = 109,
        StatEvent_PlayerScoreboardPosition_X_On_Y = 110,
        StatEvent_CaptureCapturePointDOM = 111,
        StatEvent_CaptureCapturePointAssistDOM = 112,
        StatEvent_NeutralizeCapturePointDOM = 113,
        StatEvent_NeutralizeCapturePointAssistDOM = 114,
        StatEvent_Kill_With_X_In_Y = 115,
        StatEvent_DoubleKill_With_X_In_Y = 116,
        StatEvent_ShotFired_With_X = 117,
        StatEvent_SpotAssistFor_X = 118,
        StatEvent_Misc_X_In_Y = 119,
        StatEvent_CTF_Capture = 120,
        StatEvent_CTF_CaptureStreak = 121,
        StatEvent_CTF_CaptureAssist = 122,
        StatEvent_CTF_PickUp = 123,
        StatEvent_CTF_PickUpAssist = 124,
        StatEvent_CTF_Return = 125,
        StatEvent_CTF_CarrierAssist = 126,
        StatEvent_CTF_CarrierAssistStreak = 127,
        StatEvent_CTF_FlagTransporter_In_X = 128,
        StatEvent_CTF_CarrierSavior = 129,
        StatEvent_CTF_CarrierSuppression = 130,
        StatEvent_CTF_CarrierKiller = 131,
        StatEvent_CTF_CarrierKillAssist = 132,
        StatEvent_CTF_CarrierHeal = 133,
        StatEvent_BadLuck = 134,
        StatEvent_Jump_In_X = 135,
        StatEvent_Kill_From_X = 136,
        StatEvent_ParadropDestroy_X = 137,
        StatEvent_ParadropKill = 138,
        StatEvent_FreefallDeath = 139,
        StatEvent_PassengerKill_In_X = 140,
        StatEvent_TakeDogTagAssassin = 141,
        StatEvent_Spawn_In_X = 142,
        StatEvent_RoadKill_With_X = 143,
        StatEvent_LAST_ITEM = 144,
    }
    class StatEventTriggerEntityData extends FB.GameEntityData {

        /**
         * Creates a new StatEventTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatEventTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to StatEventTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to StatEventTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to StatEventTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StatEventTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StatEventTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StatEventTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatEventTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        statEvent: FB.StatEvent;
        miscParamX: string;
        miscParamY: string;
        sendToAll: boolean;

    }

    class StaticCameraData extends FB.TargetCameraData {

        /**
         * Creates a new StaticCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TargetCameraData to StaticCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetCameraData);
        /**
         * Casts an instance of type CameraData to StaticCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to StaticCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StaticCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StaticCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        leftCurve: VUShared.Vec3[];
        rightCurve: VUShared.Vec3[];
        upCurve: VUShared.Vec3[];
        downCurve: VUShared.Vec3[];
        upPitchAngle: number;
        yawInputAction: FB.EntryInputActionEnum;
        loosePartPhysics: FB.CameraLoosePartPhysicsData[];
        leftYawAngle: number;
        rightYawAngle: number;
        pitchSensitivityZoomed: number;
        downPitchAngle: number;
        averageFilterFrames: number;
        pitchInputAction: FB.EntryInputActionEnum;
        yawSensitivityZoomed: number;
        pitchSensitivityNonZoomed: number;
        yawSensitivityNonZoomed: number;
        resetAccumulatedInputOnViewChange: boolean;
        mirrorHorizontalCurves: boolean;
        accumulateInput: boolean;
        mirrorVerticalCurves: boolean;

    }

    class StaticConfigAsset extends FB.Asset {

        /**
         * Creates a new StaticConfigAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticConfigAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to StaticConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StaticConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticConfigAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StaticEnlightenData extends FB.Asset {

        /**
         * Creates a new StaticEnlightenData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticEnlightenData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to StaticEnlightenData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StaticEnlightenData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticEnlightenData type.
         */
        static typeInfo: VUShared.TypeInformation;

        staticIrradianceChromaTexture: FB.TextureAsset | undefined;
        staticIrradianceLumaTexture: FB.TextureAsset | undefined;
        staticDirectionTexture: FB.TextureAsset | undefined;

    }

    class StaticEnlightenEntityData extends FB.EnlightenEntityData {

        /**
         * Creates a new StaticEnlightenEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticEnlightenEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EnlightenEntityData to StaticEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EnlightenEntityData);
        /**
         * Casts an instance of type EntityData to StaticEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StaticEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StaticEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StaticEnlightenEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticEnlightenEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        enlightenData: FB.StaticEnlightenData | undefined;
        dynamicEnlightenData: FB.EnlightenDataAsset | undefined;

    }

    class StaticListItem {

        /**
         * Creates a new StaticListItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticListItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StaticListItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        itemName: string;
        dynamicDisable: FB.UIDataSourceInfo;
        dynamicNewContent: FB.UIDataSourceInfo;
        appendPlatformToSID: boolean;
        excludeInRetail: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StaticListItem;

    }

    class StaticModelEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new StaticModelEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticModelEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StaticModelEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticModelEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        partLinks: FB.PartLinkData[];
        mesh: FB.MeshAsset | undefined;
        boneCount: number;
        basePoseTransforms: VUShared.LinearTransform[];
        networkInfo: FB.StaticModelNetworkInfo;
        physicsPartInfos: FB.PhysicsPartInfo[];
        excludeFromNearbyObjectDestruction: boolean;
        animatePhysics: boolean;
        visible: boolean;

    }

    class StaticModelGroupEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new StaticModelGroupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticModelGroupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StaticModelGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticModelGroupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        memberDatas: FB.StaticModelGroupMemberData[];
        hackToSolveRealTimeTweakingIssue: VUShared.Guid;
        networkIdCount: number;

    }

    class StaticModelGroupMemberData {

        /**
         * Creates a new StaticModelGroupMemberData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticModelGroupMemberData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StaticModelGroupMemberData type.
         */
        static typeInfo: VUShared.TypeInformation;

        instanceTransforms: VUShared.LinearTransform[];
        instanceScale: number[];
        instanceObjectVariation: number[];
        instanceCastSunShadow: boolean[];
        memberType: FB.GamePhysicsEntityData | undefined;
        meshEntityType: FB.EntityData | undefined;
        instanceCount: number;
        healthStateEntityManagerId: number;
        physicsPartRange: FB.IndexRange;
        physicsPartCountPerInstance: number;
        networkIdRange: FB.IndexRange;
        networkIdCountPerInstance: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StaticModelGroupMemberData;

    }

    class StaticModelNetworkInfo {

        /**
         * Creates a new StaticModelNetworkInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticModelNetworkInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StaticModelNetworkInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        partNetworkIdRanges: FB.IndexRange[];
        networkIdCount: number;
        childNetworkInfos: FB.ChildStaticModelNetworkInfo[];
        childNetworkIdCount: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StaticModelNetworkInfo;

    }

    class StaticUnlockList extends FB.Asset {

        /**
         * Creates a new StaticUnlockList frostbite instance.
         */
        constructor();
        /**
         * Creates a new StaticUnlockList frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to StaticUnlockList. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StaticUnlockList. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StaticUnlockList type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockInfos: FB.BasicUnlockInfo[];

    }

    export enum StatPeriod {
        StatPeriod_AllTime = 0,
        StatPeriod_Monthly = 1,
        StatPeriod_Weekly = 2,
        StatPeriod_Daily = 3,
        StatPeriod_Size = 4,
        StatPeriod_Error = 5,
    }
    class StatsCategoryAwardData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryAwardData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryAwardData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryAwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryAwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryAwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryAwardData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryAwardData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryBaseData extends FB.TreeNodeBase {

        /**
         * Creates a new StatsCategoryBaseData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryBaseData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryBaseData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryBaseData type.
         */
        static typeInfo: VUShared.TypeInformation;

        baseSubCategories: FB.StatsCategoryBaseData[];
        code: string;

    }

    class StatsCategoryData extends FB.StatsCategoryBaseData {

        /**
         * Creates a new StatsCategoryData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryData type.
         */
        static typeInfo: VUShared.TypeInformation;

        categories: FB.StatsCategoryData[];
        members: string[];

    }

    class StatsCategoryDifficultyData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryDifficultyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryDifficultyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryDifficultyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryDifficultyData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryGuidData extends FB.StatsCategoryBaseData {

        /**
         * Creates a new StatsCategoryGuidData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryGuidData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryGuidData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryGuidData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryGuidData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryGuidData type.
         */
        static typeInfo: VUShared.TypeInformation;

        objectInstanceGuids: VUShared.Guid[];

    }

    class StatsCategoryKitData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryKitData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryKitData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryKitData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryKitData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryKitData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryKitData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryKitData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryLevelData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryLevelData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryLevelData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryLevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryLevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryLevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryLevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryLevelData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryPlayerRoleData extends FB.StatsCategoryBaseData {

        /**
         * Creates a new StatsCategoryPlayerRoleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryPlayerRoleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryPlayerRoleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryPlayerRoleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryPlayerRoleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryPlayerRoleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        roles: FB.PlayerRole[];

    }

    class StatsCategoryScoreboardPositionData extends FB.StatsCategoryBaseData {

        /**
         * Creates a new StatsCategoryScoreboardPositionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryScoreboardPositionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryScoreboardPositionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryScoreboardPositionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryScoreboardPositionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryScoreboardPositionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        positions: FB.ScoreboardPosition[];

    }

    class StatsCategoryScoringBucketData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryScoringBucketData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryScoringBucketData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryScoringBucketData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryScoringBucketData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryScoringBucketData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryScoringBucketData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryScoringBucketData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryVehicleData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryVehicleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryVehicleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryVehicleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryVehicleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        firstVehicleId: number;

    }

    class StatsCategoryVehicleStateTypeData extends FB.StatsCategoryBaseData {

        /**
         * Creates a new StatsCategoryVehicleStateTypeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryVehicleStateTypeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryVehicleStateTypeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryVehicleStateTypeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryVehicleStateTypeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryVehicleStateTypeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        states: FB.VehicleStateType[];

    }

    class StatsCategoryVehicleWeaponData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryVehicleWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryVehicleWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryVehicleWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryVehicleWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryVehicleWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryVehicleWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryVehicleWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryWeaponAccessoryData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryWeaponAccessoryData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryWeaponAccessoryData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryWeaponAccessoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryWeaponAccessoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryWeaponAccessoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryWeaponAccessoryData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryWeaponAccessoryData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class StatsCategoryWeaponData extends FB.StatsCategoryGuidData {

        /**
         * Creates a new StatsCategoryWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatsCategoryWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type StatsCategoryGuidData to StatsCategoryWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryGuidData);
        /**
         * Casts an instance of type StatsCategoryBaseData to StatsCategoryWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.StatsCategoryBaseData);
        /**
         * Casts an instance of type TreeNodeBase to StatsCategoryWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to StatsCategoryWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatsCategoryWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soldierWeaponId: number;
        accessoryUnlockGates: FB.CriteriaGateList | undefined;
        unlocksInfo: FB.BasicUnlockInfo[];

    }

    export enum StatsMultiplicity {
        StatsMultiplicity_Invalid = 0,
        StatsMultiplicity_Solo = 1,
        StatsMultiplicity_Club = 2,
        StatsMultiplicity_LAST_ITEM = 3,
    }
    class StatSpamSetting {

        /**
         * Creates a new StatSpamSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatSpamSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StatSpamSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        event: FB.StatEvent;
        amountLimit: number;
        timeLimit: number;
        playerToPlayer: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StatSpamSetting;

    }

    class StatSpamSettings extends FB.Asset {

        /**
         * Creates a new StatSpamSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatSpamSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to StatSpamSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StatSpamSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatSpamSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        spamList: FB.StatSpamSetting[];

    }

    class StatSurveyEvent extends FB.MetricEvent {

        /**
         * Creates a new StatSurveyEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new StatSurveyEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to StatSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to StatSurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StatSurveyEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        surveyMetricLink: VUShared.Guid;

    }

    export enum StencilOperation {
        StencilOperation_Keep = 0,
        StencilOperation_Zero = 1,
        StencilOperation_Replace = 2,
        StencilOperation_IncrementSaturate = 3,
        StencilOperation_DecrementSaturate = 4,
        StencilOperation_Invert = 5,
        StencilOperation_IncrementWrap = 6,
        StencilOperation_DecrementWrap = 7,
    }
    class StopWatchEntityData extends FB.EntityData {

        /**
         * Creates a new StopWatchEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StopWatchEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to StopWatchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StopWatchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StopWatchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StopWatchEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StopWatchEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        updatePass: FB.UpdatePass;
        multiplier: number;
        triggerOnTime: number;

    }

    class StreamGridCell {

        /**
         * Creates a new StreamGridCell frostbite instance.
         */
        constructor();
        /**
         * Creates a new StreamGridCell frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StreamGridCell type.
         */
        static typeInfo: VUShared.TypeInformation;

        referenceData: FB.ReferenceObjectData | undefined;
        x: number;
        z: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StreamGridCell;

    }

    class StreamGridEntityData extends FB.SpatialEntityData {

        /**
         * Creates a new StreamGridEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StreamGridEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialEntityData to StreamGridEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to StreamGridEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StreamGridEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StreamGridEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StreamGridEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StreamGridEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cellSize: number;
        viewDistance: number;
        maxStreamInCountPerFrame: number;
        maxStreamOutCountPerFrame: number;
        cells: FB.StreamGridCell[];

    }

    class StreamGroupData extends VUShared.DataContainer {

        /**
         * Creates a new StreamGroupData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StreamGroupData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to StreamGroupData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StreamGroupData type.
         */
        static typeInfo: VUShared.TypeInformation;

        assets: FB.Asset[];

    }

    class StreamingGateEntityData extends FB.EntityData {

        /**
         * Creates a new StreamingGateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new StreamingGateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to StreamingGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to StreamingGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to StreamingGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to StreamingGateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StreamingGateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeout: number;

    }

    class StreamPoolAsset extends FB.Asset {

        /**
         * Creates a new StreamPoolAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new StreamPoolAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to StreamPoolAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to StreamPoolAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the StreamPoolAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        streamPoolId: number;
        streamBufferSizeXenon: number;
        streamBufferSizePs3: number;
        streamBufferSizeWin32: number;
        streamCountXenon: number;
        streamCountPs3: number;
        streamCountWin32: number;
        streamReadBlockSizeXenon: number;
        streamReadBlockSizePs3: number;
        streamReadBlockSizeWin32: number;
        streamStarveMode: FB.StreamStarveMode;

    }

    export enum StreamRealm {
        StreamRealm_None = 0,
        StreamRealm_Client = 1,
        StreamRealm_Both = 2,
    }
    export enum StreamStarveMode {
        StreamStarveMode_Off = 0,
        StreamStarveMode_On = 1,
        StreamStarveMode_Dynamic = 2,
    }
    class Strengths {

        /**
         * Creates a new Strengths frostbite instance.
         */
        constructor();
        /**
         * Creates a new Strengths frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Strengths type.
         */
        static typeInfo: VUShared.TypeInformation;

        infantry: number;
        lightArmour: number;
        heavyArmour: number;
        helicopter: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Strengths;

    }

    export enum StrengthType {
        Infantry = 0,
        LightArmour = 1,
        HeavyArmour = 2,
        Helicopter = 3,
        NumberOfStrengthTypes = 4,
    }
    class StringOption {

        /**
         * Creates a new StringOption frostbite instance.
         */
        constructor();
        /**
         * Creates a new StringOption frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the StringOption type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        value: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.StringOption;

    }

    export enum SubRealm {
        SubRealm_All = 0,
        SubRealm_LocalPlayer = 1,
        SubRealm_RemotePlayer = 2,
    }
    class SubScreenData {

        /**
         * Creates a new SubScreenData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubScreenData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SubScreenData type.
         */
        static typeInfo: VUShared.TypeInformation;

        screenPosition: VUShared.Vec3;
        projectionAngleY: number;
        projectionAngleZ: number;
        projectionAngleX: number;
        screenSize: number;
        iconSize: number;
        scaleIconSizeByDepthStrength: number;
        renderTargetApectRatio: number;
        renderTargetIndex: number;
        useRenderTarget: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SubScreenData;

    }

    class SubSkeleton {

        /**
         * Creates a new SubSkeleton frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubSkeleton frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SubSkeleton type.
         */
        static typeInfo: VUShared.TypeInformation;

        skeleton: FB.SkeletonAsset | undefined;
        boneMap: number[];
        transformMap: VUShared.LinearTransform[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SubSkeleton;

    }

    class SubsystemTimingConfigData {

        /**
         * Creates a new SubsystemTimingConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubsystemTimingConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SubsystemTimingConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sensing: number;
        evaluation: number;
        goalUpdates: number;
        intentUpdates: number;
        behaviourSelection: number;
        behaviourExecution: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SubsystemTimingConfigData;

    }

    class SubtitleDataNode extends FB.TreeNodeBase {

        /**
         * Creates a new SubtitleDataNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubtitleDataNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeNodeBase to SubtitleDataNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to SubtitleDataNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubtitleDataNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        time: number;
        displayTime: number;
        siD1: string;
        siD2: string;

    }

    class SubtitleDataTree extends FB.TreeBase {

        /**
         * Creates a new SubtitleDataTree frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubtitleDataTree frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeBase to SubtitleDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeBase);
        /**
         * Casts an instance of type Asset to SubtitleDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SubtitleDataTree. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubtitleDataTree type.
         */
        static typeInfo: VUShared.TypeInformation;

        subtitles: FB.SubtitleMainDataNode[];

    }

    class SubtitleMainDataNode extends FB.TreeNodeBase {

        /**
         * Creates a new SubtitleMainDataNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubtitleMainDataNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TreeNodeBase to SubtitleMainDataNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TreeNodeBase);
        /**
         * Casts an instance of type DataContainer to SubtitleMainDataNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubtitleMainDataNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        language: FB.LanguageFormat;
        subtitles: FB.SubtitleDataNode[];

    }

    class SubViewData extends VUShared.DataContainer {

        /**
         * Creates a new SubViewData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubViewData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SubViewData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubViewData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SubWorldData extends FB.SpatialPrefabBlueprint {

        /**
         * Creates a new SubWorldData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubWorldData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialPrefabBlueprint to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialPrefabBlueprint);
        /**
         * Casts an instance of type PrefabBlueprint to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PrefabBlueprint);
        /**
         * Casts an instance of type Blueprint to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SubWorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubWorldData type.
         */
        static typeInfo: VUShared.TypeInformation;

        registryContainer: FB.RegistryContainer | undefined;
        isWin32SubLevel: boolean;
        isXenonSubLevel: boolean;
        isPs3SubLevel: boolean;
        rememberStateOnStreamOut: boolean;

    }

    class SubWorldInclusion extends FB.Asset {

        /**
         * Creates a new SubWorldInclusion frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubWorldInclusion frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SubWorldInclusion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SubWorldInclusion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubWorldInclusion type.
         */
        static typeInfo: VUShared.TypeInformation;

        criteria: FB.SubWorldInclusionCriterion[];

    }

    class SubWorldInclusionCriterion extends VUShared.DataContainer {

        /**
         * Creates a new SubWorldInclusionCriterion frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubWorldInclusionCriterion frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SubWorldInclusionCriterion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubWorldInclusionCriterion type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        options: string[];

    }

    class SubWorldInclusionSetting extends VUShared.DataContainer {

        /**
         * Creates a new SubWorldInclusionSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubWorldInclusionSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SubWorldInclusionSetting. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubWorldInclusionSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

        criterion: FB.SubWorldInclusionCriterion | undefined;
        enabledOptions: string[];

    }

    class SubWorldInclusionSettings extends VUShared.DataContainer {

        /**
         * Creates a new SubWorldInclusionSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubWorldInclusionSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SubWorldInclusionSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubWorldInclusionSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        settings: FB.SubWorldInclusionSetting[];

    }

    class SubWorldReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new SubWorldReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SubWorldReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to SubWorldReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to SubWorldReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SubWorldReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SubWorldReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SubWorldReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bundleName: string;
        inclusionSettings: FB.SubWorldInclusionSettings | undefined;
        autoLoad: boolean;
        isWin32SubLevel: boolean;
        isXenonSubLevel: boolean;
        isPs3SubLevel: boolean;

    }

    class SunFlareComponentData extends FB.ComponentData {

        /**
         * Creates a new SunFlareComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SunFlareComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SunFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SunFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SunFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SunFlareComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SunFlareComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        element5AlphaScreenPosCurve: VUShared.Vec4;
        element5AlphaOccluderCurve: VUShared.Vec4;
        element5SizeScreenPosCurve: VUShared.Vec4;
        element2SizeOccluderCurve: VUShared.Vec4;
        element5SizeOccluderCurve: VUShared.Vec4;
        element2AlphaOccluderCurve: VUShared.Vec4;
        element2AlphaScreenPosCurve: VUShared.Vec4;
        element1Size: VUShared.Vec2;
        element1SizeOccluderCurve: VUShared.Vec4;
        element1SizeScreenPosCurve: VUShared.Vec4;
        element1AlphaOccluderCurve: VUShared.Vec4;
        element1AlphaScreenPosCurve: VUShared.Vec4;
        element5Size: VUShared.Vec2;
        element4SizeOccluderCurve: VUShared.Vec4;
        element3Size: VUShared.Vec2;
        element2Size: VUShared.Vec2;
        element4AlphaScreenPosCurve: VUShared.Vec4;
        element2SizeScreenPosCurve: VUShared.Vec4;
        element4SizeScreenPosCurve: VUShared.Vec4;
        element4Size: VUShared.Vec2;
        element3AlphaScreenPosCurve: VUShared.Vec4;
        element4AlphaOccluderCurve: VUShared.Vec4;
        element3SizeOccluderCurve: VUShared.Vec4;
        element3SizeScreenPosCurve: VUShared.Vec4;
        element3AlphaOccluderCurve: VUShared.Vec4;
        element1Shader: FB.SurfaceShaderBaseAsset | undefined;
        occluderSize: number;
        element2Shader: FB.SurfaceShaderBaseAsset | undefined;
        element3RayDistance: number;
        element4Shader: FB.SurfaceShaderBaseAsset | undefined;
        element4RayDistance: number;
        element2RayDistance: number;
        element1RayDistance: number;
        element5RayDistance: number;
        element3Shader: FB.SurfaceShaderBaseAsset | undefined;
        realm: FB.Realm;
        element5Shader: FB.SurfaceShaderBaseAsset | undefined;
        element5Enable: boolean;
        element3Enable: boolean;
        element2Enable: boolean;
        element1Enable: boolean;
        debugDrawOccluder: boolean;
        enable: boolean;
        element4Enable: boolean;

    }

    class SunFlareEffectState extends VUShared.DataContainer {

        /**
         * Creates a new SunFlareEffectState frostbite instance.
         */
        constructor();
        /**
         * Creates a new SunFlareEffectState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SunFlareEffectState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SunFlareEffectState type.
         */
        static typeInfo: VUShared.TypeInformation;

        element5AlphaScreenPosCurve: VUShared.Vec4;
        element5AlphaOccluderCurve: VUShared.Vec4;
        element2SizeScreenPosCurve: VUShared.Vec4;
        element5SizeScreenPosCurve: VUShared.Vec4;
        element2AlphaOccluderCurve: VUShared.Vec4;
        element2AlphaScreenPosCurve: VUShared.Vec4;
        element1Size: VUShared.Vec2;
        element1SizeOccluderCurve: VUShared.Vec4;
        element1SizeScreenPosCurve: VUShared.Vec4;
        element1AlphaOccluderCurve: VUShared.Vec4;
        element1AlphaScreenPosCurve: VUShared.Vec4;
        element5SizeOccluderCurve: VUShared.Vec4;
        element4SizeScreenPosCurve: VUShared.Vec4;
        element3Size: VUShared.Vec2;
        element2Size: VUShared.Vec2;
        element2SizeOccluderCurve: VUShared.Vec4;
        element4AlphaScreenPosCurve: VUShared.Vec4;
        element3SizeOccluderCurve: VUShared.Vec4;
        element4Size: VUShared.Vec2;
        element5Size: VUShared.Vec2;
        element3SizeScreenPosCurve: VUShared.Vec4;
        element3AlphaOccluderCurve: VUShared.Vec4;
        element4SizeOccluderCurve: VUShared.Vec4;
        element3AlphaScreenPosCurve: VUShared.Vec4;
        element4AlphaOccluderCurve: VUShared.Vec4;
        element3Shader: FB.SurfaceShaderBaseAsset | undefined;
        element2Shader: FB.SurfaceShaderBaseAsset | undefined;
        occluderSize: number;
        element4Shader: FB.SurfaceShaderBaseAsset | undefined;
        element4RayDistance: number;
        element1Shader: FB.SurfaceShaderBaseAsset | undefined;
        element2RayDistance: number;
        element1RayDistance: number;
        element5RayDistance: number;
        element3RayDistance: number;
        element5Shader: FB.SurfaceShaderBaseAsset | undefined;
        element5Enable: boolean;
        element4Enable: boolean;
        element3Enable: boolean;
        element2Enable: boolean;
        element1Enable: boolean;
        debugDrawOccluder: boolean;
        enable: boolean;

    }

    class SupplyData {

        /**
         * Creates a new SupplyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupplyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SupplyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        healing: FB.SupplyUnitSphereData;
        ammo: FB.SupplyUnitSphereData;
        supplyVehicles: boolean;
        supplySoldiers: boolean;
        teamSpecific: boolean;
        excludeSelf: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SupplyData;

    }

    class SupplySphereComponentData extends FB.ComponentData {

        /**
         * Creates a new SupplySphereComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupplySphereComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SupplySphereComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SupplySphereComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SupplySphereComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SupplySphereComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SupplySphereComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        supplyData: FB.SupplyData;

    }

    class SupplySphereEntityData extends FB.ExplosionPackEntityData {

        /**
         * Creates a new SupplySphereEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupplySphereEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ExplosionPackEntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ExplosionPackEntityData);
        /**
         * Casts an instance of type MeshProjectileEntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshProjectileEntityData);
        /**
         * Casts an instance of type ProjectileEntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SupplySphereEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SupplySphereEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        supplyData: FB.SupplyData;

    }

    class SupplySphereWeaponData extends FB.WeaponData {

        /**
         * Creates a new SupplySphereWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupplySphereWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to SupplySphereWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to SupplySphereWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to SupplySphereWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SupplySphereWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        supplyData: FB.SupplyData;

    }

    class SupplyUnitSphereData {

        /**
         * Creates a new SupplyUnitSphereData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupplyUnitSphereData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SupplyUnitSphereData type.
         */
        static typeInfo: VUShared.TypeInformation;

        radius: number;
        supplyIncSpeed: number;
        supplyPointsCapacity: number;
        supplyPointsRefillSpeed: number;
        infiniteCapacity: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SupplyUnitSphereData;

    }

    class SupportedShootingBinding {

        /**
         * Creates a new SupportedShootingBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupportedShootingBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SupportedShootingBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        supported: FB.AntRef;
        supportedPos: FB.AntRef;
        forwardVector: FB.AntRef;
        yaw: FB.AntRef;
        pitch: FB.AntRef;
        distToObject: FB.AntRef;
        heightOfObject: FB.AntRef;
        undeploying: FB.AntRef;
        animatedCamera: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SupportedShootingBinding;

    }

    class SupportedShootingCommonData extends FB.Asset {

        /**
         * Creates a new SupportedShootingCommonData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupportedShootingCommonData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SupportedShootingCommonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SupportedShootingCommonData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SupportedShootingCommonData type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimingConstraints: FB.AimingConstraintsData;
        enterSupportedShootingAction: FB.EntryInputActionEnum;
        binding: FB.SupportedShootingBinding;
        stand: FB.SupportedShootingProximityChecking;
        crouch: FB.SupportedShootingProximityChecking;

    }

    class SupportedShootingComponentData extends FB.ComponentData {

        /**
         * Creates a new SupportedShootingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupportedShootingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to SupportedShootingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to SupportedShootingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SupportedShootingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SupportedShootingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SupportedShootingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        commonData: FB.SupportedShootingCommonData | undefined;

    }

    class SupportedShootingProximityChecking {

        /**
         * Creates a new SupportedShootingProximityChecking frostbite instance.
         */
        constructor();
        /**
         * Creates a new SupportedShootingProximityChecking frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SupportedShootingProximityChecking type.
         */
        static typeInfo: VUShared.TypeInformation;

        rayAboveGunHeightOffset: number;
        rayAboveLength: number;
        rayBelowGunHeightOffset: number;
        rayBelowLength: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SupportedShootingProximityChecking;

    }

    class SuppressionReactionData {

        /**
         * Creates a new SuppressionReactionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SuppressionReactionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SuppressionReactionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        suppressionHighThreshold: number;
        suppressionLowThreshold: number;
        suppressionUIThreshold: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SuppressionReactionData;

    }

    class SuppressionScoringHandlerData extends FB.ScoringHandlerData {

        /**
         * Creates a new SuppressionScoringHandlerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SuppressionScoringHandlerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ScoringHandlerData to SuppressionScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ScoringHandlerData);
        /**
         * Casts an instance of type DataContainer to SuppressionScoringHandlerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SuppressionScoringHandlerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        suppressionAmountLimit: number;
        timeSinceSuppressionLimit: number;

    }

    class SuppressionSettings extends VUShared.DataContainer {

        /**
         * Creates a new SuppressionSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SuppressionSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SuppressionSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SuppressionSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class Surface2dDrawMethodData {

        /**
         * Creates a new Surface2dDrawMethodData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Surface2dDrawMethodData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Surface2dDrawMethodData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Surface2dDrawMethodData;

    }

    class Surface2dDrawPassData {

        /**
         * Creates a new Surface2dDrawPassData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Surface2dDrawPassData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Surface2dDrawPassData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Surface2dDrawPassData;

    }

    class Surface3dDrawMethodData {

        /**
         * Creates a new Surface3dDrawMethodData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Surface3dDrawMethodData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the Surface3dDrawMethodData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.Surface3dDrawMethodData;

    }

    class SurfaceShaderBaseAsset extends FB.Asset {

        /**
         * Creates a new SurfaceShaderBaseAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new SurfaceShaderBaseAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to SurfaceShaderBaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to SurfaceShaderBaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SurfaceShaderBaseAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class SurfaceShaderInstanceData extends VUShared.DataContainer {

        /**
         * Creates a new SurfaceShaderInstanceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SurfaceShaderInstanceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SurfaceShaderInstanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SurfaceShaderInstanceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shader: FB.SurfaceShaderBaseAsset | undefined;

    }

    class SurfaceShaderInstanceDataStruct {

        /**
         * Creates a new SurfaceShaderInstanceDataStruct frostbite instance.
         */
        constructor();
        /**
         * Creates a new SurfaceShaderInstanceDataStruct frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the SurfaceShaderInstanceDataStruct type.
         */
        static typeInfo: VUShared.TypeInformation;

        shader: FB.SurfaceShaderBaseAsset | undefined;
        boolParameters: FB.BoolShaderParameter[];
        vectorParameters: FB.VectorShaderParameter[];
        vectorArrayParameters: FB.VectorArrayShaderParameter[];
        textureParameters: FB.TextureShaderParameter[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.SurfaceShaderInstanceDataStruct;

    }

    export enum SurfaceShaderType {
        SurfaceShaderType_Opaque = 0,
        SurfaceShaderType_OpaqueAlphaTest = 1,
        SurfaceShaderType_OpaqueAlphaTestSimple = 2,
        SurfaceShaderType_Transparent = 3,
        SurfaceShaderType_TransparentDecal = 4,
    }
    class SurroundingGeometryEntityData extends FB.GameEntityData {

        /**
         * Creates a new SurroundingGeometryEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SurroundingGeometryEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to SurroundingGeometryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to SurroundingGeometryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to SurroundingGeometryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SurroundingGeometryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SurroundingGeometryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SurroundingGeometryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SurroundingGeometryEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        allowedVehicleList: FB.AllowedVehiclesData | undefined;
        combatArea: FB.CombatAreaTriggerEntityData | undefined;
        combatAreaIndex: number;

    }

    class SurveyEvent extends FB.MetricEvent {

        /**
         * Creates a new SurveyEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new SurveyEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to SurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to SurveyEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SurveyEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        surveyName: string;
        answerQuestion1: number;
        answerQuestion2: number;
        answerQuestion3: number;
        answerQuestion4: number;
        answerQuestion5: number;
        freeTextField: string;
        surveyMetricLink: VUShared.Guid;

    }

    class SurveySuppressedEvent extends FB.MetricEvent {

        /**
         * Creates a new SurveySuppressedEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new SurveySuppressedEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to SurveySuppressedEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to SurveySuppressedEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SurveySuppressedEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        suppressReason: string;

    }

    export enum SweepSelectionType {
        SstTargetLost = 0,
        SstFirstTime = 1,
    }
    class SwimmingStateData extends FB.CharacterStateData {

        /**
         * Creates a new SwimmingStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SwimmingStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CharacterStateData to SwimmingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterStateData);
        /**
         * Casts an instance of type DataContainer to SwimmingStateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SwimmingStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bodyUnderWater: number;

    }

    class SwitcherEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new SwitcherEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new SwitcherEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to SwitcherEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to SwitcherEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SwitcherEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        caseTrigger: FB.AudioGraphNodePort;
        caseValue: number;

    }

    class SwitcherNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new SwitcherNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SwitcherNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to SwitcherNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to SwitcherNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SwitcherNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outputs: FB.SwitcherEntry[];
        trigger: FB.AudioGraphNodePort;
        value: FB.AudioGraphNodePort;
        defaultCaseValue: number;

    }

    class SwitchPropertyStringEntityData extends FB.EntityData {

        /**
         * Creates a new SwitchPropertyStringEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SwitchPropertyStringEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SwitchPropertyStringEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SwitchPropertyStringEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SwitchPropertyStringEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SwitchPropertyStringEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SwitchPropertyStringEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        stringProperties: string[];
        realm: FB.Realm;

    }

    export enum SwitchTeamsResult {
        SwitchTeamsResult_Success = -1,
        SwitchTeamsResult_FailedUnbalanced = 0,
        SwitchTeamsResult_FailedTooSoon = 1,
        SwitchTeamsResult_FailedTooFewTickets = 2,
        SwitchTeamsResult_FailedMustBeDead = 3,
        SwitchTeamsResult_FailedTeamFull = 4,
        SwitchTeamsResult_FailedDisabled = 5,
    }
    class SyncAnimationsEntityData extends FB.EntityData {

        /**
         * Creates a new SyncAnimationsEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncAnimationsEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SyncAnimationsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SyncAnimationsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SyncAnimationsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SyncAnimationsEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncAnimationsEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        externalTime: number;
        nearEndEventTime: number;
        startServerPaused: boolean;

    }

    export enum SyncAnimationsState {
        Idle = 0,
        Play = 1,
        Skip = 2,
        Stop = 3,
    }
    class SyncedBFSettings extends FB.SystemSettings {

        /**
         * Creates a new SyncedBFSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedBFSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to SyncedBFSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to SyncedBFSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedBFSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        gameModeCounterModifier: number;
        unlicensedUnlocksUnlocked: boolean;
        noMinimap: boolean;
        noHud: boolean;
        noMinimapSpotting: boolean;
        no3dSpotting: boolean;
        noNameTag: boolean;
        onlySquadLeaderSpawn: boolean;
        teamSwitchingAllowed: boolean;
        memoryDefragUI: boolean;
        memoryGarbageCollectHavok: boolean;
        memoryDefragGlobal: boolean;
        allUnlocksUnlocked: boolean;

    }

    class SyncedBoolEntityData extends FB.EntityData {

        /**
         * Creates a new SyncedBoolEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedBoolEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SyncedBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SyncedBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SyncedBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SyncedBoolEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedBoolEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: boolean;

    }

    class SyncedFloatEntityData extends FB.EntityData {

        /**
         * Creates a new SyncedFloatEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedFloatEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SyncedFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SyncedFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SyncedFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SyncedFloatEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedFloatEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: number;

    }

    class SyncedGameSettings extends FB.SystemSettings {

        /**
         * Creates a new SyncedGameSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedGameSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to SyncedGameSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to SyncedGameSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedGameSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxAllowedLatency: number;
        manDownTimeModifier: number;
        bulletDamageModifier: number;
        difficultyIndex: number;
        disableRegenerateHealth: boolean;
        enableFriendlyFire: boolean;
        allowClientSideDamageArbitration: boolean;
        disableToggleEntryCamera: boolean;

    }

    class SyncedIntEntityData extends FB.EntityData {

        /**
         * Creates a new SyncedIntEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedIntEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SyncedIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SyncedIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SyncedIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SyncedIntEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedIntEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: number;

    }

    class SyncedSequenceEntityData extends FB.SequenceEntityData {

        /**
         * Creates a new SyncedSequenceEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedSequenceEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SequenceEntityData to SyncedSequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SequenceEntityData);
        /**
         * Casts an instance of type EntityData to SyncedSequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SyncedSequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SyncedSequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SyncedSequenceEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedSequenceEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        interpolateTime: boolean;

    }

    class SyncedTransformEntityData extends FB.EntityData {

        /**
         * Creates a new SyncedTransformEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new SyncedTransformEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to SyncedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to SyncedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to SyncedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to SyncedTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SyncedTransformEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: VUShared.LinearTransform;
        interpolate: boolean;

    }

    class SystemSettings extends VUShared.DataContainer {

        /**
         * Creates a new SystemSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new SystemSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to SystemSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the SystemSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class TacticalObjectiveEntityData extends FB.GameEntityData {

        /**
         * Creates a new TacticalObjectiveEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TacticalObjectiveEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TacticalObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TacticalObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TacticalObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TacticalObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TacticalObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TacticalObjectiveEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TacticalObjectiveEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        missionSid: string;
        briefingSidTeam1: string;
        briefingSidTeam2: string;
        team1Timer: number;
        team2Timer: number;

    }

    class TargetCameraData extends FB.CameraData {

        /**
         * Creates a new TargetCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TargetCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CameraData to TargetCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to TargetCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TargetCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TargetCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TargetCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        hud: FB.HudData;
        uiParts: FB.UIPartData[];

    }

    class TargetCameraEntityData extends FB.CameraEntityBaseData {

        /**
         * Creates a new TargetCameraEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TargetCameraEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type CameraEntityBaseData to TargetCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraEntityBaseData);
        /**
         * Casts an instance of type SpatialEntityData to TargetCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TargetCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TargetCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TargetCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TargetCameraEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TargetCameraEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        camera: FB.TargetCameraData | undefined;

    }

    class TargetEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new TargetEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TargetEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TargetEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TargetEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TargetEvaluationConstantData extends FB.Asset {

        /**
         * Creates a new TargetEvaluationConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TargetEvaluationConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TargetEvaluationConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TargetEvaluationConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TargetEvaluationConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxBattleStrength: number;
        defaultHumanTargetPreference: number;
        otherSquadAttackerFactorUsage: number;
        targetFlipFactorUsage: number;

    }

    class TargetEvaluatorComponentData extends FB.ComponentData {

        /**
         * Creates a new TargetEvaluatorComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TargetEvaluatorComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to TargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to TargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TargetEvaluatorComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TargetEvaluatorComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        updateInterval: number;

    }

    export enum TargetMode {
        TargetMode_FirstPerson = 0,
        TargetMode_ThirdPerson = 1,
        TargetMode_Index = 2,
    }
    export enum TargetPosKnowledgeType {
        TargetPosKnown = 0,
        TargetPosUnknown = 1,
        TargetPosFind = 2,
    }
    class TeamAsset extends FB.Asset {

        /**
         * Creates a new TeamAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TeamAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TeamAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TeamAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TeamAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum TeamAssignMode {
        TamEqualTeams = 0,
        TamFullTeams = 1,
        TamOneTeam = 2,
    }
    class TeamData extends FB.TeamAsset {

        /**
         * Creates a new TeamData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TeamData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TeamAsset to TeamData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TeamAsset);
        /**
         * Casts an instance of type Asset to TeamData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TeamData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TeamData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soldier: FB.SoldierBlueprint | undefined;
        faction: FB.FactionId;
        soldierCustomization: FB.SoldierCustomizationAsset[];
        vehicleCustomization: FB.VehicleCustomizationAsset[];

    }

    class TeamEntityData extends FB.GameEntityData {

        /**
         * Creates a new TeamEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TeamEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TeamEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TeamEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        team: FB.TeamData | undefined;
        id: FB.TeamId;

    }

    class TeamFilterEntityData extends FB.GameEntityData {

        /**
         * Creates a new TeamFilterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TeamFilterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TeamFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TeamFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TeamFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TeamFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TeamFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TeamFilterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TeamFilterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        team: FB.TeamId;
        invertFilter: boolean;
        generateEventForEveryMatchingTeamMember: boolean;

    }

    export enum TeamId {
        TeamNeutral = 0,
        Team1 = 1,
        Team2 = 2,
        Team3 = 3,
        Team4 = 4,
        Team5 = 5,
        Team6 = 6,
        Team7 = 7,
        Team8 = 8,
        Team9 = 9,
        Team10 = 10,
        Team11 = 11,
        Team12 = 12,
        Team13 = 13,
        Team14 = 14,
        Team15 = 15,
        Team16 = 16,
        TeamIdCount = 17,
    }
    class TelemetryTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new TelemetryTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TelemetryTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TelemetryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TelemetryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TelemetryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TelemetryTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TelemetryTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        value: string;

    }

    export enum TerrainBrushDetailOperation {
        Lerp = 0,
        Add = 1,
        Multiply = 2,
    }
    class TerrainColorTreeAsset extends FB.RasterTreeAsset {

        /**
         * Creates a new TerrainColorTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainColorTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterTreeAsset to TerrainColorTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterTreeAsset);
        /**
         * Casts an instance of type DataContainer to TerrainColorTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainColorTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainData extends FB.Asset {

        /**
         * Creates a new TerrainData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TerrainData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TerrainData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainDecalsData extends FB.Asset {

        /**
         * Creates a new TerrainDecalsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainDecalsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TerrainDecalsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TerrainDecalsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainDecalsData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum TerrainDrawPassType {
        TerrainDrawPassType_SinglePass = 0,
        TerrainDrawPassType_MultipassFirst = 1,
        TerrainDrawPassType_MultipassConsecutive = 2,
    }
    class TerrainEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new TerrainEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        terrainAsset: FB.TerrainData | undefined;
        waterMaterial: FB.MaterialContainerPair | undefined;
        visible: boolean;

    }

    class TerrainFillDecalData extends FB.VisualVectorShapeData {

        /**
         * Creates a new TerrainFillDecalData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainFillDecalData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VisualVectorShapeData to TerrainFillDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VisualVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to TerrainFillDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to TerrainFillDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to TerrainFillDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TerrainFillDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TerrainFillDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainFillDecalData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shader2d: FB.SurfaceShaderBaseAsset | undefined;
        shader3dZOnly: FB.SurfaceShaderBaseAsset | undefined;

    }

    class TerrainGeoTexture {

        /**
         * Creates a new TerrainGeoTexture frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainGeoTexture frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TerrainGeoTexture type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TerrainGeoTexture;

    }

    class TerrainHeightfieldData extends VUShared.DataContainer {

        /**
         * Creates a new TerrainHeightfieldData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainHeightfieldData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainHeightfieldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainHeightfieldData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainLayerCombinationDrawData {

        /**
         * Creates a new TerrainLayerCombinationDrawData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainLayerCombinationDrawData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TerrainLayerCombinationDrawData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TerrainLayerCombinationDrawData;

    }

    class TerrainLayerCombinationDrawPassData {

        /**
         * Creates a new TerrainLayerCombinationDrawPassData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainLayerCombinationDrawPassData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TerrainLayerCombinationDrawPassData type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TerrainLayerCombinationDrawPassData;

    }

    class TerrainLayerData extends VUShared.DataContainer {

        /**
         * Creates a new TerrainLayerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainLayerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainLayerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainLayerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainLayerProceduralMask {

        /**
         * Creates a new TerrainLayerProceduralMask frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainLayerProceduralMask frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TerrainLayerProceduralMask type.
         */
        static typeInfo: VUShared.TypeInformation;

        altitudeMin: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TerrainLayerProceduralMask;

    }

    export enum TerrainLayerType {
        TerrainLayerType_IgnoreMask = 0,
        TerrainLayerType_Masked = 1,
        TerrainLayerType_BinaryMasked = 2,
    }
    class TerrainMaskTreeAsset extends FB.RasterTreeAsset {

        /**
         * Creates a new TerrainMaskTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainMaskTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterTreeAsset to TerrainMaskTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterTreeAsset);
        /**
         * Casts an instance of type DataContainer to TerrainMaskTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainMaskTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainMaterialMapAsset extends FB.Asset {

        /**
         * Creates a new TerrainMaterialMapAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainMaterialMapAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TerrainMaterialMapAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TerrainMaterialMapAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainMaterialMapAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainMaterialTreeAsset extends FB.RasterTreeAsset {

        /**
         * Creates a new TerrainMaterialTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainMaterialTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterTreeAsset to TerrainMaterialTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterTreeAsset);
        /**
         * Casts an instance of type DataContainer to TerrainMaterialTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainMaterialTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainMeshScatteringType extends VUShared.DataContainer {

        /**
         * Creates a new TerrainMeshScatteringType frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainMeshScatteringType frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainMeshScatteringType. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainMeshScatteringType type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainQuadDecalAtlasTile {

        /**
         * Creates a new TerrainQuadDecalAtlasTile frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainQuadDecalAtlasTile frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TerrainQuadDecalAtlasTile type.
         */
        static typeInfo: VUShared.TypeInformation;

        tileIndexX: number;
        tileIndexY: number;
        tileCountX: number;
        tileCountY: number;
        flipX: boolean;
        flipY: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TerrainQuadDecalAtlasTile;

    }

    class TerrainQuadDecalAtlasTileTemplateData extends FB.Asset {

        /**
         * Creates a new TerrainQuadDecalAtlasTileTemplateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainQuadDecalAtlasTileTemplateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TerrainQuadDecalAtlasTileTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TerrainQuadDecalAtlasTileTemplateData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainQuadDecalAtlasTileTemplateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        atlasTile: FB.TerrainQuadDecalAtlasTile;

    }

    class TerrainQuadDecalData extends FB.VisualVectorShapeData {

        /**
         * Creates a new TerrainQuadDecalData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainQuadDecalData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VisualVectorShapeData to TerrainQuadDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VisualVectorShapeData);
        /**
         * Casts an instance of type VectorShapeData to TerrainQuadDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to TerrainQuadDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to TerrainQuadDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TerrainQuadDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TerrainQuadDecalData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainQuadDecalData type.
         */
        static typeInfo: VUShared.TypeInformation;

        userMasks: VUShared.Vec4;
        shader3dZOnly: FB.SurfaceShaderBaseAsset | undefined;
        shader2d: FB.SurfaceShaderBaseAsset | undefined;
        atlasTileTemplate: FB.TerrainQuadDecalAtlasTileTemplateData | undefined;
        atlasTile: FB.TerrainQuadDecalAtlasTile;

    }

    export enum TerrainRenderMode {
        TerrainRenderMode_Default = 0,
        TerrainRenderMode_DrawPassCount2d = 1,
        TerrainRenderMode_LayerCount2d = 2,
        TerrainRenderMode_LayerCount3d = 3,
        TerrainRenderMode_MaskedLayerCount2d = 4,
        TerrainRenderMode_MaskedLayerCount3d = 5,
    }
    class TerrainSettings extends VUShared.DataContainer {

        /**
         * Creates a new TerrainSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        heightQueryCacheSize: number;
        modifiersCapacity: number;
        intersectingModifiersMax: number;
        modifierDepthFactor: number;
        modifierSlopeMax: number;
        modifiersEnable: boolean;

    }

    class TerrainStreamingSettings extends VUShared.DataContainer {

        /**
         * Creates a new TerrainStreamingSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainStreamingSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainStreamingSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainStreamingSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        dataLoadJobCount: number;
        activeFreeStreamingDataLoadJobCount: number;
        heightfieldAtlasSampleCountXFactor: number;
        additionalBlurriness: number;
        invisibleDetailReductionFactor: number;
        occludedDetailReductionFactor: number;
        heightfieldAtlasSampleCountYFactor: number;
        maskAtlasSampleCountYFactor: number;
        colorAdditionalBlurriness: number;
        maskAtlasSampleCountXFactor: number;
        maskAdditionalBlurriness: number;
        colorAtlasSampleCountXFactor: number;
        colorAtlasSampleCountYFactor: number;
        keepPoolFullEnable: boolean;
        loadOccluderDataEnable: boolean;

    }

    class TerrainStreamingTreeAsset extends FB.Asset {

        /**
         * Creates a new TerrainStreamingTreeAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainStreamingTreeAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TerrainStreamingTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TerrainStreamingTreeAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainStreamingTreeAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainSubLayerData extends VUShared.DataContainer {

        /**
         * Creates a new TerrainSubLayerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainSubLayerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainSubLayerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainSubLayerData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TerrainUndergrowthType extends VUShared.DataContainer {

        /**
         * Creates a new TerrainUndergrowthType frostbite instance.
         */
        constructor();
        /**
         * Creates a new TerrainUndergrowthType frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TerrainUndergrowthType. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TerrainUndergrowthType type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TestCaseEntityData extends FB.EntityData {

        /**
         * Creates a new TestCaseEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TestCaseEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TestCaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TestCaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TestCaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TestCaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TestCaseEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeOut: number;
        testGroup: string;
        testCaseName: string;
        stable: boolean;
        enabled: boolean;

    }

    class TestPointEntityData extends FB.GameEntityData {

        /**
         * Creates a new TestPointEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TestPointEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TestPointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TestPointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TestPointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TestPointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TestPointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TestPointEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TestPointEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outputName: string;

    }

    class TextUnlockPartData extends VUShared.DataContainer {

        /**
         * Creates a new TextUnlockPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextUnlockPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextUnlockPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextUnlockPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shaderNodeName: string;
        meshBlueprint: FB.ObjectBlueprint | undefined;

    }

    export enum TextureAddress {
        TaWrap = 0,
        TaMirror = 1,
        TaClamp = 2,
        TaBorder = 4,
        TaMirrorOnce = 5,
    }
    class TextureArrayAsset extends FB.TextureAsset {

        /**
         * Creates a new TextureArrayAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureArrayAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TextureAsset to TextureArrayAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TextureAsset);
        /**
         * Casts an instance of type TextureBaseAsset to TextureArrayAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TextureBaseAsset);
        /**
         * Casts an instance of type Asset to TextureArrayAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TextureArrayAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureArrayAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TextureAsset extends FB.TextureBaseAsset {

        /**
         * Creates a new TextureAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TextureBaseAsset to TextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TextureBaseAsset);
        /**
         * Casts an instance of type Asset to TextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TextureAssetUnlockPartData extends VUShared.DataContainer {

        /**
         * Creates a new TextureAssetUnlockPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureAssetUnlockPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextureAssetUnlockPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureAssetUnlockPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

        texture: FB.TextureAsset | undefined;

    }

    class TextureAtlasAsset extends FB.Asset {

        /**
         * Creates a new TextureAtlasAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureAtlasAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TextureAtlasAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TextureAtlasAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureAtlasAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TextureBaseAsset extends FB.Asset {

        /**
         * Creates a new TextureBaseAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureBaseAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TextureBaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TextureBaseAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureBaseAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum TextureCompressQualityMode {
        TextureCompressQualityMode_Default = 0,
        TextureCompressQualityMode_Simple = 1,
        TextureCompressQualityMode_HighQuality = 2,
    }
    class TextureCompressSettings extends VUShared.DataContainer {

        /**
         * Creates a new TextureCompressSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureCompressSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextureCompressSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureCompressSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        viewMode: FB.TextureCompressQualityMode;
        textureCompressJobPoolSize: number;
        debugDrawAlphaOverlayScale: number;
        debugDrawEnable: boolean;

    }

    export enum TextureFilter {
        TfNone = 0,
        TfPoint = 1,
        TfLinear = 2,
        TfAnisotropic = 3,
        TfDefault = 4,
    }
    export enum TextureFormat {
        TextureFormat_DXT1 = 0,
        TextureFormat_DXT3 = 1,
        TextureFormat_DXT5 = 2,
        TextureFormat_DXT5A = 3,
        TextureFormat_DXN = 4,
        TextureFormat_RGB565 = 5,
        TextureFormat_RGB888 = 6,
        TextureFormat_ARGB1555 = 7,
        TextureFormat_ARGB4444 = 8,
        TextureFormat_ARGB8888 = 9,
        TextureFormat_L8 = 10,
        TextureFormat_L16 = 11,
        TextureFormat_ABGR16 = 12,
        TextureFormat_ABGR16F = 13,
        TextureFormat_ABGR32F = 14,
        TextureFormat_R16F = 15,
        TextureFormat_R32F = 16,
        TextureFormat_NormalDXN = 17,
        TextureFormat_NormalDXT1 = 18,
        TextureFormat_NormalDXT5 = 19,
        TextureFormat_NormalDXT5RGA = 20,
        TextureFormat_RG8 = 21,
        TextureFormat_GR16 = 22,
        TextureFormat_GR16F = 23,
        TextureFormat_D16 = 24,
        TextureFormat_D24S8 = 25,
        TextureFormat_D24FS8 = 26,
        TextureFormat_D32F = 27,
        TextureFormat_ABGR32 = 28,
        TextureFormat_GR32F = 29,
        TextureFormat_A2R10G10B10 = 30,
        TextureFormat_Unknown = 31,
    }
    class TextureGroup extends FB.Asset {

        /**
         * Creates a new TextureGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TextureGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TextureGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TextureReference extends FB.Asset {

        /**
         * Creates a new TextureReference frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureReference frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TextureReference. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TextureReference. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureReference type.
         */
        static typeInfo: VUShared.TypeInformation;

        texture: FB.TextureAsset | undefined;

    }

    class TextureSettings extends VUShared.DataContainer {

        /**
         * Creates a new TextureSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextureSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        skipMipmapCount: number;
        loadingEnabled: boolean;
        renderTexturesEnabled: boolean;

    }

    class TextureShaderParameter {

        /**
         * Creates a new TextureShaderParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureShaderParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TextureShaderParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

        parameterName: string;
        value: FB.TextureBaseAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TextureShaderParameter;

    }

    class TextureSliceUnlockPartData extends VUShared.DataContainer {

        /**
         * Creates a new TextureSliceUnlockPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureSliceUnlockPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextureSliceUnlockPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureSliceUnlockPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

        sliceIndex: number;

    }

    class TextureStreamingSettings extends VUShared.DataContainer {

        /**
         * Creates a new TextureStreamingSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureStreamingSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextureStreamingSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureStreamingSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        fadeMipmapTime: number;
        mipmapBias: number;
        maxTextureSizeKb: number;
        maxFrameTextureCreateCount: number;
        maxPendingLoadCount: number;
        minMipmapCount: number;
        maxMipmapCount: number;
        xenonFinalPoolSizeAdjustment: number;
        xenonRetailPoolSizeAdjustment: number;
        poolHeadroomSize: number;
        onDemandPoolSize: number;
        listViewPageIndex: number;
        poolSize: number;
        forceMipmap: number;
        priorityThreshold: number;
        defragFrameTransferLimit: number;
        minTextureSize: number;
        maxFrameTextureCreateSize: number;
        onlyWantedInPool: boolean;
        dxImmutableUsageEnable: boolean;
        mipmapsEnable: boolean;
        uploadMipmapsEnable: boolean;
        textureUpdateEnable: boolean;
        asyncCreatesEnable: boolean;
        loadMipmapsEnable: boolean;
        forceWantedEnable: boolean;
        updateEnable: boolean;
        poolEnable: boolean;
        defragEnable: boolean;
        defragTransfersEnable: boolean;
        chunkLoadEnable: boolean;
        instantUnloadingEnable: boolean;
        fadeMipmapsEnable: boolean;
        dynamicLoadingEnable: boolean;
        enable: boolean;
        drawStatsEnable: boolean;
        drawTextureGroupStatsEnable: boolean;
        drawTextureFormatStatsEnable: boolean;
        drawLoadingListEnable: boolean;
        drawPriorityListEnable: boolean;
        overridePoolSize: boolean;
        dumpLoadedList: boolean;
        useConditionalStreaming: boolean;

    }

    export enum TextureType {
        TextureType_2d = 0,
        TextureType_Cube = 1,
        TextureType_3d = 2,
        TextureType_2dArray = 3,
        TextureType_1dArray = 4,
        TextureType_1d = 5,
    }
    class TextureUnlockPartData extends VUShared.DataContainer {

        /**
         * Creates a new TextureUnlockPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TextureUnlockPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TextureUnlockPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TextureUnlockPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

        textureReference: FB.TextureReference | undefined;

    }

    class TicketCounterEntityData extends FB.GameEntityData {

        /**
         * Creates a new TicketCounterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TicketCounterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TicketCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TicketCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TicketCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TicketCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TicketCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TicketCounterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TicketCounterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        ticketPercentages: FB.TicketCountPercentage[];
        ticketLossPerMin: number;
        decreaseTickets: FB.TicketDecreaseType;
        teamId: FB.TeamId;
        ticketLossWhenLostAll: number;
        ticketLossWhenLostAllControlsPoint: number;
        initialTicketCount: number;
        ticketLossStart: number;
        setBestSquadSpawner: boolean;
        haltTicketLossOnEqualPointCount: boolean;
        resetCapturePointsOnReset: boolean;
        spawnAlwaysAllowed: boolean;

    }

    class TicketCountPercentage {

        /**
         * Creates a new TicketCountPercentage frostbite instance.
         */
        constructor();
        /**
         * Creates a new TicketCountPercentage frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TicketCountPercentage type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxPercentOfTicketsLeft: number;
        ticketLossPerMin: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TicketCountPercentage;

    }

    export enum TicketDecreaseType {
        TDTOnKilled = 0,
        TDTOnRespawned = 1,
        TDTNoDecreaseOnSoldierDeath = 2,
    }
    class TickEvent extends FB.MetricEvent {

        /**
         * Creates a new TickEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new TickEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricEvent to TickEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to TickEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TickEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        time: number;

    }

    export enum TimerMode {
        TimerMode_Repeating = 0,
        TimerMode_SingleShot = 1,
    }
    class TimerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new TimerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TimerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to TimerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to TimerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TimerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        start: FB.AudioGraphNodePort;
        stop: FB.AudioGraphNodePort;
        period: FB.AudioGraphNodePort;
        tick: FB.AudioGraphNodePort;
        progress: FB.AudioGraphNodePort;
        mode: FB.TimerMode;

    }

    class TimingConstantData extends FB.Asset {

        /**
         * Creates a new TimingConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TimingConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TimingConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TimingConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TimingConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        updateTimePerFrame: number;
        subsystemTimeParts: FB.SubsystemTimingConfigData;
        priorityClasses: FB.BotPriorityConfigData[];

    }

    class TimingViewCategories extends FB.Asset {

        /**
         * Creates a new TimingViewCategories frostbite instance.
         */
        constructor();
        /**
         * Creates a new TimingViewCategories frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TimingViewCategories. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TimingViewCategories. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TimingViewCategories type.
         */
        static typeInfo: VUShared.TypeInformation;

        timingCategories: FB.TimingViewCategory[];

    }

    class TimingViewCategory extends VUShared.DataContainer {

        /**
         * Creates a new TimingViewCategory frostbite instance.
         */
        constructor();
        /**
         * Creates a new TimingViewCategory frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TimingViewCategory. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TimingViewCategory type.
         */
        static typeInfo: VUShared.TypeInformation;

        categoryName: string;
        keywords: string[];
        spuBudget: number;
        cpuBudget: number;
        gpuBudget: number;

    }

    class TimingViewSettings extends VUShared.DataContainer {

        /**
         * Creates a new TimingViewSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new TimingViewSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TimingViewSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TimingViewSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxFrameEventCount: number;
        frameCount: number;
        frameDelayCount: number;
        timeRange: number;
        timeOffset: number;
        autolockThreshold: number;
        autolockNameFilter: string;
        legendScreenOffset: number;
        legendColumnWidth: number;
        legendDisplayMode: number;
        averageFrameCount: number;
        maxGpuLegendColumnCount: number;
        snoopEventName: string;
        gpuBarFrameOffset: number;
        maxCpuLegendColumnCount: number;
        barPad: number;
        maxSpuLegendColumnCount: number;
        barSyncProcessor: number;
        barMinTime: number;
        barHeight: number;
        filterEventName: string;
        snoopOnly: boolean;
        drawEnable: boolean;
        drawSpuLegendEnable: boolean;
        snoopEnable: boolean;
        filterEnable: boolean;
        drawBarsEnable: boolean;
        drawLegendEnable: boolean;
        drawOnlySummaryEnable: boolean;
        sortByTime: boolean;
        drawCpuLegendEnable: boolean;
        drawGpuLegendEnable: boolean;
        enable: boolean;

    }

    export enum TinyEvent {
        TinyEvent_AckTimeSyncDone = 1,
        TinyEvent_AckLevelLinked = 2,
        TinyEvent_AckLevelRestarted = 3,
        TinyEvent_AckEnterPatchRecvState = 4,
        TinyEvent_AckAuthentication = 5,
        TinyEvent_NackAuthentication = 6,
        TinyEvent_AckExitLevel = 7,
        TinyEvent_CmdLinkLevel = 8,
        TinyEvent_CmdEnterPatchRecvState = 9,
        TinyEvent_CmdExitLevel = 10,
        TinyEvent_CmdContinueLevel = 11,
    }
    class TonemapComponentData extends FB.ComponentData {

        /**
         * Creates a new TonemapComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TonemapComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to TonemapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to TonemapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TonemapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TonemapComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TonemapComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bloomScale: VUShared.Vec3;
        realm: FB.Realm;
        tonemapMethod: FB.TonemapMethod;
        minExposure: number;
        middleGray: number;
        exposureAdjustTime: number;
        maxExposure: number;
        chromostereopsisOffset: number;
        chromostereopsisScale: number;
        chromostereopsisEnable: boolean;

    }

    export enum TonemapMethod {
        TonemapMethod_Linear = 0,
        TonemapMethod_Filmic = 1,
        TonemapMethod_FilmicNeutral = 2,
        TonemapMethod_None = 3,
        TonemapMethodCount = 3,
    }
    class ToolData extends VUShared.DataContainer {

        /**
         * Creates a new ToolData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ToolData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ToolData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ToolData type.
         */
        static typeInfo: VUShared.TypeInformation;

        isAlwaysActive: boolean;

    }

    export enum ToolTipType {
        AimAtTeamMateToolTip = 1,
        AimAtEnemyToolTip = 2,
    }
    class TopPlayersEntityData extends FB.EntityData {

        /**
         * Creates a new TopPlayersEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TopPlayersEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TopPlayersEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TopPlayersEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TopPlayersEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TopPlayersEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TopPlayersEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class ToWorldSpaceTransformEntityData extends FB.EntityData {

        /**
         * Creates a new ToWorldSpaceTransformEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ToWorldSpaceTransformEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to ToWorldSpaceTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to ToWorldSpaceTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to ToWorldSpaceTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to ToWorldSpaceTransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ToWorldSpaceTransformEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in1: VUShared.LinearTransform;
        realm: FB.Realm;

    }

    class TrackComponentData extends FB.MeshComponentData {

        /**
         * Creates a new TrackComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TrackComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MeshComponentData to TrackComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MeshComponentData);
        /**
         * Casts an instance of type ComponentData to TrackComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to TrackComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TrackComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TrackComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TrackComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scrollFactor: number;

    }

    class TrackPlayerEntityData extends FB.GameEntityData {

        /**
         * Creates a new TrackPlayerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TrackPlayerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TrackPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TrackPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TrackPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TrackPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TrackPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TrackPlayerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TrackPlayerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        snapHeightOffsetY: number;
        randomizeTracker: boolean;
        snapHeightOnKilledDestroyed: boolean;
        checkPlayerAlive: boolean;
        enforceSharedCombatArea: boolean;
        updateFlagComponent: boolean;
        trackMultiplePlayers: boolean;
        reseted: boolean;

    }

    class TrackWheelComponentData extends FB.WheelComponentData {

        /**
         * Creates a new TrackWheelComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TrackWheelComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WheelComponentData to TrackWheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WheelComponentData);
        /**
         * Casts an instance of type PartComponentData to TrackWheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to TrackWheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to TrackWheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TrackWheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TrackWheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TrackWheelComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        boneName: string;

    }

    class TrajectoryEntityData extends FB.EntityData {

        /**
         * Creates a new TrajectoryEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TrajectoryEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TrajectoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TrajectoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TrajectoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TrajectoryEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TrajectoryEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outTransform: VUShared.LinearTransform;

    }

    class TransformBlendEntityData extends FB.EntityData {

        /**
         * Creates a new TransformBlendEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformBlendEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformBlendEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformBlendEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformBlendEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformBlendEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformBlendEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in2: VUShared.LinearTransform;
        in1: VUShared.LinearTransform;
        blendValue: number;
        blendValue2: number;
        realm: FB.Realm;

    }

    class TransformEntityData extends FB.EntityData {

        /**
         * Creates a new TransformEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultTransform: VUShared.LinearTransform;
        realm: FB.Realm;

    }

    class TransformHubEntityData extends FB.EntityData {

        /**
         * Creates a new TransformHubEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformHubEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformHubEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformHubEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in4: VUShared.LinearTransform;
        in1: VUShared.LinearTransform;
        in2: VUShared.LinearTransform;
        in3: VUShared.LinearTransform;
        in8: VUShared.LinearTransform;
        in5: VUShared.LinearTransform;
        in6: VUShared.LinearTransform;
        in7: VUShared.LinearTransform;
        realm: FB.Realm;

    }

    class TransformModifierEntityData extends FB.EntityData {

        /**
         * Creates a new TransformModifierEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformModifierEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformModifierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformModifierEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: VUShared.LinearTransform;
        realm: FB.Realm;
        left: FB.ModifierAxis;
        up: FB.ModifierAxis;
        forward: FB.ModifierAxis;
        invertLeft: boolean;
        invertUp: boolean;
        invertForward: boolean;

    }

    class TransformMultiplierEntityData extends FB.EntityData {

        /**
         * Creates a new TransformMultiplierEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformMultiplierEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformMultiplierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformMultiplierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformMultiplierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformMultiplierEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformMultiplierEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in1: VUShared.LinearTransform;
        in2: VUShared.LinearTransform;
        realm: FB.Realm;

    }

    export enum TransformPart {
        TransformPart_TranslationX = 0,
        TransformPart_TranslationY = 1,
        TransformPart_TranslationZ = 2,
        TransformPart_RotationX = 3,
        TransformPart_RotationY = 4,
        TransformPart_RotationZ = 5,
    }
    class TransformPartPropertyTrackData extends FB.PropertyTrackData {

        /**
         * Creates a new TransformPartPropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformPartPropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyTrackData to TransformPartPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to TransformPartPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformPartPropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transformPart: FB.TransformPart;
        preInfinity: FB.CurveInfinityType;
        postInfinity: FB.CurveInfinityType;
        keyStartIndex: number;
        resourceName: string;
        keyCount: number;
        weighted: boolean;
        isStatic: boolean;

    }

    class TransformPropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new TransformPropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformPropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to TransformPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to TransformPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to TransformPropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformPropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.LinearTransform[];

    }

    class TransformSelectorEntityData extends FB.EntityData {

        /**
         * Creates a new TransformSelectorEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformSelectorEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformSelectorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformSelectorEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        in1: VUShared.LinearTransform;
        in2: VUShared.LinearTransform;
        realm: FB.Realm;
        selection: boolean;

    }

    class TransformSnapToGroundEntityData extends FB.EntityData {

        /**
         * Creates a new TransformSnapToGroundEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformSnapToGroundEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformSnapToGroundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformSnapToGroundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformSnapToGroundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformSnapToGroundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformSnapToGroundEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: VUShared.LinearTransform;
        realm: FB.Realm;
        distanceToGround: number;
        rayCastLength: number;
        rayCastUpOffset: number;
        alignWithGroundNormal: boolean;

    }

    class TransformSplitterEntityData extends FB.EntityData {

        /**
         * Creates a new TransformSplitterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TransformSplitterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to TransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TransformSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TransformSplitterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        realm: FB.Realm;

    }

    class TreeBase extends FB.Asset {

        /**
         * Creates a new TreeBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new TreeBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TreeBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TreeBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TreeBase type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TreeNodeBase extends VUShared.DataContainer {

        /**
         * Creates a new TreeNodeBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new TreeNodeBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TreeNodeBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TreeNodeBase type.
         */
        static typeInfo: VUShared.TypeInformation;

        nodeName: string;

    }

    class TriggerEntityData extends FB.GameEntityData {

        /**
         * Creates a new TriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to TriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        delay: number;
        runOnce: boolean;

    }

    class TriggerEventEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new TriggerEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TriggerEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to TriggerEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TriggerEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class TurbulanceData extends FB.ProcessorData {

        /**
         * Creates a new TurbulanceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TurbulanceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to TurbulanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to TurbulanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to TurbulanceData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TurbulanceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        intensity: number;

    }

    class TurnEffectData {

        /**
         * Creates a new TurnEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TurnEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TurnEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxRollAngle: number;
        maxPitchAngle: number;
        yawVelocityThreshhold: number;
        velocityThreshhold: number;
        safeTime: number;
        beginTime: number;
        holdTime: number;
        endTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TurnEffectData;

    }

    class TurretControlConstantData extends FB.Asset {

        /**
         * Creates a new TurretControlConstantData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TurretControlConstantData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to TurretControlConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to TurretControlConstantData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TurretControlConstantData type.
         */
        static typeInfo: VUShared.TypeInformation;

        searchLookSpeed: number;
        slowLookSpeed: number;
        normalLookSpeed: number;
        fastLookSpeed: number;

    }

    class TurretData extends VUShared.DataContainer {

        /**
         * Creates a new TurretData frostbite instance.
         */
        constructor();
        /**
         * Creates a new TurretData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to TurretData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the TurretData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pitchP: number;
        yawP: number;
        fakeShootSpaceMinDistance: number;
        fakeShootSpaceMaxDistance: number;
        aimingConstraints: FB.AIAimingConstraintsData | undefined;

    }

    class TurretRotationInfo {

        /**
         * Creates a new TurretRotationInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new TurretRotationInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the TurretRotationInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        rotationAxis: FB.RotationAxis;
        channel: FB.RotationChannel;
        maxRotation: number;
        minRotation: number;
        phaseOffset: number;
        normalizeRotation: boolean;
        invertRotation: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.TurretRotationInfo;

    }

    class UavCameraData extends FB.TargetCameraData {

        /**
         * Creates a new UavCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UavCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TargetCameraData to UavCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetCameraData);
        /**
         * Casts an instance of type CameraData to UavCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to UavCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UavCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UavCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UavCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        viewDistance: number;
        viewDistanceCurve: FB.CameraSineCurveData[];
        viewAngle: number;
        viewAngleCurve: FB.CameraSineCurveData[];
        rotationSpeed: number;
        rotationSpeedCurve: FB.CameraSineCurveData[];
        zoomFov: number;
        zoomDelay: number;
        zoomTransitionTime: number;
        fov: number;
        focusPoint: FB.UavCameraPointData;
        centerPoint: FB.UavCameraPointData;
        upWeightDistance: number;

    }

    class UavCameraPointData {

        /**
         * Creates a new UavCameraPointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UavCameraPointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UavCameraPointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minTime: number;
        maxTime: number;
        speed: number;
        accelerationTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UavCameraPointData;

    }

    class UI3dIconCompData extends FB.UIComponentData {

        /**
         * Creates a new UI3dIconCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UI3dIconCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UI3dIconCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UI3dIconCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UI3dIconCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UI3dIconCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pixelOffset: VUShared.Vec2;
        iconSize: number;
        maxFarFade: number;
        maxCloseFade: number;
        snapSafeZone: number;
        snapCenterYOffset: number;
        shrinkSnapAnimationTime: number;
        trackerHudRadiusX: number;
        trackerHudRadiusY: number;
        maxLookAtThreshold: number;
        minLookAtThreshold: number;
        minLookAtThresholdDistance: number;
        drawDistance: number;
        fadeDistance: number;
        fadeEndDistance: number;
        minimumDrawDistance: number;
        minimumFadeDistance: number;
        maxTagUpdatesPerFrame: number;
        verticalOffset: number;
        showLabelRange: number;
        teamRadioDistance: number;
        scaleDistance: number;
        maxScaleMod: number;
        maxXRotation: number;
        maxYRotation: number;
        horisontalOffset: number;
        showSupportAmmoThreshold: number;
        verticalOffsetMaxOffset: number;
        verticalOffsetScaleFactor: number;
        showEngineerArmorThreshold: number;
        showMedicHealthThreshold: number;
        snapIcons: boolean;
        circularSnap: boolean;
        onlyShowSnapped: boolean;

    }

    export enum UI3dIconQuery {
        UI3dIconQuery_Active3dIconsData = 0,
    }
    class UI3dLaserTagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UI3dLaserTagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UI3dLaserTagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UI3dLaserTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UI3dLaserTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UI3dLaserTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UI3dLaserTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UI3dLaserTagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIActionData extends FB.Asset {

        /**
         * Creates a new UIActionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIActionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIActionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIActionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        actionKeys: string[];

    }

    class UIAlerttagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UIAlerttagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAlerttagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UIAlerttagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UIAlerttagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIAlerttagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAlerttagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAlerttagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIAnimatedTextureAsset extends FB.Asset {

        /**
         * Creates a new UIAnimatedTextureAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAnimatedTextureAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIAnimatedTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAnimatedTextureAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAnimatedTextureAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        frameRate: number;
        textureAtlas: FB.TextureAsset | undefined;
        textureInfos: FB.UITextureAtlasInfo[];

    }

    class UIAsset extends FB.Asset {

        /**
         * Creates a new UIAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIAssignmentsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIAssignmentsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAssignmentsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIAssignmentsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIAssignmentsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAssignmentsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAssignmentsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIAudioEventAsset extends FB.Asset {

        /**
         * Creates a new UIAudioEventAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAudioEventAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIAudioEventAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAudioEventAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAudioEventAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        audioEventMappings: FB.UIAudioEventMapping[];

    }

    class UIAudioEventMapping {

        /**
         * Creates a new UIAudioEventMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAudioEventMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIAudioEventMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        eventName: string;
        soundAsset: FB.SoundAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIAudioEventMapping;

    }

    class UIAwardDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIAwardDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAwardDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIAwardDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIAwardDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAwardDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        ignoreBuild: boolean;

    }

    class UIAwardsScreenCompData extends FB.UIComponentData {

        /**
         * Creates a new UIAwardsScreenCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAwardsScreenCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIAwardsScreenCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIAwardsScreenCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAwardsScreenCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAwardsScreenCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        trackableAwardRow: FB.StatsCategoryBaseData[];
        trackableAwardCol: FB.StatsCategoryBaseData[];

    }

    class UIAwardsTrackingCompData extends FB.UIComponentData {

        /**
         * Creates a new UIAwardsTrackingCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIAwardsTrackingCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIAwardsTrackingCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIAwardsTrackingCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIAwardsTrackingCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIAwardsTrackingCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIBarDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIBarDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIBarDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIBarDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIBarDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIBarDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        visibility: FB.UIDataSourceInfo;
        value: FB.UIDataSourceInfo;
        color: FB.UIDataSourceInfo;
        refresh: boolean;

    }

    class UIBattleLogCompData extends FB.UIComponentData {

        /**
         * Creates a new UIBattleLogCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIBattleLogCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIBattleLogCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIBattleLogCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIBattleLogCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIBattleLogCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIBundleAssetState {

        /**
         * Creates a new UIBundleAssetState frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIBundleAssetState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIBundleAssetState type.
         */
        static typeInfo: VUShared.TypeInformation;

        stateName: string;
        uiState: FB.UIState;
        resourceBundleName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIBundleAssetState;

    }

    class UIBundlesAsset extends FB.Asset {

        /**
         * Creates a new UIBundlesAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIBundlesAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIBundlesAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIBundlesAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIBundlesAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        uiBundleAssetStateList: FB.UIBundleAssetState[];

    }

    class UIButton {

        /**
         * Creates a new UIButton frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIButton frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIButton type.
         */
        static typeInfo: VUShared.TypeInformation;

        buttonLabel: string;
        buttonId: string;
        isPremium: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIButton;

    }

    class UIButtonDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIButtonDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIButtonDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIButtonDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIButtonDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIButtonDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        buttonsDatasource: FB.UIDataSourceInfo;
        defaultButtonSet: FB.UIButtonSet;
        visibility: FB.UIDataSourceInfo;
        invertVisible: boolean;
        visible: boolean;
        inputOnRelease: boolean;

    }

    class UIButtonSet {

        /**
         * Creates a new UIButtonSet frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIButtonSet frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIButtonSet type.
         */
        static typeInfo: VUShared.TypeInformation;

        buttons: FB.UIButton[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIButtonSet;

    }

    class UICameraCompData extends FB.UIComponentData {

        /**
         * Creates a new UICameraCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICameraCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICameraCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICameraCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICameraCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICameraCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UICampaignCompData extends FB.UIComponentData {

        /**
         * Creates a new UICampaignCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICampaignCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICampaignCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICampaignCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICampaignCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICampaignCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UICapturepointCompData extends FB.UIComponentData {

        /**
         * Creates a new UICapturepointCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICapturepointCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICapturepointCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICapturepointCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICapturepointCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICapturepointCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UICapturepointtagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UICapturepointtagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICapturepointtagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UICapturepointtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UICapturepointtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICapturepointtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICapturepointtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICapturepointtagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIChatCompData extends FB.UIComponentData {

        /**
         * Creates a new UIChatCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIChatCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIChatCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIChatCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIChatCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIChatCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        settings: FB.ChatSettings | undefined;

    }

    class UIColor extends VUShared.DataContainer {

        /**
         * Creates a new UIColor frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIColor frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UIColor. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIColor type.
         */
        static typeInfo: VUShared.TypeInformation;

        color: VUShared.Vec4;
        colorType: FB.UIColorType;

    }

    class UIColorTemplate extends FB.Asset {

        /**
         * Creates a new UIColorTemplate frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIColorTemplate frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIColorTemplate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIColorTemplate. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIColorTemplate type.
         */
        static typeInfo: VUShared.TypeInformation;

        colors: FB.UIColor[];
        active: boolean;

    }

    export enum UIColorType {
        UIColorType_Unselected = 0,
        UIColorType_Selected = 1,
        UIColorType_SelectInside = 2,
        UIColorType_UnselectedInside = 3,
        UIColorType_Locked = 4,
        UIColorType_IconBg = 5,
        UIColorType_FrameSoft = 6,
        UIColorType_FrameHard = 7,
        UIColorType_HudYellow = 8,
        UIColorType_CriticalColor = 9,
        UIColorType_Friendly = 10,
        UIColorType_Enemy = 11,
        UIColorType_SquadColor = 12,
        UIColorType_NormalTextColor = 13,
        UIColorType_HeaderTextColor = 14,
        UIColorType_StaticHUDColor = 15,
        UIColorType_DynamicHUDColor = 16,
        UIColorType_MouseOver = 17,
        UIColorType_MouseOut = 18,
    }
    class UICombatAreaAsset extends FB.Asset {

        /**
         * Creates a new UICombatAreaAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICombatAreaAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UICombatAreaAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICombatAreaAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICombatAreaAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        prefix: string;

    }

    class UICombatAreaCompData extends FB.UIComponentData {

        /**
         * Creates a new UICombatAreaCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICombatAreaCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICombatAreaCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICombatAreaCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICombatAreaCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICombatAreaCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outOfAreaSidPrefix: string;

    }

    class UICombatAreaEntityData extends FB.GameObjectData {

        /**
         * Creates a new UICombatAreaEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICombatAreaEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameObjectData to UICombatAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UICombatAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UICombatAreaEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICombatAreaEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        asset: FB.UICombatAreaAsset | undefined;

    }

    class UICompassDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UICompassDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICompassDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UICompassDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UICompassDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICompassDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        heading: FB.UIDataSourceInfo;
        objectives: FB.UIDataSourceInfo;
        visibility: FB.UIDataSourceInfo;
        showAirRadar: FB.UIDataSourceInfo;
        radarSweepDegree: FB.UIDataSourceInfo;

    }

    class UIComponentData extends FB.Asset {

        /**
         * Creates a new UIComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        shortName: string;
        dataSources: string[];
        updateType: FB.UIUpdateType;
        updatesPerSecond: number;

    }

    class UIConnectionCompData extends FB.UIComponentData {

        /**
         * Creates a new UIConnectionCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIConnectionCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIConnectionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIConnectionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIConnectionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIConnectionCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIConsoleKeyboardStatus {
        UIConsoleKeyboardStatus_Success = 0,
        UIConsoleKeyboardStatus_Failed = 1,
        UIConsoleKeyboardStatus_Cancelled = 2,
        UIConsoleKeyboardStatus_Active = 3,
        UIConsoleKeyboardStatus_Inactive = 4,
        UIConsoleKeyboardStatus_Count = 5,
    }
    export enum UIConstants {
        UIConstants_MaxCaptureAreas = 16,
    }
    class UICoopCompData extends FB.UIComponentData {

        /**
         * Creates a new UICoopCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICoopCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICoopCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UICoopEndOfRoundCompData extends FB.UIComponentData {

        /**
         * Creates a new UICoopEndOfRoundCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICoopEndOfRoundCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICoopEndOfRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICoopEndOfRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICoopEndOfRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICoopEndOfRoundCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UICoopLevelDescription extends FB.LevelDescriptionComponent {

        /**
         * Creates a new UICoopLevelDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICoopLevelDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to UICoopLevelDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to UICoopLevelDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICoopLevelDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        debriefing: string;
        devTime: number;
        unlockedByLevels: string[];

    }

    class UICreditsAsset extends FB.Asset {

        /**
         * Creates a new UICreditsAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICreditsAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UICreditsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICreditsAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICreditsAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        pages: FB.UICreditsPage[];

    }

    class UICreditsCompData extends FB.UIComponentData {

        /**
         * Creates a new UICreditsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICreditsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICreditsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICreditsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICreditsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICreditsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UICreditsLine {

        /**
         * Creates a new UICreditsLine frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICreditsLine frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UICreditsLine type.
         */
        static typeInfo: VUShared.TypeInformation;

        textType: FB.UICreditsTextType;
        text: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UICreditsLine;

    }

    class UICreditsPage {

        /**
         * Creates a new UICreditsPage frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICreditsPage frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UICreditsPage type.
         */
        static typeInfo: VUShared.TypeInformation;

        header1: string;
        header2: string;
        lines: FB.UICreditsLine[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UICreditsPage;

    }

    export enum UICreditsTextType {
        SingleLine = 0,
        MultiLine = 1,
    }
    class UICrosshairDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UICrosshairDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICrosshairDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UICrosshairDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UICrosshairDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICrosshairDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        dispersion: FB.UIDataSourceInfo;
        zoomed: FB.UIDataSourceInfo;
        visibility: FB.UIDataSourceInfo;
        dispersionBaseOffset: number;

    }

    class UICustomizationCompData extends FB.UIComponentData {

        /**
         * Creates a new UICustomizationCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UICustomizationCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UICustomizationCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UICustomizationCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UICustomizationCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UICustomizationCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        soldierOffset: VUShared.Vec3;
        soldierRotation: VUShared.Vec3;
        vehicleRotation: VUShared.Vec3;
        networkThrottleTimer: number;

    }

    class UIDamageIndicatorCompData extends FB.UIComponentData {

        /**
         * Creates a new UIDamageIndicatorCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDamageIndicatorCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIDamageIndicatorCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIDamageIndicatorCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDamageIndicatorCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDamageIndicatorCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxUpdateTime: number;

    }

    class UIDataBinding extends VUShared.DataContainer {

        /**
         * Creates a new UIDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UIDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIDataInterfaceCompData extends FB.UIComponentData {

        /**
         * Creates a new UIDataInterfaceCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDataInterfaceCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIDataInterfaceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIDataInterfaceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDataInterfaceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDataInterfaceCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIDataSourceInfo {

        /**
         * Creates a new UIDataSourceInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDataSourceInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIDataSourceInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        dataName: string;
        dataCategory: FB.UIComponentData | undefined;
        dataKey: number;
        useDirectAccess: boolean;
        updateOnInitialize: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIDataSourceInfo;

    }

    class UIDelayedCommandsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIDelayedCommandsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDelayedCommandsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIDelayedCommandsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIDelayedCommandsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDelayedCommandsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDelayedCommandsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIDetailedServerInfoCompData extends FB.UIComponentData {

        /**
         * Creates a new UIDetailedServerInfoCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDetailedServerInfoCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIDetailedServerInfoCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIDetailedServerInfoCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDetailedServerInfoCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDetailedServerInfoCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        settings: FB.ServerInfoSetting[];

    }

    class UIDirectAccessCompData extends FB.UIComponentData {

        /**
         * Creates a new UIDirectAccessCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDirectAccessCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIDirectAccessCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIDirectAccessCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDirectAccessCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDirectAccessCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIDistanceFieldAsset extends FB.Asset {

        /**
         * Creates a new UIDistanceFieldAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDistanceFieldAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIDistanceFieldAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDistanceFieldAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDistanceFieldAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        distanceFieldTexture: FB.TextureAsset | undefined;

    }

    class UIDogTagDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIDogTagDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDogTagDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIDogTagDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIDogTagDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDogTagDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        ignoreBuild: boolean;

    }

    class UIDynamicDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIDynamicDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDynamicDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIDynamicDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIDynamicDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDynamicDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        bindings: FB.UIDataSourceInfo[];
        refresh: boolean;

    }

    class UIDynamicTextureCompData extends FB.UIComponentData {

        /**
         * Creates a new UIDynamicTextureCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIDynamicTextureCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIDynamicTextureCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIDynamicTextureCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIDynamicTextureCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIDynamicTextureCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIEndOfRoundCompData extends FB.UIComponentData {

        /**
         * Creates a new UIEndOfRoundCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIEndOfRoundCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIEndOfRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIEndOfRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIEndOfRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIEndOfRoundCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIEndOfRoundEntityData extends FB.GameEntityData {

        /**
         * Creates a new UIEndOfRoundEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIEndOfRoundEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to UIEndOfRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to UIEndOfRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to UIEndOfRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to UIEndOfRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UIEndOfRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UIEndOfRoundEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIEndOfRoundEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        preEorTime: number;
        eorTime: number;

    }

    class UIEventAsset extends FB.Asset {

        /**
         * Creates a new UIEventAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIEventAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIEventAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIEventAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIEventAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        category: string;
        eventList: string[];

    }

    class UIFlagCounterCompData extends FB.UIComponentData {

        /**
         * Creates a new UIFlagCounterCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIFlagCounterCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIFlagCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIFlagCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIFlagCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIFlagCounterCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIFontAsset extends FB.Asset {

        /**
         * Creates a new UIFontAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIFontAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIFontAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIFontAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIFontAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        sourceFile: string;
        textDatabase: FB.UITextDatabase | undefined;
        scaleformFontName: string[];
        numericsOnly: boolean;
        completeKorean: boolean;
        completeJapanese: boolean;
        completeTraditionalChinese: boolean;

    }

    class UIFontCollection extends FB.Asset {

        /**
         * Creates a new UIFontCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIFontCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIFontCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIFontCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIFontCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        language: FB.LanguageFormat;
        textDatabase: FB.UITextDatabase | undefined;
        fonts: FB.UIFontAsset[];
        bundleKind: FB.ResourceBundleKind;

    }

    class UIFontMapping {

        /**
         * Creates a new UIFontMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIFontMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIFontMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        scaleformFontName: string[];
        fontLongName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIFontMapping;

    }

    class UIFontMappingCollection extends FB.Asset {

        /**
         * Creates a new UIFontMappingCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIFontMappingCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIFontMappingCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIFontMappingCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIFontMappingCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        fonts: FB.UIFontMapping[];
        textDatabase: FB.UITextDatabase[];

    }

    class UIFriendsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIFriendsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIFriendsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIFriendsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIFriendsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIFriendsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIFriendsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIGameModeDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIGameModeDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGameModeDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIGameModeDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIGameModeDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGameModeDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        name: string;
        abbreviation: string;
        desc: string;
        battlelogId: number;
        texturePath: string;
        variations: FB.GameModeVariation[];

    }

    class UIGameQueueCompData extends FB.UIComponentData {

        /**
         * Creates a new UIGameQueueCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGameQueueCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIGameQueueCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIGameQueueCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIGameQueueCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGameQueueCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIGeneralCompData extends FB.UIComponentData {

        /**
         * Creates a new UIGeneralCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGeneralCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIGeneralCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIGeneralCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIGeneralCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGeneralCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIGenericItemDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIGenericItemDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGenericItemDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIGenericItemDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIGenericItemDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGenericItemDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        imagePath: string;

    }

    class UIGeoLatitude {

        /**
         * Creates a new UIGeoLatitude frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGeoLatitude frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIGeoLatitude type.
         */
        static typeInfo: VUShared.TypeInformation;

        degrees: number;
        minuites: number;
        seconds: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIGeoLatitude;

    }

    class UIGeoLongitude {

        /**
         * Creates a new UIGeoLongitude frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGeoLongitude frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIGeoLongitude type.
         */
        static typeInfo: VUShared.TypeInformation;

        degrees: number;
        minuites: number;
        seconds: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIGeoLongitude;

    }

    class UIGPSPosition {

        /**
         * Creates a new UIGPSPosition frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGPSPosition frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIGPSPosition type.
         */
        static typeInfo: VUShared.TypeInformation;

        latitude: number;
        longitude: number;
        seaLevelOffset: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIGPSPosition;

    }

    class UIGraphAsset extends FB.Asset {

        /**
         * Creates a new UIGraphAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGraphAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIGraphAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIGraphAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGraphAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        nodes: FB.UINodeData[];
        globalNode: FB.GlobalNode | undefined;
        connections: FB.UINodeConnection[];
        audioEventMappings: FB.UIAudioEventAsset | undefined;
        bundleAssetName: string;
        eventList: FB.UIEventAsset[];
        modal: boolean;
        protectScreens: boolean;
        isWin32UIGraphAsset: boolean;
        isXenonUIGraphAsset: boolean;
        isPs3UIGraphAsset: boolean;

    }

    class UIGraphEntityData extends FB.EntityData {

        /**
         * Creates a new UIGraphEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGraphEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to UIGraphEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to UIGraphEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UIGraphEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UIGraphEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGraphEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        events: FB.EventSpec[];
        graphAsset: FB.UIGraphAsset | undefined;
        graphPriority: FB.UIGraphPriority;
        state: FB.UIState;
        popPreviousGraph: boolean;

    }

    class UIGraphPipelineSettings extends VUShared.DataContainer {

        /**
         * Creates a new UIGraphPipelineSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGraphPipelineSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UIGraphPipelineSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGraphPipelineSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        oneBundlePerGraph: boolean;

    }

    export enum UIGraphPriority {
        UIGraphPriority_Low = 0,
        UIGraphPriority_Normal = 1,
        UIGraphPriority_High = 2,
        UIGraphPriority_OverlayScreens = 3,
        UIGraphPriority_Critical = 4,
    }
    class UIGunMasterCompData extends FB.UIComponentData {

        /**
         * Creates a new UIGunMasterCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIGunMasterCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIGunMasterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIGunMasterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIGunMasterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIGunMasterCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIHardcoreCompData extends FB.UIComponentData {

        /**
         * Creates a new UIHardcoreCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIHardcoreCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIHardcoreCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIHardcoreCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIHardcoreCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIHardcoreCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIHudIcon {
        UIHudIcon_Unused = 0,
        UIHudIcon_LocalPlayer = 1,
        UIHudIcon_LocalDirection = 2,
        UIHudIcon_FriendlyPlayer = 3,
        UIHudIcon_EnemyPlayer = 4,
        UIHudIcon_NeutralPlayer = 5,
        UIHudIcon_SquadMember = 6,
        UIHudIcon_SquadLeader = 7,
        UIHudIcon_SquadLeaderTargeted = 8,
        UIHudIcon_Vehicle = 9,
        UIHudIcon_PrimaryObjective = 10,
        UIHudIcon_PrimaryObjectiveBlink = 11,
        UIHudIcon_SecondaryObjective = 12,
        UIHudIcon_AreaMapMarker = 13,
        UIHudIcon_ObjectiveDestroy = 14,
        UIHudIcon_ObjectiveScout = 15,
        UIHudIcon_ObjectiveDefend = 16,
        UIHudIcon_ObjectiveMoveTo = 17,
        UIHudIcon_ObjectiveAttack = 18,
        UIHudIcon_ObjectiveFollow = 19,
        UIHudIcon_ObjectiveGeneral = 20,
        UIHudICon_UAV = 21,
        UIHudIcon_AmmoCrate = 22,
        UIHudIcon_MedicBag = 23,
        UIHudIcon_C4 = 24,
        UIHudIcon_ATMine = 25,
        UIHudIcon_StationaryWeapon = 26,
        UIHudIcon_North = 27,
        UIHudIcon_South = 28,
        UIHudIcon_West = 29,
        UIHudIcon_East = 30,
        UIHudIcon_NeutralFlag = 31,
        UIHudIcon_FriendlyFlag = 32,
        UIHudIcon_EnemyFlag = 33,
        UIHudIcon_FriendlyBase = 34,
        UIHudIcon_EnemyBase = 35,
        UIHudIcon_Team1Flag = 36,
        UIHudIcon_Team2Flag = 37,
        UIHudIcon_NeutralFlagLit = 38,
        UIHudIcon_FriendlyFlagLit = 39,
        UIHudIcon_EnemyFlagLit = 40,
        UIHudIcon_SelectableSpawnPoint = 41,
        UIHudIcon_SelectedSpawnPoint = 42,
        UIHudIcon_NonSelectableSpawnPoint = 43,
        UIHudIcon_FriendlyFlagUnderAttack = 44,
        UIHudIcon_EnemyFlagUnderAttack = 45,
        UIHudIcon_OrderAttack = 46,
        UIHudIcon_OrderDefend = 47,
        UIHudIcon_OrderAttackObserved = 48,
        UIHudIcon_OrderDefendObserved = 49,
        UIHudIcon_Boat = 50,
        UIHudIcon_Car = 51,
        UIHudIcon_Jeep = 52,
        UIHudIcon_HeliAttack = 53,
        UIHudIcon_HeliScout = 54,
        UIHudIcon_Tank = 55,
        UIHudIcon_TankIFV = 56,
        UIHudIcon_TankArty = 57,
        UIHudIcon_TankAA = 58,
        UIHudIcon_TankAT = 59,
        UIHudIcon_Jet = 60,
        UIHudIcon_JetBomber = 61,
        UIHudIcon_Stationary = 62,
        UIHudIcon_Strategic = 63,
        UIHudIcon_MotionRadarSweep = 64,
        UIHudIcon_NeedBackup = 65,
        UIHudIcon_NeedAmmo = 66,
        UIHudIcon_NeedMedic = 67,
        UIHudIcon_NeedPickup = 68,
        UIHudIcon_NeedRepair = 69,
        UIHudIcon_KitAssault = 70,
        UIHudIcon_KitDemolition = 71,
        UIHudIcon_KitRecon = 72,
        UIHudIcon_KitSpecialist = 73,
        UIHudIcon_KitSupport = 74,
        UIHudIcon_KitMedic = 75,
        UIHudIcon_KitEngineer = 76,
        UIHudIcon_KitPickupAssault = 77,
        UIHudIcon_KitPickupDemolition = 78,
        UIHudIcon_KitPickupRecon = 79,
        UIHudIcon_KitPickupSpecialist = 80,
        UIHudIcon_KitPickupSupport = 81,
        UIHudIcon_KitPickupMedic = 82,
        UIHudIcon_KitPickupEngineer = 83,
        UIHudIcon_Pickup = 84,
        UIHudIcon_TaggedVehicle = 85,
        UIHudIcon_LaserPaintedVehicle = 86,
        UIHudIcon_HeliTargetEnemy = 87,
        UIHudIcon_HeliTargetFriendly = 88,
        UIHudIcon_ArtilleryTarget = 89,
        UIHudIcon_NeutralFlagAttacker = 90,
        UIHudIcon_FriendlyFlagAttacker = 91,
        UIHudIcon_EnemyFlagAttacker = 92,
        UIHudIcon_LaserTarget = 93,
        UIHudIcon_ObjectiveAttacker = 94,
        UIHudIcon_ObjectiveDefender = 95,
        UIHudIcon_HealthbarBackground = 96,
        UIHudIcon_Healthbar = 97,
        UIHudIcon_RadarSweepComponent = 98,
        UIHudIcon_Blank = 99,
        UIHudIcon_LocalPlayerBigIcon = 100,
        UIHudIcon_LocalPlayerOutOfMap = 101,
        UIHudIcon_PrimaryObjectiveLarge = 102,
        UIHudIcon_TargetUnlocked = 103,
        UIHudIcon_TargetLocked = 104,
        UIHudIcon_TargetLocking = 105,
        UIHudIcon_ArtilleryStrikeNametag = 106,
        UIHudIcon_ArtilleryStrikeMinimap = 107,
        UIHudIcon_CapturePointContested = 108,
        UIHudIcon_CapturePointDefended = 109,
        UIHudIcon_RoundBar = 110,
        UIHudIcon_RoundBarBg = 111,
        UIHudIcon_RoundBarBgPlate = 112,
        UIHudIcon_SnapOvalArrow = 113,
        UIHudIcon_SquadleaderBg = 114,
        UIHudIcon_VehicleBg = 115,
        UIHudIcon_NonTakeableControlPoint = 116,
        UIHudIcon_SpottedPosition = 117,
        UIHudIcon_Grenade = 118,
        UIHudIcon_Revive = 119,
        UIHudIcon_Repair = 120,
        UIHudIcon_Interact = 121,
        UIHudIcon_Voip = 122,
        UIHudIcon_Claymore = 123,
        UIHudIcon_EodBot = 124,
        UIHudIcon_Explosive = 125,
        UIHudIcon_LaserDesignator = 126,
        UIHudIcon_Mav = 127,
        UIHudIcon_Mortar = 128,
        UIHudIcon_RadioBeacon = 129,
        UIHudIcon_Ugs = 130,
        UIHudIcon_PercetageBarMiddle = 131,
        UIHudIcon_PercetageBarEdge = 132,
        UIHudIcon_PercentageBarBackground = 133,
        UIHudIcon_TankLC = 134,
        UIHudIcon_HeliTrans = 135,
        UIHudIcon_StaticAT = 136,
        UIHudIcon_StaticAA = 137,
        UIHudIcon_SprintBoost = 138,
        UIHudIcon_AmmoBoost = 139,
        UIHudIcon_ExplosiveBoost = 140,
        UIHudIcon_ExplosiveResistBoost = 141,
        UIHudIcon_SuppressionBoost = 142,
        UIHudIcon_SuppressionResistBoost = 143,
        UIHudIcon_GrenadeBoost = 144,
        UIHudIcon_HealSpeedBoost = 145,
        UIHudIcon_NeedAmmoHighlight = 146,
        UIHudIcon_NeedMedicHighlight = 147,
        UIHudIcon_NeedRepairHighlight = 148,
        UIHudIcon_NeedPickupHighlight = 149,
        UIHudIcon_PlayerDead = 150,
        UIHudIcon_Player = 151,
        UIHudIcon_Flag = 152,
        UIHudIcon_Base = 153,
        UIHudIcon_TankDestroyer = 154,
        UIHudIcon_Gunship = 155,
        UIHudIcon_ATV = 156,
        UIHudIcon_WeaponPickupTier1 = 157,
        UIHudIcon_WeaponPickupTier2 = 158,
        UIHudIcon_WeaponPickupTier3 = 159,
        UIHudIcon_VehicleParachuted = 160,
        UIHudIcon_CTFFlagFriendlyHome = 161,
        UIHudIcon_CTFFlagFriendlyPicked = 162,
        UIHudIcon_CTFFlagFriendlyDropped = 163,
        UIHudIcon_CTFFlagEnemyHome = 164,
        UIHudIcon_CTFFlagEnemyPicked = 165,
        UIHudIcon_CTFFlagEnemyDropped = 166,
        UIHudIcon_FriendlyRedFlag = 167,
        UIHudIcon_EnemyGreenFlag = 168,
        UIHudIcon_DirtBike = 169,
        UIHudIcon_Count = 170,
    }
    class UIHUDMessageBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIHUDMessageBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIHUDMessageBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIHUDMessageBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIHUDMessageBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIHUDMessageBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        messageQuery: FB.UIDataSourceInfo;
        visibilityQuery: FB.UIDataSourceInfo;
        numberOfRows: number;

    }

    export enum UIIconState {
        UIIconState_Default = 0,
        UIIconState_Enemy = 1,
        UIIconState_Friendly = 2,
        UIIconState_Neutral = 3,
        UIIconState_Squad = 4,
        UIIconState_Blink = 5,
        UIIconState_BlinkEnemy = 6,
        UIIconState_Count = 7,
    }
    class UIImageDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIImageDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIImageDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIImageDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIImageDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIImageDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        staticImageUrl: string;
        imageData: FB.UIDataSourceInfo;
        visibility: FB.UIDataSourceInfo;
        visible: boolean;

    }

    class UIIngameMenuCompData extends FB.UIComponentData {

        /**
         * Creates a new UIIngameMenuCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIIngameMenuCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIIngameMenuCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIIngameMenuCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIIngameMenuCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIIngameMenuCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIInputAction {
        UIInputAction_NavigateUp = 0,
        UIInputAction_NavigateDown = 1,
        UIInputAction_NavigateLeft = 2,
        UIInputAction_NavigateRight = 3,
        UIInputAction_TabLeft = 4,
        UIInputAction_TabRight = 5,
        UIInputAction_Activate = 6,
        UIInputAction_Deactivate = 7,
        UIInputAction_Menu = 8,
        UIInputAction_Cancel = 9,
        UIInputAction_OK = 10,
        UIInputAction_Back = 11,
        UIInputAction_Tab = 12,
        UIInputAction_Edit = 13,
        UIInputAction_View = 14,
        UIInputAction_LThumb = 15,
        UIInputAction_RThumb = 16,
        UIInputAction_MapZoom = 17,
        UIInputAction_MapSize = 18,
        UIInputAction_SayAllChat = 19,
        UIInputAction_TeamChat = 20,
        UIInputAction_SquadChat = 21,
        UIInputAction_CommoRose = 22,
        UIInputAction_ToggleChat = 23,
        UIInputAction_ToggleMinimapType = 24,
        UIInputAction_Size = 25,
        UIInputAction_None = 26,
    }
    export enum UIInputActionEventType {
        UIInputActionEventType_Pressed = 1,
        UIInputActionEventType_Released = 2,
    }
    class UIInputCompData extends FB.UIComponentData {

        /**
         * Creates a new UIInputCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIInputCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIInputCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIInputCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIInputCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIInputCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIInputEvent {
        UIInputEvent_None = 0,
        UIInputEvent_OnButtonA = 1,
        UIInputEvent_OnButtonB = 2,
        UIInputEvent_OnButtonBack = 3,
        UIInputEvent_OnButtonDPad_Down = 4,
        UIInputEvent_OnButtonDPad_Left = 5,
        UIInputEvent_OnButtonDPad_Right = 6,
        UIInputEvent_OnButtonDPad_Up = 7,
        UIInputEvent_OnButtonLB = 8,
        UIInputEvent_OnButtonRB = 9,
        UIInputEvent_OnButtonStart = 10,
        UIInputEvent_OnButtonX = 11,
        UIInputEvent_OnButtonY = 12,
    }
    class UIInputEventNodePort extends FB.UINodePort {

        /**
         * Creates a new UIInputEventNodePort frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIInputEventNodePort frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodePort to UIInputEventNodePort. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodePort);
        /**
         * Casts an instance of type DataContainer to UIInputEventNodePort. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIInputEventNodePort type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputEventType: FB.UIInputAction;

    }

    class UIInstallHDContentCompData extends FB.UIComponentData {

        /**
         * Creates a new UIInstallHDContentCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIInstallHDContentCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIInstallHDContentCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIInstallHDContentCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIInstallHDContentCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIInstallHDContentCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIInteractionCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UIInteractionCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIInteractionCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UIInteractionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UIInteractionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIInteractionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIInteractionCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIInteractionCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        repairSnapDistance: number;
        repairSnapCircle: boolean;
        pickupShrinkSnap: boolean;

    }

    class UIInterruptFlow extends FB.Asset {

        /**
         * Creates a new UIInterruptFlow frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIInterruptFlow frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIInterruptFlow. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIInterruptFlow. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIInterruptFlow type.
         */
        static typeInfo: VUShared.TypeInformation;

        interruptFlow: FB.InterruptFlow[];

    }

    export enum UIInterruptID {
        UIInterruptID_None = 0,
        UIInterruptID_ControllerPull = 1,
    }
    class UIInventoryCompData extends FB.UIComponentData {

        /**
         * Creates a new UIInventoryCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIInventoryCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIInventoryCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIInventoryCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIInventoryCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIInventoryCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIItemDescription extends VUShared.DataContainer {

        /**
         * Creates a new UIItemDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIItemDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UIItemDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIItemDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        itemIds: number[];
        ignoreBuild: boolean;

    }

    class UIItemDescriptionAsset extends FB.Asset {

        /**
         * Creates a new UIItemDescriptionAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIItemDescriptionAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIItemDescriptionAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIItemDescriptionAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIItemDescriptionAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        children: FB.UIItemDescriptionAsset[];
        items: FB.UIItemDescription[];

    }

    export enum UIKeyboardEventType {
        UIKeyboardEventType_KeyDown = 0,
        UIKeyboardEventType_KeyUp = 1,
        UIKeyboardEventType_Char = 2,
    }
    class UIKillCardCompData extends FB.UIComponentData {

        /**
         * Creates a new UIKillCardCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIKillCardCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIKillCardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIKillCardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIKillCardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIKillCardCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIKillCounterCompData extends FB.UIComponentData {

        /**
         * Creates a new UIKillCounterCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIKillCounterCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIKillCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIKillCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIKillCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIKillCounterCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIKitCompData extends FB.UIComponentData {

        /**
         * Creates a new UIKitCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIKitCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIKitCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIKitCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIKitCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIKitCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIKitItemDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIKitItemDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIKitItemDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIKitItemDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIKitItemDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIKitItemDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        unlockName: string;
        description: string;
        category: string;
        texturePath: string;
        iconTexturePath: string;
        unlockTexturePath: string;
        hudIcon: FB.UIHudIcon;
        notExplicitelySelectable: boolean;
        hiddenInProgression: boolean;

    }

    class UILeaderboardCompData extends FB.UIComponentData {

        /**
         * Creates a new UILeaderboardCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILeaderboardCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UILeaderboardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UILeaderboardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UILeaderboardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILeaderboardCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UILeaderboardData {

        /**
         * Creates a new UILeaderboardData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILeaderboardData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UILeaderboardData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UILeaderboardData;

    }

    class UILevelCompData extends FB.UIComponentData {

        /**
         * Creates a new UILevelCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UILevelCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UILevelCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UILevelCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILevelCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UILevelDescription extends FB.UIItemDescription {

        /**
         * Creates a new UILevelDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UILevelDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UILevelDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILevelDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelName: string;
        texturePath: string;
        thumbnailTexturePath: string;

    }

    class UILevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new UILevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to UILevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to UILevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        mpLoadingAssetPath: string;
        loadingMusic: FB.SoundAsset | undefined;
        loadingMusicPath: string;
        levelImagePath: string;
        loadingImagePath: string;
        spLoadingAssetPath: string;
        gpsPosition: FB.UIGPSPosition;
        hintAsset: FB.GameTipAsset | undefined;
        creditsAssets: FB.UICreditsAsset[];
        minimapData: FB.UIMinimapData;
        levelCompledStatData: FB.UILevelStatData;
        levelScoreStatData: FB.UILevelStatData;
        sortIndex: number;
        isMenuLevel: boolean;

    }

    class UILevelLocation {

        /**
         * Creates a new UILevelLocation frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelLocation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UILevelLocation type.
         */
        static typeInfo: VUShared.TypeInformation;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UILevelLocation;

    }

    class UILevelLocationDescription extends FB.UIItemDescription {

        /**
         * Creates a new UILevelLocationDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelLocationDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UILevelLocationDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UILevelLocationDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILevelLocationDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;
        texturePath: string;

    }

    class UILevelSpecificPageHeader {

        /**
         * Creates a new UILevelSpecificPageHeader frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelSpecificPageHeader frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UILevelSpecificPageHeader type.
         */
        static typeInfo: VUShared.TypeInformation;

        levelNameSID: string;
        header: string;
        subHeader: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UILevelSpecificPageHeader;

    }

    class UILevelStatData {

        /**
         * Creates a new UILevelStatData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILevelStatData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UILevelStatData type.
         */
        static typeInfo: VUShared.TypeInformation;

        statEasy: string;
        statMedium: string;
        statHard: string;
        statHardcore: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UILevelStatData;

    }

    class UILicenseDescription extends FB.UIItemDescription {

        /**
         * Creates a new UILicenseDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILicenseDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UILicenseDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UILicenseDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILicenseDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        licenseId: string;
        popupText: string;

    }

    class UILifeCounterCompData extends FB.UIComponentData {

        /**
         * Creates a new UILifeCounterCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILifeCounterCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UILifeCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UILifeCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UILifeCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILifeCounterCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UILightExposureComponentData extends FB.UIComponentData {

        /**
         * Creates a new UILightExposureComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILightExposureComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UILightExposureComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UILightExposureComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UILightExposureComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILightExposureComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIListDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIListDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIListDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIListDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIListDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIListDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        listIndex: number;
        listQuery: FB.UIDataSourceInfo;
        staticItems: FB.StaticListItem[];
        emptyRowType: FB.UIListEmptyRowType;
        defaultHighlightedRow: FB.DefaultSelectionItem;
        rowType: FB.UIListRowType;
        navigationType: FB.UIListNavigationType;
        navigationTypeSource: FB.UIDataSourceInfo;
        rowSpacing: number;
        unFocusMode: FB.UIListUnFocusMode;
        disabledRows: string;
        clearListAtNavigationEvent: boolean;
        sendIndexWithEvent: boolean;
        screenRotationEnabled: boolean;
        use3DSelection: boolean;
        fireHighlightOnMouseOut: boolean;
        dataIncludesButtonLayout: boolean;
        visible: boolean;
        spinnerEnabled: boolean;
        useScrollBar: boolean;
        highLightOnUpdate: boolean;
        keepScrollOffset: boolean;

    }

    export enum UIListEmptyRowType {
        emptyRow_28px = 0,
        emptyRow_20px = 1,
        emptyRowNone = 2,
    }
    class UIListItem {

        /**
         * Creates a new UIListItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIListItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIListItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        label: string;
        isEnabled: FB.UIDataSourceInfo;
        isVisible: FB.UIDataSourceInfo;
        toggleItems: FB.UIDataSourceInfo;
        dataUpdate: FB.UIDataSourceInfo;
        defaultIsVisible: boolean;
        defaultIsEnabled: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIListItem;

    }

    export enum UIListNavigationType {
        loop = 0,
        noLoop = 1,
        sendEventTopBottom = 2,
        sendEventTop = 3,
        sendEventBottom = 4,
        none = 5,
    }
    export enum UIListRowType {
        MixedRows = 0,
        basicRow = 1,
        baseSpawn = 2,
        squadSpawn = 3,
        MenuRow_34px = 4,
        MenuRow_64px = 5,
        ScoreboardRow = 6,
        ScoreboardRow64Players = 7,
        TextSelectorRow = 8,
        TextSelectorRow_28px = 9,
        BarSelectorRow = 10,
        SquadRow = 11,
        ServerListRow = 12,
        StoreRow = 13,
        ComCenterStandardDelimiter = 14,
        ComCenterSquadDelimiter = 15,
        ComCenterStandardFriendRow = 16,
        ComCenterSquadFriendRow = 17,
        ComCenterSquadButtonRow = 18,
        ComCenterLivePartyDelimiter = 19,
        ComCenterLivePartyFriendRow = 20,
        SquadDetailedRow = 21,
        ComCenterLivePartyButtonRow = 22,
        CoopMissionTeamRow = 23,
        LeaderBoardRow = 24,
        CoopLeaderBoardRow = 25,
        BattleLogStandardRow = 26,
        BattleLogNewsRow = 27,
        ServerLocationsRow = 28,
        ServerExtendRow = 29,
        ServerInfoSettingsRow = 30,
        ServerInfoPlayersRow = 31,
        CheckBoxRow = 32,
        BarSelectorRow_28px = 33,
        BasicRow_34px = 34,
        KeyBindingRow = 35,
        SquadListRow = 36,
        teamSpawn = 37,
        MatchListRow = 38,
        MatchPlayerListRow = 39,
        ManageServerPlayerRow = 40,
        ServerSettingsRow = 41,
        ServerPlayersRow = 42,
        TopPlayersRow = 43,
        MenuRowPremium_34px = 44,
        MenuRowPremium_64px = 45,
    }
    export enum UIListUnFocusMode {
        DeSelect = 0,
        ChangeState = 1,
        None = 2,
    }
    class UILoadLevelCompData extends FB.UIComponentData {

        /**
         * Creates a new UILoadLevelCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILoadLevelCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UILoadLevelCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UILoadLevelCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UILoadLevelCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILoadLevelCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UILocalizeCompData extends FB.UIComponentData {

        /**
         * Creates a new UILocalizeCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UILocalizeCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UILocalizeCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UILocalizeCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UILocalizeCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UILocalizeCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UILogicOperator {
        UILogicOperator_None = 0,
        UILogicOperator_Equal = 1,
        UILogicOperator_GreaterThan = 2,
        UILogicOperator_GreaterThanOrEqual = 3,
        UILogicOperator_LessThan = 4,
        UILogicOperator_LessThanOrEqual = 5,
    }
    class UIManageMapsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIManageMapsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIManageMapsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIManageMapsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIManageMapsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIManageMapsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIManageMapsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIManagePlayersCompData extends FB.UIComponentData {

        /**
         * Creates a new UIManagePlayersCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIManagePlayersCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIManagePlayersCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIManagePlayersCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIManagePlayersCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIManagePlayersCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIManageServerPresetsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIManageServerPresetsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIManageServerPresetsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIManageServerPresetsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIManageServerPresetsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIManageServerPresetsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIManageServerPresetsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIManDownCompData extends FB.UIComponentData {

        /**
         * Creates a new UIManDownCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIManDownCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIManDownCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIManDownCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIManDownCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIManDownCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        delayManDownTextTime: number;

    }

    class UIManualCompData extends FB.UIComponentData {

        /**
         * Creates a new UIManualCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIManualCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIManualCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIManualCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIManualCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIManualCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIMapmarkerCompData extends FB.UIComponentData {

        /**
         * Creates a new UIMapmarkerCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMapmarkerCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIMapmarkerCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMapmarkerCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMapmarkerCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMapmarkerCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        proximityIntervals: number[];

    }

    class UIMapmarkertagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UIMapmarkertagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMapmarkertagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UIMapmarkertagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UIMapmarkertagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMapmarkertagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMapmarkertagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMapmarkertagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIMatchCompData extends FB.UIComponentData {

        /**
         * Creates a new UIMatchCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMatchCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIMatchCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMatchCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMatchCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMatchCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIMatchesListCompData extends FB.UIComponentData {

        /**
         * Creates a new UIMatchesListCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMatchesListCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIMatchesListCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMatchesListCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMatchesListCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMatchesListCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIMemCardCompData extends FB.UIComponentData {

        /**
         * Creates a new UIMemCardCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMemCardCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIMemCardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMemCardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMemCardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMemCardCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIMessageCompData extends FB.UIComponentData {

        /**
         * Creates a new UIMessageCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMessageCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIMessageCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMessageCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMessageCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMessageCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scoreAggregateTime: number;
        chatMessageInfo: FB.MessageInfo;
        killMessageInfo: FB.MessageInfo;
        scoreMessageInfo: FB.MessageInfo;
        scoreMinorMessageInfo: FB.MessageInfo;
        scoreMajorMessageInfo: FB.MessageInfo;
        gameMessageInfo: FB.MessageInfo;
        staticMessageInfo: FB.MessageInfo;
        outOfBoundsMessageInfo: FB.MessageInfo;
        killScoreMessageInfo: FB.MessageInfo;
        logLinesMessageInfo: FB.MessageInfo;
        tooltipMessageInfo: FB.MessageInfo;
        subtitleMessageInfo: FB.MessageInfo;
        rewardMessageInfo: FB.MessageInfo;
        localKillMessageInfo: FB.MessageInfo;
        serverAdminYellMessageInfo: FB.MessageInfo;
        gunMasterMessageInfo: FB.MessageInfo;
        forceSubtitlesForTheseLevels: string[];
        forceSubtitlesOffForTheseLevels: string[];

    }

    export enum UIMessageEntityType {
        UIMessageEntityType_Message = 0,
        UIMessageEntityType_Tooltip = 1,
        UIMessageEntityType_LogLines = 2,
        UIMessageEntityType_Subtitle = 3,
        UIMessageEntityType_FailState = 4,
        UIMessageEntityType_OutOfBounds = 5,
    }
    class UIMessageTriggerData extends FB.EntityData {

        /**
         * Creates a new UIMessageTriggerData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMessageTriggerData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to UIMessageTriggerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to UIMessageTriggerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UIMessageTriggerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UIMessageTriggerData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMessageTriggerData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    export enum UIMessageType {
        UIMessageType_Text = 0,
        UIMessageType_EnemyTank = 1,
        UIMessageType_EnemyCar = 2,
        UIMessageType_EnemyBoat = 3,
        UIMessageType_EnemyHelicopter = 4,
        UIMessageType_EnemyInfantry = 5,
        UIMessageType_EnemyActivity = 6,
        UIMessageType_EnemyC4 = 7,
        UIMessageType_EnemyATMine = 8,
        UIMessageType_ChatGo = 9,
        UIMessageType_ChatFollowMe = 10,
        UIMessageType_ChatNeedBackup = 11,
        UIMessageType_ChatNeedPickup = 12,
        UIMessageType_ChatNeedAmmo = 13,
        UIMessageType_ChatNeedMedic = 14,
        UIMessageType_ChatYes = 15,
        UIMessageType_ChatNo = 16,
        UIMessageType_ChatThanks = 17,
        UIMessageType_ChatSorry = 18,
        UIMessageType_ChatNeedRepair = 19,
        UIMessageType_ChatGetIn = 20,
        UIMessageType_ChatGetOut = 21,
        UIMessageType_ChatDropMeOff = 22,
        UIMessageType_OrderDefendBase = 23,
        UIMessageType_OrderAttackBase = 24,
        UIMessageType_OrderMoveToPos = 25,
        UIMessageType_JoinedSquad = 26,
        UIMessageType_LeftSquad = 27,
        UIMessageType_RequestSquad = 28,
        UIMessageType_InviteSquad = 29,
        UIMessageType_KickSquad = 30,
        UIMessageType_LeaderPromoted = 31,
        UIMessageType_Connected = 32,
        UIMessageType_Disconnected = 33,
        UIMessageType_Killed = 34,
        UIMessageType_Died = 35,
    }
    class UIMinimapCompData extends FB.UIComponentData {

        /**
         * Creates a new UIMinimapCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIMinimapCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIMinimapCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMinimapCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMinimapCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIMinimapConfig {

        /**
         * Creates a new UIMinimapConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        combatAreaCameraDelay: number;
        cameraInterpolationTime: number;
        combatAreaFadeSpeed: number;
        zoomStates: FB.UIMinimapZoomConfig[];
        cameraPanSensitivity: number;
        minVelocity: number;
        maxVelocity: number;
        velocityModifier: number;
        disableDefaultState: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapConfig;

    }

    class UIMinimapData {

        /**
         * Creates a new UIMinimapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        worldCenter: VUShared.Vec2;
        combatAreaColor: VUShared.Vec4;
        detailTextureTint: VUShared.Vec4;
        combatAreaMultiplyWrapAmount: VUShared.Vec2;
        vegetation: FB.UIMinimapDistanceFieldParams;
        fadeTexture: FB.TextureAsset | undefined;
        streamingMinimapDelay: number;
        airRadarFadeTexture: FB.TextureAsset | undefined;
        detailTexture: FB.TextureAsset | undefined;
        detail: FB.UIMinimapDistanceFieldParams;
        streamingMinimapTransitionSpeed: number;
        worldRotation: number;
        worldRange: number;
        combatAreaDistanceScale: number;
        combatAreaFadeSpeed: number;
        combatAreaAlphaThreshold: number;
        combatAreaMultiplyTexture: FB.TextureAsset | undefined;
        worldSize: number;
        airRadarRange: number;
        combatAreaScale: number;
        useStreamingMinimap: boolean;
        useCombatAreaTexture: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapData;

    }

    class UIMinimapDistanceFieldParams {

        /**
         * Creates a new UIMinimapDistanceFieldParams frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapDistanceFieldParams frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapDistanceFieldParams type.
         */
        static typeInfo: VUShared.TypeInformation;

        colorTint: VUShared.Vec4;
        outlineColor: VUShared.Vec4;
        distanceScale: number;
        alphaThreshold: number;
        outlineInner: number;
        outlineOuter: number;
        distanceField: FB.UIDistanceFieldAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapDistanceFieldParams;

    }

    class UIMinimapIconTexture {

        /**
         * Creates a new UIMinimapIconTexture frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapIconTexture frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapIconTexture type.
         */
        static typeInfo: VUShared.TypeInformation;

        iconType: FB.UIHudIcon;
        states: FB.UIMinimapIconTextureState[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapIconTexture;

    }

    class UIMinimapIconTextureAtlasAsset extends FB.Asset {

        /**
         * Creates a new UIMinimapIconTextureAtlasAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapIconTextureAtlasAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIMinimapIconTextureAtlasAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIMinimapIconTextureAtlasAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMinimapIconTextureAtlasAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        icons: FB.UIMinimapIconTexture[];
        textureAtlas: FB.TextureAsset | undefined;

    }

    class UIMinimapIconTextureState {

        /**
         * Creates a new UIMinimapIconTextureState frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapIconTextureState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapIconTextureState type.
         */
        static typeInfo: VUShared.TypeInformation;

        state: FB.UIIconState;
        frameRate: number;
        textureInfos: FB.UIMinimapIconUv[];
        shouldRotate: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapIconTextureState;

    }

    class UIMinimapIconUv {

        /**
         * Creates a new UIMinimapIconUv frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapIconUv frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapIconUv type.
         */
        static typeInfo: VUShared.TypeInformation;

        minUv: VUShared.Vec2;
        maxUv: VUShared.Vec2;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapIconUv;

    }

    class UIMinimapVolumeEntityData extends FB.GameEntityData {

        /**
         * Creates a new UIMinimapVolumeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapVolumeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to UIMinimapVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to UIMinimapVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to UIMinimapVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to UIMinimapVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UIMinimapVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UIMinimapVolumeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIMinimapVolumeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        asset: FB.Asset | undefined;
        isDefault: boolean;

    }

    class UIMinimapZoomConfig {

        /**
         * Creates a new UIMinimapZoomConfig frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIMinimapZoomConfig frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIMinimapZoomConfig type.
         */
        static typeInfo: VUShared.TypeInformation;

        state: FB.UIMinimapZoomState;
        data: FB.MinimapData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIMinimapZoomConfig;

    }

    export enum UIMinimapZoomState {
        UIMinimapZoomState_Default = 0,
        UIMinimapZoomState_Overview = 1,
        UIMinimapZoomState_CombatArea = 2,
        UIMinimapZoomState_Mission = 3,
        UIMinimapZoomState_Artillery = 4,
        UIMinimapZoomState_Spawn = 5,
        UIMinimapZoomState_ManDown = 6,
        UIMinimapZoomState_Count = 7,
    }
    class UIModDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIModDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIModDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIModDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIModDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIModDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: string;
        shortName: string;
        fullName: string;
        desc: string;

    }

    export enum UIMouseButton {
        UIMouseButton_Left = 0,
        UIMouseButton_Right = 1,
        UIMouseButton_Middle = 2,
    }
    export enum UIMouseEventType {
        UIMouseEventType_MouseMove = 0,
        UIMouseEventType_MouseWheel = 1,
        UIMouseEventType_ButtonDown = 2,
        UIMouseEventType_ButtonUp = 3,
    }
    class UINametag extends VUShared.DataContainer {

        /**
         * Creates a new UINametag frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINametag frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UINametag. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINametag type.
         */
        static typeInfo: VUShared.TypeInformation;

        textColor: VUShared.Vec3;
        iconFadeDistance: number;
        iconMaxDistance: number;
        icon: FB.UIHudIcon;
        textFadeDistance: number;
        healthFadeDistance: number;
        healthMaxDistance: number;
        textMaxDistance: number;
        targetInTimer: number;
        targetOutTimer: number;

    }

    class UINametagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UINametagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINametagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UINametagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UINametagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UINametagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UINametagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINametagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        squadTint: VUShared.Vec4;
        enemyTint: VUShared.Vec4;
        friendlyTint: VUShared.Vec4;
        orderCooldown: number;
        tooltipCooldown: number;
        healthBarSize: number;
        nameFontSize: number;
        nameGlowSize: number;

    }

    class UINametagCoopCompData extends FB.UINametagCompData {

        /**
         * Creates a new UINametagCoopCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINametagCoopCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINametagCompData to UINametagCoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINametagCompData);
        /**
         * Casts an instance of type UI3dIconCompData to UINametagCoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UINametagCoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UINametagCoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UINametagCoopCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINametagCoopCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UINametagSPCompData extends FB.UINametagCompData {

        /**
         * Creates a new UINametagSPCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINametagSPCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINametagCompData to UINametagSPCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINametagCompData);
        /**
         * Casts an instance of type UI3dIconCompData to UINametagSPCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UINametagSPCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UINametagSPCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UINametagSPCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINametagSPCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UINavigationCompData extends FB.UIComponentData {

        /**
         * Creates a new UINavigationCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINavigationCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UINavigationCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UINavigationCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UINavigationCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINavigationCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UINestedListDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UINestedListDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINestedListDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UINestedListDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UINestedListDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINestedListDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        listIndex: number;
        nestedLists: FB.NestedList[];
        rowSpacing: number;
        defaultHighlightedRow: FB.DefaultSelectionItem;
        navigationType: FB.UIListNavigationType;
        rowType: FB.UIListRowType;
        emptyRowType: FB.UIListEmptyRowType;
        selectorWidth: number;
        visibility: FB.UIDataSourceInfo;
        sendIndexWithEvent: boolean;
        useScrollBar: boolean;
        dataIncludesButtonLayout: boolean;
        clearListAtNavigationEvent: boolean;
        use3DSelection: boolean;
        invertVisible: boolean;
        visible: boolean;
        screenRotationEnabled: boolean;
        highLightOnUpdate: boolean;
        keepScrollOffset: boolean;

    }

    class UINetworkTextInfo {

        /**
         * Creates a new UINetworkTextInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINetworkTextInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UINetworkTextInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        stringId: string;
        displayTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UINetworkTextInfo;

    }

    class UINodeConnection extends VUShared.DataContainer {

        /**
         * Creates a new UINodeConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINodeConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UINodeConnection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINodeConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        sourceNode: FB.UINodeData | undefined;
        targetNode: FB.UINodeData | undefined;
        sourcePort: FB.UINodePort | undefined;
        targetPort: FB.UINodePort | undefined;
        numScreensToPop: number;

    }

    class UINodeData extends VUShared.DataContainer {

        /**
         * Creates a new UINodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UINodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        parentGraph: FB.Asset | undefined;
        isRootNode: boolean;
        parentIsScreen: boolean;

    }

    class UINodePort extends VUShared.DataContainer {

        /**
         * Creates a new UINodePort frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINodePort frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UINodePort. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINodePort type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        instanceName: string;
        query: FB.UIWidgetEventID;
        allowManualRemove: boolean;

    }

    class UIntRange {

        /**
         * Creates a new UIntRange frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIntRange frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIntRange type.
         */
        static typeInfo: VUShared.TypeInformation;

        min: number;
        max: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIntRange;

    }

    class UINumberDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UINumberDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UINumberDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UINumberDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UINumberDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UINumberDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: FB.UIDataSourceInfo;
        numValue: number;
        refresh: boolean;

    }

    class UIObjectivesCompData extends FB.UIComponentData {

        /**
         * Creates a new UIObjectivesCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIObjectivesCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIObjectivesCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIObjectivesCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIObjectivesCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIObjectivesCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIOnDemandFontComponentData extends FB.UIComponentData {

        /**
         * Creates a new UIOnDemandFontComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIOnDemandFontComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIOnDemandFontComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIOnDemandFontComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIOnDemandFontComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIOnDemandFontComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fontCollections: FB.UIFontCollection[];

    }

    class UIPageHeaderBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIPageHeaderBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPageHeaderBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIPageHeaderBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIPageHeaderBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPageHeaderBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        header: FB.UIDataSourceInfo;
        subHeader: FB.UIDataSourceInfo;
        icon: FB.UIDataSourceInfo;
        staticHeader: string;
        staticSubHeader: string;
        staticIcon: string;
        levelSpecificHeaders: FB.UILevelSpecificPageHeader[];

    }

    class UIPartData extends VUShared.DataContainer {

        /**
         * Creates a new UIPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UIPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIPartIdentifier {
        HCI_None = 0,
        HCI_RangeMeter = 1,
        HCI_PredictedSight = 2,
        HCI_VelocityVector = 3,
        HCI_RadioAltitude = 4,
    }
    class UIPartProperties {

        /**
         * Creates a new UIPartProperties frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPartProperties frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIPartProperties type.
         */
        static typeInfo: VUShared.TypeInformation;

        identifier: FB.UIPartIdentifier;
        range: number;
        frequency: number;
        compensateFreelook: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIPartProperties;

    }

    class UIPartPropertyList extends VUShared.DataContainer {

        /**
         * Creates a new UIPartPropertyList frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPartPropertyList frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UIPartPropertyList. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPartPropertyList type.
         */
        static typeInfo: VUShared.TypeInformation;

        hudPropertyList: FB.UIPartProperties[];

    }

    class UIPersistenceCompData extends FB.UIComponentData {

        /**
         * Creates a new UIPersistenceCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPersistenceCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPersistenceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPersistenceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPersistenceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPersistenceCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIPlaygroupCompData extends FB.UIComponentData {

        /**
         * Creates a new UIPlaygroupCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPlaygroupCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPlaygroupCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPlaygroupCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPlaygroupCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPlaygroupCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIPopupButton {

        /**
         * Creates a new UIPopupButton frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPopupButton frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIPopupButton type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputConcept: FB.UIInputAction;
        label: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIPopupButton;

    }

    class UIPopupCompData extends FB.UIComponentData {

        /**
         * Creates a new UIPopupCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPopupCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPopupCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPopupCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPopupCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPopupCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIPopupTextInput {

        /**
         * Creates a new UIPopupTextInput frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPopupTextInput frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIPopupTextInput type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: string;
        label: string;
        defaultValue: string;
        isPassword: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIPopupTextInput;

    }

    export enum UIPopupType {
        PopupType_MemCard = 0,
        PopupType_ControllerDisconnected = 1,
        PopupType_Login = 2,
        PopupType_TermsOfService = 3,
        PopupType_PrivacyPolicy = 4,
        PopupType_RevivePrompt = 5,
        PopupType_Generic = 6,
        PopupType_ServerReminder = 7,
        PopupType_Error = 8,
        PopupType_ManagePlayer = 9,
        PopupType_Invalid = 10,
        PopupType_IngamePlayer = 11,
        PopupType_OnlinePass = 12,
        PopupType_Origin = 13,
        PopupType_UpdateAvailable = 14,
        PopupType_Dynamic = 15,
        PopupType_GameQueue = 16,
        PopupType_COOPMatchmaking = 17,
        PopupType_PromoInfo = 18,
    }
    class UIPostProcessComponentData extends FB.UIComponentData {

        /**
         * Creates a new UIPostProcessComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPostProcessComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPostProcessComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPostProcessComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPostProcessComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPostProcessComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        highlightThreshold: number;
        xPower: number;
        yPower: number;
        distort: number;
        timeScale: number;
        noiseTexture: FB.TextureAsset | undefined;
        highlight: number;
        rShift: number;
        gShift: number;
        bShift: number;
        tweakMode: boolean;
        enabled: boolean;

    }

    class UIPremiumCompData extends FB.UIComponentData {

        /**
         * Creates a new UIPremiumCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPremiumCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPremiumCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPremiumCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPremiumCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPremiumCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIPreRoundCompData extends FB.UIComponentData {

        /**
         * Creates a new UIPreRoundCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPreRoundCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPreRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPreRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPreRoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPreRoundCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIPresenceCompData extends FB.UIComponentData {

        /**
         * Creates a new UIPresenceCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIPresenceCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIPresenceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIPresenceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIPresenceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIPresenceCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIQueuedEventsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIQueuedEventsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIQueuedEventsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIQueuedEventsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIQueuedEventsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIQueuedEventsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIQueuedEventsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialQueueDelay: number;
        showUnlocksBecomingAvailable: boolean;

    }

    class UIRankDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIRankDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIRankDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIRankDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIRankDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIRankDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        ignoreBuild: boolean;

    }

    class UIRenderCompData extends FB.UIComponentData {

        /**
         * Creates a new UIRenderCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIRenderCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIRenderCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIRenderCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIRenderCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIRenderCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        backgroundRect1: VUShared.Vec4;
        backgroundRect0: VUShared.Vec4;
        bgTexture2: FB.TextureAsset | undefined;
        bgTexture1: FB.TextureAsset | undefined;
        alphaMin: number;
        alphaAnimationSpeed: number;
        alphaOffset: number;
        alphaMax: number;

    }

    class UIRightClickCompData extends FB.UIComponentData {

        /**
         * Creates a new UIRightClickCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIRightClickCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIRightClickCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIRightClickCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIRightClickCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIRightClickCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIScoreboardCompData extends FB.UIComponentData {

        /**
         * Creates a new UIScoreboardCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIScoreboardCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIScoreboardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIScoreboardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIScoreboardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIScoreboardCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxUpdateInterval: number;

    }

    class UIScreenAsset extends FB.UIGraphAsset {

        /**
         * Creates a new UIScreenAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIScreenAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIGraphAsset to UIScreenAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIGraphAsset);
        /**
         * Casts an instance of type Asset to UIScreenAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIScreenAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIScreenAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIScreenEventCompData extends FB.UIComponentData {

        /**
         * Creates a new UIScreenEventCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIScreenEventCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIScreenEventCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIScreenEventCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIScreenEventCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIScreenEventCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIScreenshotCompData extends FB.UIComponentData {

        /**
         * Creates a new UIScreenshotCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIScreenshotCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIScreenshotCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIScreenshotCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIScreenshotCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIScreenshotCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        resizeImageWidth: number;
        screenshotInfos: FB.ScreenshotInfo[];
        resizeImageHeight: number;
        autoResizeImage: boolean;

    }

    class UIServerBrowserCompData extends FB.UIComponentData {

        /**
         * Creates a new UIServerBrowserCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIServerBrowserCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIServerBrowserCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIServerBrowserCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIServerBrowserCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIServerBrowserCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIServerListCompData extends FB.UIComponentData {

        /**
         * Creates a new UIServerListCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIServerListCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIServerListCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIServerListCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIServerListCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIServerListCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIServerListFilterBarCompData extends FB.UIComponentData {

        /**
         * Creates a new UIServerListFilterBarCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIServerListFilterBarCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIServerListFilterBarCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIServerListFilterBarCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIServerListFilterBarCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIServerListFilterBarCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UISessionDataComponentData extends FB.UIComponentData {

        /**
         * Creates a new UISessionDataComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISessionDataComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISessionDataComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISessionDataComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISessionDataComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISessionDataComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UISettings extends FB.SystemSettings {

        /**
         * Creates a new UISettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to UISettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to UISettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        system: FB.UISystemType;
        bundles: FB.UIBundlesAsset | undefined;
        profileOptions: FB.ProfileOptionsAsset | undefined;
        language: FB.LanguageFormat;
        dataCop: FB.DataCopSettings;
        oneBundlePerGraph: boolean;
        drawEnable: boolean;

    }

    class UISettingsCompData extends FB.UIComponentData {

        /**
         * Creates a new UISettingsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISettingsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISettingsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISettingsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISettingsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISettingsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        settingsPages: FB.UISettingsPage[];

    }

    class UISettingsGroup {

        /**
         * Creates a new UISettingsGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISettingsGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UISettingsGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameSid: string;
        screenColumn: number;
        settingsItems: FB.UISettingsItem[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UISettingsGroup;

    }

    class UISettingsItem {

        /**
         * Creates a new UISettingsItem frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISettingsItem frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UISettingsItem type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameSid: string;
        startEndSymbols: FB.UISettingSymbols;
        setting: FB.ProfileOptionData | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UISettingsItem;

    }

    class UISettingsPage {

        /**
         * Creates a new UISettingsPage frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISettingsPage frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UISettingsPage type.
         */
        static typeInfo: VUShared.TypeInformation;

        nameSid: string;
        settingsGroups: FB.UISettingsGroup[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UISettingsPage;

    }

    export enum UISettingSymbols {
        UISettingSymbols_Pluses = 0,
        UISettingSymbols_Values = 1,
        UISettingSymbols_None = 2,
    }
    export enum UISettingType {
        UISettingType_Slider = 0,
        UISettingType_TickerUpDown = 1,
        UISettingType_Droplist = 2,
        UISettingType_Checkbox = 3,
        UISettingType_Text = 4,
        UISettingType_NotSet = 5,
    }
    class UISetupServerWizardCompData extends FB.UIComponentData {

        /**
         * Creates a new UISetupServerWizardCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISetupServerWizardCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISetupServerWizardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISetupServerWizardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISetupServerWizardCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISetupServerWizardCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        passwdMinLen: number;

    }

    class UISetValueData extends FB.EntityData {

        /**
         * Creates a new UISetValueData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISetValueData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to UISetValueData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to UISetValueData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UISetValueData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UISetValueData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISetValueData type.
         */
        static typeInfo: VUShared.TypeInformation;

        dataSource: FB.UIDataSourceInfo;
        intValue: number;
        floatValue: number;
        stringValue: string;
        boolValue: boolean;

    }

    class UISoldierCompData extends FB.UIComponentData {

        /**
         * Creates a new UISoldierCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISoldierCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISoldierCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISoldierCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISoldierCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISoldierCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        criticalHealthThreshold: number;
        hitShaderDamageMultiplier: number;
        hitShaderMinDamage: number;
        ekgLineThickness: number;
        shockTraumaAbilityIndex: number;
        rangerPTProgramAbilityIndex: number;
        focusAbilityIndex: number;
        ekgLineAlpha: number;
        hitShaderGradientDurationMultiplier: number;
        hitShaderMaxDamage: number;
        hitShaderIndicatorDurationMultiplier: number;
        useVehicleTeamSpawn: boolean;
        useSquadSpawn: boolean;
        spawnOnSquadLeaders: boolean;

    }

    class UISoundCompData extends FB.UIComponentData {

        /**
         * Creates a new UISoundCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISoundCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISoundCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISoundCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UISpawnLogicCompData extends FB.UIComponentData {

        /**
         * Creates a new UISpawnLogicCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISpawnLogicCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISpawnLogicCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISpawnLogicCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISpawnLogicCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISpawnLogicCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UISpawnPointCompData extends FB.UIComponentData {

        /**
         * Creates a new UISpawnPointCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISpawnPointCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISpawnPointCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISpawnPointCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISpawnPointCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISpawnPointCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UISpectatorCompData extends FB.UIComponentData {

        /**
         * Creates a new UISpectatorCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISpectatorCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISpectatorCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISpectatorCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISpectatorCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISpectatorCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UISquadCompData extends FB.UIComponentData {

        /**
         * Creates a new UISquadCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UISquadCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UISquadCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UISquadCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UISquadCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UISquadCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        squad15: string;
        squad32: string;
        squad1: string;
        squad2: string;
        squad3: string;
        squad4: string;
        squad5: string;
        squad6: string;
        squad7: string;
        squad8: string;
        squad9: string;
        squad10: string;
        squad11: string;
        squad12: string;
        squad13: string;
        squad14: string;
        squad16: string;
        squad24: string;
        squad17: string;
        squad18: string;
        squad19: string;
        squad20: string;
        squad21: string;
        squad22: string;
        squad23: string;
        squad31: string;
        squad25: string;
        squad26: string;
        squad27: string;
        squad28: string;
        squad29: string;
        squad30: string;
        hideLocalSquadBoostData: boolean;

    }

    export enum UIState {
        UIState_Menu = 0,
        UIState_LoadingSP = 1,
        UIState_LoadingMP = 2,
        UIState_Playing = 3,
        UIState_Unload = 4,
        UIState_Embedded = 5,
        UIState_Static = 6,
        UIState_StaticGenerated = 7,
        UIState_PreEndOfRound = 8,
        UIState_EndOfRound = 9,
        UIState_PlayingSP = 10,
        UIState_PlayingMP = 11,
        UIState_None = 12,
    }
    class UIStateAsset extends FB.Asset {

        /**
         * Creates a new UIStateAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIStateAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UIStateAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIStateAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIStateAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        uiComponents: FB.UIComponentData[];
        actionscriptLibraries: FB.UIAsset[];
        actionscriptNames: string[];
        stateName: string;
        statePath: string;

    }

    class UIStatsCompData extends FB.UIComponentData {

        /**
         * Creates a new UIStatsCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIStatsCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIStatsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIStatsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIStatsCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIStatsCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIStoreCompData extends FB.UIComponentData {

        /**
         * Creates a new UIStoreCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIStoreCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIStoreCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIStoreCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIStoreCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIStoreCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UISystemType {
        UISystem_None = 0,
        UISystem_Standard = 1,
    }
    class UITaggedVehicleCrosshair {

        /**
         * Creates a new UITaggedVehicleCrosshair frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITaggedVehicleCrosshair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UITaggedVehicleCrosshair type.
         */
        static typeInfo: VUShared.TypeInformation;

        minDistance: number;
        maxDistance: number;
        minSize: number;
        maxSize: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UITaggedVehicleCrosshair;

    }

    class UITeamCompData extends FB.UIComponentData {

        /**
         * Creates a new UITeamCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITeamCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UITeamCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UITeamCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITeamCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITeamCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UITeamSupportTagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UITeamSupportTagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITeamSupportTagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UITeamSupportTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UITeamSupportTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UITeamSupportTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITeamSupportTagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITeamSupportTagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UITextDatabase extends FB.Asset {

        /**
         * Creates a new UITextDatabase frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITextDatabase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UITextDatabase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITextDatabase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITextDatabase type.
         */
        static typeInfo: VUShared.TypeInformation;

        language: FB.LanguageFormat;
        binaryChunk: VUShared.Guid;
        binaryChunkSize: number;
        histogramChunk: VUShared.Guid;
        histogramChunkSize: number;

    }

    class UITextDataBinding extends FB.UIDataBinding {

        /**
         * Creates a new UITextDataBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITextDataBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UITextDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UITextDataBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITextDataBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        staticText: string;
        textData: FB.UIDataSourceInfo;
        visibility: FB.UIDataSourceInfo;
        refresh: boolean;
        overrideDirectAccess: boolean;

    }

    class UITextureAtlasInfo {

        /**
         * Creates a new UITextureAtlasInfo frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITextureAtlasInfo frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UITextureAtlasInfo type.
         */
        static typeInfo: VUShared.TypeInformation;

        minUv: VUShared.Vec2;
        maxUv: VUShared.Vec2;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UITextureAtlasInfo;

    }

    class UITextureStreamingComponentData extends FB.UIComponentData {

        /**
         * Creates a new UITextureStreamingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITextureStreamingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UITextureStreamingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UITextureStreamingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITextureStreamingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITextureStreamingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UITicketCounterCompData extends FB.UIComponentData {

        /**
         * Creates a new UITicketCounterCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITicketCounterCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UITicketCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UITicketCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITicketCounterCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITicketCounterCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UITrackingtagCompData extends FB.UI3dIconCompData {

        /**
         * Creates a new UITrackingtagCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITrackingtagCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UI3dIconCompData to UITrackingtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UI3dIconCompData);
        /**
         * Casts an instance of type UIComponentData to UITrackingtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UITrackingtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITrackingtagCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITrackingtagCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        showUnlockedLockAlways: boolean;
        showUnlockedLockOnRadar: boolean;
        showUnlockedLockOnHeat: boolean;
        showUnlockedLockOnLaserPainted: boolean;

    }

    class UITrainingCompData extends FB.UIComponentData {

        /**
         * Creates a new UITrainingCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UITrainingCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UITrainingCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UITrainingCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UITrainingCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UITrainingCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIUnlocksCompData extends FB.UIComponentData {

        /**
         * Creates a new UIUnlocksCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIUnlocksCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIUnlocksCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIUnlocksCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIUnlocksCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIUnlocksCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIUpdateType {
        UIUpdateType_Always = 0,
        UIUpdateType_Odd = 1,
        UIUpdateType_Even = 2,
        UIUpdateType_Never = 3,
    }
    class UIVehicleCompData extends FB.UIComponentData {

        /**
         * Creates a new UIVehicleCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIVehicleCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIVehicleCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIVehicleCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIVehicleCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIVehicleCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        rangeMeterUpdatesPerSecond: number;

    }

    class UIVehicleDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIVehicleDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIVehicleDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIVehicleDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIVehicleDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIVehicleDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;
        texturePath: string;

    }

    class UIVehicleUnlockDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIVehicleUnlockDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIVehicleUnlockDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIVehicleUnlockDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIVehicleUnlockDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIVehicleUnlockDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;
        category: string;
        texturePath: string;
        iconTexturePath: string;
        unlockTexturePath: string;
        hiddenInProgression: boolean;
        notExplicitelySelectable: boolean;

    }

    class UIVehicleWeaponDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIVehicleWeaponDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIVehicleWeaponDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIVehicleWeaponDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIVehicleWeaponDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIVehicleWeaponDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class UIVoiceCompData extends FB.UIComponentData {

        /**
         * Creates a new UIVoiceCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIVoiceCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIVoiceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIVoiceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIVoiceCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIVoiceCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        hudMaxSpeakers: number;

    }

    class UIWeaponAccessoryDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIWeaponAccessoryDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWeaponAccessoryDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIWeaponAccessoryDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIWeaponAccessoryDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWeaponAccessoryDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        description: string;
        category: string;
        texturePath: string;
        iconTexturePath: string;
        unlockTexturePath: string;
        miscTexturePath: string;
        coreAccessory: boolean;
        hiddenInProgression: boolean;

    }

    class UIWeaponCompData extends FB.UIComponentData {

        /**
         * Creates a new UIWeaponCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWeaponCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIWeaponCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIWeaponCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIWeaponCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWeaponCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minHitIndicatorLimit: number;
        maxHitIndicatorLimit: number;
        normalHitIndicatorLimit: number;

    }

    class UIWeaponDescription extends FB.UIItemDescription {

        /**
         * Creates a new UIWeaponDescription frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWeaponDescription frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIItemDescription to UIWeaponDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIItemDescription);
        /**
         * Casts an instance of type DataContainer to UIWeaponDescription. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWeaponDescription type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        unlockName: string;
        description: string;
        category: string;
        texturePath: string;
        iconTexturePath: string;
        unlockTexturePath: string;
        ammo: string;
        rateOfFire: string;
        range: string;
        fireModeSingle: boolean;
        fireModeBurst: boolean;
        fireModeAuto: boolean;
        hiddenInProgression: boolean;

    }

    class UIWidgetAsset extends FB.UIAsset {

        /**
         * Creates a new UIWidgetAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWidgetAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIAsset to UIWidgetAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIAsset);
        /**
         * Casts an instance of type Asset to UIWidgetAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIWidgetAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWidgetAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        widgetEvents: FB.WidgetEventQueryPair[];

    }

    class UIWidgetEventCompData extends FB.UIComponentData {

        /**
         * Creates a new UIWidgetEventCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWidgetEventCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIWidgetEventCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIWidgetEventCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIWidgetEventCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWidgetEventCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UIWidgetEventID {
        UIWidgetEventID_None = 0,
        UIWidgetEventID_OnItemSelected = 1,
        UIWidgetEventID_OnItemHighlighted = 2,
        UIWidgetEventID_OnItemReleased = 3,
        UIWidgetEventID_OnItemUnhighlighted = 4,
        UIWidgetEventID_OnItemPressed = 5,
        UIWidgetEventID_OnItemOver = 6,
        UIWidgetEventID_OnItemOut = 7,
        UIWidgetEventID_OnToggle = 8,
        UIWidgetEventID_OnChanged = 9,
        UIWidgetEventID_OnButtonBarChanged = 10,
        UIWidgetEventID_EnterTop = 11,
        UIWidgetEventID_EnterBottom = 12,
        UIWidgetEventID_EnterAny = 13,
        UIWidgetEventID_SetIndex = 14,
        UIWidgetEventID_SetPercentage = 15,
        UIWidgetEventID_OnReachedTop = 16,
        UIWidgetEventID_OnReachedBottom = 17,
        UIWidgetEventID_OnNavigateLeft = 18,
        UIWidgetEventID_OnNavigateRight = 19,
        UIWidgetEventID_Show = 20,
        UIWidgetEventID_Hide = 21,
        UIWidgetEventID_OnShow = 22,
        UIWidgetEventID_OnHide = 23,
        UIWidgetEventID_Toggle = 24,
        UIWidgetEventID_ToggleOn = 25,
        UIWidgetEventID_ToggleOff = 26,
        UIWidgetEventID_ToggledOn = 27,
        UIWidgetEventID_ToggledOff = 28,
        UIWidgetEventID_Update = 29,
        UIWidgetEventID_OnComplete = 30,
        UIWidgetEventID_Focus = 31,
        UIWidgetEventID_OnHeaderChanged = 32,
        UIWidgetEventID_OnDescriptionChanged = 33,
        UIWidgetEventID_OnMapChanged = 34,
        UIWidgetEventID_Clear = 35,
        UIWidgetEventID_Delete = 36,
        UIWidgetEventID_LThumb = 37,
        UIWidgetEventID_RThumb = 38,
        UIWidgetEventID_LTAB = 39,
        UIWidgetEventID_RTAB = 40,
        UIWidgetEventID_OnLarge = 41,
        UIWidgetEventID_OnSmall = 42,
        UIWidgetEventID_TextEntered = 43,
        UIWidgetEventID_PlaySoundNavigate = 44,
        UIWidgetEventID_PlaySoundSelect = 45,
        UIWidgetEventID_PlaySoundPageSwap = 46,
        UIWidgetEventID_OnComPressed = 47,
        UIWidgetEventID_OnComReleased = 48,
        UIWidgetEventID_NumItems = 49,
    }
    export enum UIWidgetEventQuery {
        UIWidgetEventQuery_FireEvent = 0,
    }
    class UIWidgetMovieCompData extends FB.UIComponentData {

        /**
         * Creates a new UIWidgetMovieCompData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWidgetMovieCompData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UIWidgetMovieCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UIWidgetMovieCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UIWidgetMovieCompData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWidgetMovieCompData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UIWidgetPathBinding extends FB.UIDataBinding {

        /**
         * Creates a new UIWidgetPathBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWidgetPathBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIDataBinding to UIWidgetPathBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIDataBinding);
        /**
         * Casts an instance of type DataContainer to UIWidgetPathBinding. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UIWidgetPathBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        widgetPathQuery: FB.UIDataSourceInfo;
        visibility: FB.UIDataSourceInfo;

    }

    class UIWidgetProperty {

        /**
         * Creates a new UIWidgetProperty frostbite instance.
         */
        constructor();
        /**
         * Creates a new UIWidgetProperty frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UIWidgetProperty type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        value: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UIWidgetProperty;

    }

    class UnderFireTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new UnderFireTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnderFireTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UnderFireTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnderFireTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        radius: number;
        coolDownTime: number;
        triggerOnMaterialOnly: FB.MaterialContainerPair | undefined;
        triggeredBy: FB.AreaTriggerInclude;
        disableIfTrackEntityIsLost: boolean;
        randomYaw: boolean;
        indicateHit: boolean;

    }

    export enum UndergrowthOrientationMode {
        UndergrowthOrientationMode_Horizontal = 0,
        UndergrowthOrientationMode_LeanToTerrain = 1,
        UndergrowthOrientationMode_SkewToTerrain = 2,
    }
    export enum UndergrowthRotationMode {
        UndergrowthRotationMode_Random = 0,
        UndergrowthRotationMode_TowardsSlope = 1,
        UndergrowthRotationMode_Fixed = 2,
    }
    class UnlockableColorCollection extends VUShared.DataContainer {

        /**
         * Creates a new UnlockableColorCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockableColorCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UnlockableColorCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockableColorCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: FB.ColorReference | undefined;
        possibleValues: FB.ColorUnlockPartData[];

    }

    class UnlockableProjectile {

        /**
         * Creates a new UnlockableProjectile frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockableProjectile frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UnlockableProjectile type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialSpeed: VUShared.Vec3;
        projectileData: FB.ProjectileEntityData | undefined;
        projectile: FB.ProjectileBlueprint | undefined;
        unlock: FB.UnlockAssetBase | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UnlockableProjectile;

    }

    class UnlockableShaderParameterValueCollection extends VUShared.DataContainer {

        /**
         * Creates a new UnlockableShaderParameterValueCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockableShaderParameterValueCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UnlockableShaderParameterValueCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockableShaderParameterValueCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        shaderParameterName: string;

    }

    class UnlockableTextureCollection extends VUShared.DataContainer {

        /**
         * Creates a new UnlockableTextureCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockableTextureCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UnlockableTextureCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockableTextureCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: FB.TextureAsset | undefined;

    }

    class UnlockableTextureSliceCollection extends VUShared.DataContainer {

        /**
         * Creates a new UnlockableTextureSliceCollection frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockableTextureSliceCollection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UnlockableTextureSliceCollection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockableTextureSliceCollection type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: number;
        possibleValues: FB.TextureSliceUnlockPartData[];

    }

    class UnlockAsset extends FB.UnlockAssetBase {

        /**
         * Creates a new UnlockAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockAssetBase to UnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockAssetBase);
        /**
         * Casts an instance of type Asset to UnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        linkedTo: FB.Asset[];

    }

    class UnlockAssetBase extends FB.Asset {

        /**
         * Creates a new UnlockAssetBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockAssetBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UnlockAssetBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UnlockAssetBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockAssetBase type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockScore: number;
        unlockUserData: FB.UnlockUserDataBase | undefined;
        debugUnlockId: string;
        identifier: number;
        availableForPlayer: FB.UnlockAvailability;
        nextLevelUnlockAsset: FB.UnlockAssetBase | undefined;
        autoAvailable: boolean;
        hiddenInProgression: boolean;

    }

    class UnlockAssetPair {

        /**
         * Creates a new UnlockAssetPair frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockAssetPair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UnlockAssetPair type.
         */
        static typeInfo: VUShared.TypeInformation;

        second: FB.UnlockAssetBase | undefined;
        result: FB.UnlockAssetBase | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UnlockAssetPair;

    }

    export enum UnlockAvailability {
        UnlockAvailability_All = 0,
        UnlockAvailability_HumanPlayerOnly = 1,
        UnlockAvailability_AIOnly = 2,
    }
    class UnlockComponentData extends FB.ComponentData {

        /**
         * Creates a new UnlockComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to UnlockComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to UnlockComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to UnlockComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to UnlockComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockAsset: FB.UnlockAssetBase | undefined;
        unlockDataKey: number;
        unlockableFromAllEntries: boolean;
        invertUnlockTest: boolean;

    }

    class UnlockUserDataBase extends FB.Asset {

        /**
         * Creates a new UnlockUserDataBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockUserDataBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to UnlockUserDataBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UnlockUserDataBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockUserDataBase type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UnlockValuePair extends VUShared.DataContainer {

        /**
         * Creates a new UnlockValuePair frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockValuePair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UnlockValuePair. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UnlockValuePair type.
         */
        static typeInfo: VUShared.TypeInformation;

        id: string;

    }

    class UnlockWeaponAndSlot {

        /**
         * Creates a new UnlockWeaponAndSlot frostbite instance.
         */
        constructor();
        /**
         * Creates a new UnlockWeaponAndSlot frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UnlockWeaponAndSlot type.
         */
        static typeInfo: VUShared.TypeInformation;

        weapon: FB.SoldierWeaponUnlockAsset | undefined;
        slot: FB.WeaponSlot;
        unlockAssets: FB.UnlockAssetBase[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UnlockWeaponAndSlot;

    }

    class UpdateAgeData extends FB.ProcessorData {

        /**
         * Creates a new UpdateAgeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateAgeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateAgeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateAgeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateAgeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateAgeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lifetime: number;

    }

    class UpdateAlphaLevelMaxData extends FB.ProcessorData {

        /**
         * Creates a new UpdateAlphaLevelMaxData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateAlphaLevelMaxData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateAlphaLevelMaxData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateAlphaLevelMaxData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateAlphaLevelMaxData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateAlphaLevelMaxData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxLevel: number;

    }

    class UpdateAlphaLevelMinData extends FB.ProcessorData {

        /**
         * Creates a new UpdateAlphaLevelMinData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateAlphaLevelMinData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateAlphaLevelMinData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateAlphaLevelMinData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateAlphaLevelMinData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateAlphaLevelMinData type.
         */
        static typeInfo: VUShared.TypeInformation;

        minLevel: number;

    }

    class UpdateAlphaLevelScaleData extends FB.ProcessorData {

        /**
         * Creates a new UpdateAlphaLevelScaleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateAlphaLevelScaleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateAlphaLevelScaleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateAlphaLevelScaleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateAlphaLevelScaleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateAlphaLevelScaleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        exponent: number;

    }

    class UpdateCameraProximityData extends FB.ProcessorData {

        /**
         * Creates a new UpdateCameraProximityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateCameraProximityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateCameraProximityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateCameraProximityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateCameraProximityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateCameraProximityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        size: VUShared.Vec3;
        forwardOffset: number;

    }

    class UpdateClipScaleData extends FB.ProcessorData {

        /**
         * Creates a new UpdateClipScaleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateClipScaleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateClipScaleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateClipScaleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateClipScaleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateClipScaleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lookup: number[];

    }

    class UpdateColorData extends FB.ProcessorData {

        /**
         * Creates a new UpdateColorData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateColorData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateColorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateColorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateColorData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateColorData type.
         */
        static typeInfo: VUShared.TypeInformation;

        color: VUShared.Vec3;

    }

    class UpdateLinearVelocityData extends FB.ProcessorData {

        /**
         * Creates a new UpdateLinearVelocityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateLinearVelocityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateLinearVelocityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateLinearVelocityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateLinearVelocityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateLinearVelocityData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UpdateOrientationData extends FB.ProcessorData {

        /**
         * Creates a new UpdateOrientationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateOrientationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateOrientationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateOrientationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateOrientationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateOrientationData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum UpdatePass {
        UpdatePass_PreSim = 0,
        UpdatePass_PostSim = 1,
        UpdatePass_PostFrame = 2,
        UpdatePass_FrameInterpolation = 3,
        UpdatePass_PreInput = 4,
        UpdatePass_PreFrame = 5,
        UpdatePass_Count = 6,
    }
    class UpdateRotationData extends FB.ProcessorData {

        /**
         * Creates a new UpdateRotationData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateRotationData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateRotationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateRotationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateRotationData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateRotationData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UpdateSizeData extends FB.ProcessorData {

        /**
         * Creates a new UpdateSizeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateSizeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateSizeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateSizeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateSizeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateSizeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        pivot: VUShared.Vec2;

    }

    class UpdateSizeXData extends FB.ProcessorData {

        /**
         * Creates a new UpdateSizeXData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateSizeXData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateSizeXData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateSizeXData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateSizeXData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateSizeXData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UpdateSizeYData extends FB.ProcessorData {

        /**
         * Creates a new UpdateSizeYData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateSizeYData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateSizeYData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateSizeYData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateSizeYData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateSizeYData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UpdateSizeZData extends FB.ProcessorData {

        /**
         * Creates a new UpdateSizeZData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateSizeZData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateSizeZData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateSizeZData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateSizeZData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateSizeZData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UpdateTextureCoordsData extends FB.ProcessorData {

        /**
         * Creates a new UpdateTextureCoordsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateTextureCoordsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateTextureCoordsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateTextureCoordsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateTextureCoordsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateTextureCoordsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        textureInfo1: FB.EmitterTextureInfo;
        textureBlendValue: number;

    }

    class UpdateTransparencyData extends FB.ProcessorData {

        /**
         * Creates a new UpdateTransparencyData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UpdateTransparencyData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProcessorData to UpdateTransparencyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProcessorData);
        /**
         * Casts an instance of type EmitterComponentData to UpdateTransparencyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EmitterComponentData);
        /**
         * Casts an instance of type DataContainer to UpdateTransparencyData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UpdateTransparencyData type.
         */
        static typeInfo: VUShared.TypeInformation;

        cullThreshold: number;

    }

    class UrgencyModifierData {

        /**
         * Creates a new UrgencyModifierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UrgencyModifierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the UrgencyModifierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        modifier: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.UrgencyModifierData;

    }

    class UrgencySetData extends VUShared.DataContainer {

        /**
         * Creates a new UrgencySetData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UrgencySetData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UrgencySetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UrgencySetData type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        urgencyModifiers: FB.UrgencyModifierData[];

    }

    class UrgencyUserData extends VUShared.DataContainer {

        /**
         * Creates a new UrgencyUserData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UrgencyUserData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to UrgencyUserData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UrgencyUserData type.
         */
        static typeInfo: VUShared.TypeInformation;

        base: FB.UrgencyUserData | undefined;
        urgencyModifiers: FB.UrgencyModifierData[];
        modifierSets: FB.UrgencySetData[];

    }

    class UserComponentData extends FB.UIComponentData {

        /**
         * Creates a new UserComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UserComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UIComponentData to UserComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UIComponentData);
        /**
         * Casts an instance of type Asset to UserComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to UserComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UserComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class UserMusicArbiterNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new UserMusicArbiterNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UserMusicArbiterNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to UserMusicArbiterNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to UserMusicArbiterNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UserMusicArbiterNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inValue: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        plugin: FB.SoundGraphPluginRef;

    }

    class UserMusicControllerNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new UserMusicControllerNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new UserMusicControllerNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to UserMusicControllerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to UserMusicControllerNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the UserMusicControllerNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        override: FB.AudioGraphNodePort;
        restore: FB.AudioGraphNodePort;
        restoreOnDeactivated: boolean;

    }

    class ValueAtX {

        /**
         * Creates a new ValueAtX frostbite instance.
         */
        constructor();
        /**
         * Creates a new ValueAtX frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ValueAtX type.
         */
        static typeInfo: VUShared.TypeInformation;

        x: number;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ValueAtX;

    }

    class ValueDebugNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ValueDebugNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ValueDebugNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ValueDebugNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ValueDebugNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ValueDebugNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: FB.DebugValueInput[];

    }

    class ValueSelectorEntry extends FB.AudioGraphNodePortGroup {

        /**
         * Creates a new ValueSelectorEntry frostbite instance.
         */
        constructor();
        /**
         * Creates a new ValueSelectorEntry frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodePortGroup to ValueSelectorEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodePortGroup);
        /**
         * Casts an instance of type DataContainer to ValueSelectorEntry. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ValueSelectorEntry type.
         */
        static typeInfo: VUShared.TypeInformation;

        input: FB.AudioGraphNodePort;
        caseValue: number;

    }

    class ValueSelectorNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new ValueSelectorNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ValueSelectorNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to ValueSelectorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to ValueSelectorNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ValueSelectorNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputs: FB.ValueSelectorEntry[];
        value: FB.AudioGraphNodePort;
        out: FB.AudioGraphNodePort;
        defaultCaseValue: number;

    }

    class ValueUnlockAsset extends FB.UnlockAssetBase {

        /**
         * Creates a new ValueUnlockAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new ValueUnlockAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockAssetBase to ValueUnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockAssetBase);
        /**
         * Casts an instance of type Asset to ValueUnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to ValueUnlockAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ValueUnlockAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockValues: FB.UnlockValuePair[];

    }

    class VaultWaypointData extends FB.AbstractLocoWaypointData {

        /**
         * Creates a new VaultWaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VaultWaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AbstractLocoWaypointData to VaultWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AbstractLocoWaypointData);
        /**
         * Casts an instance of type WaypointData to VaultWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WaypointData);
        /**
         * Casts an instance of type DataContainer to VaultWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VaultWaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vaultTask: FB.AILocoVaultTaskData;

    }

    class Vec2PropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new Vec2PropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec2PropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to Vec2PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to Vec2PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to Vec2PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec2PropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.Vec2[];

    }

    class Vec2RecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new Vec2RecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec2RecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to Vec2RecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to Vec2RecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec2RecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.Vec2[];

    }

    class Vec3EntityData extends FB.EntityData {

        /**
         * Creates a new Vec3EntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec3EntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to Vec3EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to Vec3EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to Vec3EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to Vec3EntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec3EntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        defaultValue: VUShared.Vec3;
        realm: FB.Realm;

    }

    export enum Vec3MathOp {
        Vec3MathOp_Add = 0,
        Vec3MathOp_Subtract = 1,
        Vec3MathOp_Multiply = 2,
        Vec3MathOp_Divide = 3,
        Vec3MathOp_Min = 4,
        Vec3MathOp_Max = 5,
        Vec3MathOp_Dot = 6,
        Vec3MathOp_Len = 7,
        Vec3MathOp_LenSq = 8,
        Vec3MathOp_Cross = 9,
        Vec3MathOp_Norm = 10,
    }
    class Vec3MathOpEntityData extends FB.EntityData {

        /**
         * Creates a new Vec3MathOpEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec3MathOpEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to Vec3MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to Vec3MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to Vec3MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to Vec3MathOpEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec3MathOpEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        operators: FB.Vec3MathOp[];

    }

    class Vec3PropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new Vec3PropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec3PropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to Vec3PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to Vec3PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to Vec3PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec3PropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.Vec3[];

    }

    class Vec3RecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new Vec3RecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec3RecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to Vec3RecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to Vec3RecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec3RecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.Vec3[];

    }

    class Vec4PropertyTrackData extends FB.SimplePropertyTrackData {

        /**
         * Creates a new Vec4PropertyTrackData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec4PropertyTrackData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SimplePropertyTrackData to Vec4PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SimplePropertyTrackData);
        /**
         * Casts an instance of type PropertyTrackData to Vec4PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyTrackData);
        /**
         * Casts an instance of type DataContainer to Vec4PropertyTrackData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec4PropertyTrackData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.Vec4[];

    }

    class Vec4RecordingData extends FB.PropertyRecordingData {

        /**
         * Creates a new Vec4RecordingData frostbite instance.
         */
        constructor();
        /**
         * Creates a new Vec4RecordingData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PropertyRecordingData to Vec4RecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PropertyRecordingData);
        /**
         * Casts an instance of type DataContainer to Vec4RecordingData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the Vec4RecordingData type.
         */
        static typeInfo: VUShared.TypeInformation;

        values: VUShared.Vec4[];

    }

    class VecSplitterEntityData extends FB.EntityData {

        /**
         * Creates a new VecSplitterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VecSplitterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to VecSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VecSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VecSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VecSplitterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VecSplitterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vec3: VUShared.Vec3;
        vec4: VUShared.Vec4;
        realm: FB.Realm;

    }

    class VectorArrayShaderParameter {

        /**
         * Creates a new VectorArrayShaderParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new VectorArrayShaderParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VectorArrayShaderParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

        parameterName: string;
        parameterType: FB.ShaderParameterType;
        values: VUShared.Vec4[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VectorArrayShaderParameter;

    }

    class VectorShaderParameter {

        /**
         * Creates a new VectorShaderParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new VectorShaderParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VectorShaderParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: VUShared.Vec4;
        parameterType: FB.ShaderParameterType;
        parameterName: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VectorShaderParameter;

    }

    class VectorShapeData extends FB.BaseShapeData {

        /**
         * Creates a new VectorShapeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VectorShapeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type BaseShapeData to VectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to VectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VectorShapeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        points: VUShared.Vec3[];
        normals: VUShared.Vec3[];
        tension: number;
        isClosed: boolean;
        allowRoll: boolean;

    }

    class VegetationBaseEntityData extends FB.GameEntityData {

        /**
         * Creates a new VegetationBaseEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VegetationBaseEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to VegetationBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VegetationBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VegetationBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VegetationBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VegetationBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VegetationBaseEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VegetationBaseEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        basePoseTransforms: VUShared.LinearTransform[];
        basePoseTranslations: VUShared.Vec3[];
        hierarchy: number[];
        mesh: FB.SkinnedMeshAsset | undefined;
        shadowMesh: FB.SkinnedMeshAsset | undefined;
        physicsData: FB.PhysicsEntityData | undefined;

    }

    class VegetationSystemSettings extends VUShared.DataContainer {

        /**
         * Creates a new VegetationSystemSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new VegetationSystemSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VegetationSystemSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VegetationSystemSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        windVariation: number;
        windVariationRate: number;
        windStrength: number;
        jointTensionLimit: number;
        forceShadowLod: number;
        maxPreSimsPerJob: number;
        simulationMemKbClient: number;
        maxActiveDistance: number;
        simulationMemKbServer: number;
        jobCount: number;
        jointTensionLimitIndex: number;
        timeScale: number;
        localInfluencesEnabled: boolean;
        subDestructionEnabled: boolean;
        dissolveEnable: boolean;
        enable: boolean;
        simulateServerSide: boolean;
        enableJobs: boolean;
        shadowMeshEnable: boolean;
        drawNodes: boolean;
        drawEnable: boolean;
        batchDrawEnable: boolean;
        destructionEnabled: boolean;
        useShadowLodOffset: boolean;

    }

    class VegetationTreeEntityData extends FB.VegetationBaseEntityData {

        /**
         * Creates a new VegetationTreeEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VegetationTreeEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VegetationBaseEntityData to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VegetationBaseEntityData);
        /**
         * Casts an instance of type GameEntityData to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VegetationTreeEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VegetationTreeEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        groundImpactEffect: FB.EffectBlueprint | undefined;
        stemRipEffect: FB.EffectBlueprint | undefined;
        stemPhysicsWidth: number;
        coliPlaneDepth: number;
        stemHitpoints: number;
        branchHitpoints: number;
        branchL2Hitpoints: number;
        stemStiffness: number;
        stemStiffnessSpread: number;
        branchStiffness: number;
        branchStiffnessL2: number;
        stemBoneCount: number;
        windStem: number;
        windBranch: number;
        windBranchL2: number;
        treeFallEffect: FB.EffectBlueprint | undefined;
        breakableJointThreshold: number;
        fallDirectionEnd: number;
        localWindEffect: FB.EffectBlueprint | undefined;
        impactThreshold: number;
        collisionImpactMultiplier: number;
        fallDirectionStart: number;
        splashDistantEffect: FB.EffectBlueprint | undefined;
        bulletImpactEffect: FB.EffectBlueprint | undefined;
        partsTimeToLive: number;
        shadowLODOffset: number;
        splashNearEffect: FB.EffectBlueprint | undefined;
        collisionEffect: FB.EffectBlueprint | undefined;
        forceFullSim: boolean;
        useImpactThreshold: boolean;
        usePhysicsShapes: boolean;
        constraintStemB1: boolean;
        constraintStemB2: boolean;
        clientSideOnly: boolean;

    }

    class VehicleAsset extends FB.VehicleBlueprint {

        /**
         * Creates a new VehicleAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VehicleBlueprint to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VehicleBlueprint);
        /**
         * Casts an instance of type ObjectBlueprint to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VehicleAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VehicleBlueprint extends FB.ObjectBlueprint {

        /**
         * Creates a new VehicleBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ObjectBlueprint to VehicleBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to VehicleBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to VehicleBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to VehicleBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to VehicleBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VehicleBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VehicleCameraControlBinding {

        /**
         * Creates a new VehicleCameraControlBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleCameraControlBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleCameraControlBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        enableAnimatedVehicleCamera: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleCameraControlBinding;

    }

    class VehicleCameraData extends FB.TargetCameraData {

        /**
         * Creates a new VehicleCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TargetCameraData to VehicleCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetCameraData);
        /**
         * Casts an instance of type CameraData to VehicleCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to VehicleCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        moveToPosition: VUShared.Vec3;
        moveToPositionSlopeFactor: VUShared.Vec3;
        targetOffset: VUShared.Vec3;
        targetOffsetSlopeFactor: VUShared.Vec3;
        rotationFactor: VUShared.Vec3;
        positionFactor: number;
        resetDistance: number;
        fixedPosition: boolean;
        fixedAngleZ: boolean;
        useTerrainAdjustment: boolean;

    }

    export enum VehicleCategory {
        VehicleCategory_Land = 0,
        VehicleCategory_Air = 1,
    }
    class VehicleComponentData extends FB.ChassisComponentData {

        /**
         * Creates a new VehicleComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ChassisComponentData to VehicleComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ChassisComponentData);
        /**
         * Casts an instance of type PartComponentData to VehicleComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to VehicleComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to VehicleComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VehicleConfigData extends VUShared.DataContainer {

        /**
         * Creates a new VehicleConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VehicleConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        centerOfMass: VUShared.Vec3;
        centerOfMassHandlingOffset: VUShared.Vec3;
        inertiaModifier: VUShared.Vec3;
        aeroDynamicPhysics: FB.AeroDynamicPhysicsData | undefined;
        parachutePhysics: FB.VehicleParachuteData | undefined;
        motorbikePhysics: FB.MotorbikeData | undefined;
        motionDamping: FB.MotionDampingData | undefined;
        input: FB.VehicleInputData;
        floatPhysics: FB.FloatPhysicsData | undefined;
        stabilizer: FB.StabilizerData | undefined;
        stabilizers: FB.StabilizerSettings[];
        constantForce: FB.ConstantForceData[];
        vehicleModeAtReset: FB.VehicleMode;
        bodyMass: number;
        gravityModifier: number;
        yawMin: number;
        yawMax: number;
        downForceBaseFactor: number;
        downForceWheelFactor: number;
        vehicleModeChangeEnteringTime: number;
        vehicleModeChangeStartingTime: number;
        vehicleModeChangeStoppingTime: number;
        vehicleModeChangeLeavingTime: number;
        standStillLowSpeedTimeLimit: number;
        staticFrictionBreakCollisionMod: number;
        staticFrictionBreakVelocityMod: number;
        coefficientOfAirFriction: number;
        airDensity: number;
        airDragArea: number;
        windResistanceBaseFactor: number;
        windResistanceVelocityFactor: number;
        windResistanceVelocityFactorMin: number;
        windResistanceVelocityFactorMax: number;
        antiRollBars: FB.AntiRollBars;
        useDownForceWheelFactor: boolean;
        useGearbox: boolean;
        useStandStillBrake: boolean;
        useStandStillSleep: boolean;
        useTurnAroundForce: boolean;
        useMotorcycleControl: boolean;
        invertPitchAllowed: boolean;
        useWindResistance: boolean;
        useDownForce: boolean;

    }

    class VehicleCustomizationAsset extends FB.Asset {

        /**
         * Creates a new VehicleCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VehicleCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VehicleCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        customization: FB.CustomizationTable | undefined;

    }

    class VehicleDeployWeaponData extends FB.WeaponData {

        /**
         * Creates a new VehicleDeployWeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleDeployWeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponData to VehicleDeployWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponData);
        /**
         * Casts an instance of type ToolData to VehicleDeployWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to VehicleDeployWeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleDeployWeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        deployAreaRadius: number;
        previewObject: FB.ObjectBlueprint | undefined;
        deployAreaGroundRayLength: number;
        deployAreaGroundFlatness: number;
        usePreview: boolean;
        checkClearSky: boolean;
        canRemoteEnterVehicle: boolean;

    }

    class VehicleEntityData extends FB.ControllableEntityData {

        /**
         * Creates a new VehicleEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ControllableEntityData to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ControllableEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        criticallyDamagedEffectPosition: VUShared.Vec3;
        flirKeyColor: VUShared.Vec3;
        preExplosionEffectPosition: VUShared.Vec3;
        interactionOffset: VUShared.Vec3;
        disabledDamageThreshold: number;
        controllableType: string;
        preDestructionDamageThreshold: number;
        rearHealthZone: FB.VehicleHealthZoneData;
        leftHealthZone: FB.VehicleHealthZoneData;
        rightHealthZone: FB.VehicleHealthZoneData;
        minSpeedForMineActivation: number;
        frontHealthZone: FB.VehicleHealthZoneData;
        upsideDownDamage: number;
        waterDamageOffset: number;
        armorMultiplier: number;
        regenerationDelayMultiplier: number;
        regenerationRateMultiplier: number;
        emergencyRepairHealth: number;
        decayDelay: number;
        decayRate: number;
        belowWaterDamageDelay: number;
        criticallyDamagedEffect: FB.EffectBlueprint | undefined;
        regenerationRate: number;
        criticalDamageTime: number;
        preExplosionEffect: FB.EffectBlueprint | undefined;
        regenerationDelay: number;
        preExplosionTime: number;
        explosion: FB.ExplosionEntityData | undefined;
        mesh: FB.CompositeMeshAsset | undefined;
        cockpitMesh: FB.ObjectBlueprint | undefined;
        velocityDamageMagnifier: number;
        exitSpeedThreshold: number;
        hudData: FB.VehicleHudData;
        nameSid: string;
        maxPlayersInVehicle: number;
        nametagHeightScale: number;
        sound: FB.VehicleSoundData | undefined;
        upsideDownDamageDelay: number;
        upsideDownAngle: number;
        waterDamage: number;
        lockingTimeMultiplier: number;
        nametagHeightOffset: number;
        highAltitudeLockHeight: number;
        velocityDamageThreshold: number;
        voiceOverInfo: FB.EntityVoiceOverInfo | undefined;
        exitCameraSwitchDelay: number;
        killSoldierCollisionSpeedThreshold: number;
        exitDirectionSpeedThreshold: number;
        angleOfImpact: FB.AngleOfImpactData;
        vehicleLockableInfo: FB.VehicleLockableInfoData;
        flirValue: number;
        mpMode: FB.MPModeData;
        ignoreSoldierCollisionNormal: boolean;
        showPlayerHealth: boolean;
        foregroundRenderCockpitMesh: boolean;
        renderVehicleMesh: boolean;
        isAffectedByEMP: boolean;
        throwOutSoldierInsideOnWaterDamage: boolean;
        useAsTeamSpawner: boolean;
        isLockable: boolean;
        choseExitPointByDirection: boolean;
        healthZonesShareDamage: boolean;
        neverReportVehicleAsEmpty: boolean;
        exitAllowed: boolean;
        useLowAltitudeHeatSignature: boolean;
        allowVehicleOutsideCombatAreas: boolean;
        enableGroundmapLighting: boolean;
        motionBlurMask: boolean;
        useProtectedShields: boolean;
        useDriverEyePosForNametagPos: boolean;
        equipmentFakeVehicle: boolean;
        explosionPacksAttachable: boolean;

    }

    class VehicleEntryListenerBinding {

        /**
         * Creates a new VehicleEntryListenerBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleEntryListenerBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleEntryListenerBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        inVehicle: FB.AntRef;
        inOpenEntry: FB.AntRef;
        vehicleEntryFire: FB.AntRef;
        vehicleEntryYaw: FB.AntRef;
        vehicleEntryPitch: FB.AntRef;
        vehicleEntryRoll: FB.AntRef;
        vehicleEntryRotation: FB.AntRef;
        vehicleEntryForceX: FB.AntRef;
        vehicleEntryForceY: FB.AntRef;
        vehicleEntryForceZ: FB.AntRef;
        vehicleEntryIndex: FB.AntRef;
        vehicleEntryIndexUpdated: FB.AntRef;
        vehicleOpenEntryIndex: FB.AntRef;
        inVehicleRetrigger: FB.AntRef;
        vehicleEntryChooserIndex: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleEntryListenerBinding;

    }

    class VehicleEntryListenerComponentData extends FB.ComponentData {

        /**
         * Creates a new VehicleEntryListenerComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleEntryListenerComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to VehicleEntryListenerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to VehicleEntryListenerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleEntryListenerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleEntryListenerComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleEntryListenerComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicleEntryListener: FB.VehicleEntryListenerBinding;
        vehicleCameraControl: FB.VehicleCameraControlBinding;
        animationEntitySpacePriority: number;
        animationWheelTransformDelay: number;

    }

    class VehicleExitPointComponentData extends FB.ComponentData {

        /**
         * Creates a new VehicleExitPointComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleExitPointComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to VehicleExitPointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to VehicleExitPointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleExitPointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleExitPointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleExitPointComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        impulse: VUShared.Vec3;
        terrainHeight: number;
        ordinal: number;
        velocity: number;
        inheritCameraDirection: boolean;
        checkForVehicleOverrun: boolean;

    }

    class VehicleHealthZoneData {

        /**
         * Creates a new VehicleHealthZoneData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleHealthZoneData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleHealthZoneData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxHealth: number;
        maxShieldHealth: number;
        damageAngleMultiplier: number;
        minDamageAngle: number;
        useDamageAngleCalculation: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleHealthZoneData;

    }

    class VehicleHudData {

        /**
         * Creates a new VehicleHudData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleHudData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleHudData type.
         */
        static typeInfo: VUShared.TypeInformation;

        customizationOffset: VUShared.Vec3;
        customization: FB.VehicleCustomizationAsset | undefined;
        minimapIcon: FB.UIHudIcon;
        texture: FB.TextureAsset | undefined;
        vehicleItemHash: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleHudData;

    }

    export enum VehicleHudType {
        VehicleHudType_Car = 0,
        VehicleHudType_Tank = 1,
        VehicleHudType_Boat = 2,
        VehicleHudType_Helicopter = 3,
        VehicleHudType_Stationary = 4,
        VehicleHudType_Strategic = 5,
        VehicleHudType_Dummy = 6,
        VehicleHudType_Count = 7,
    }
    class VehicleInputData {

        /**
         * Creates a new VehicleInputData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleInputData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleInputData type.
         */
        static typeInfo: VUShared.TypeInformation;

        throttleDeadzone: number;
        brakeDeadzone: number;
        yawDeadzone: number;
        pitchDeadzone: number;
        rollDeadzone: number;
        throttleInertiaOutDuration: number;
        throttleInertiaInDuration: number;
        throttleInertiaMinRatio: number;
        brakeInertiaOutDuration: number;
        brakeInertiaInDuration: number;
        brakeInertiaMinRatio: number;
        yawInertiaOutDuration: number;
        yawInertiaInDuration: number;
        yawInertiaMinRatio: number;
        pitchInertiaOutDuration: number;
        pitchInertiaInDuration: number;
        pitchInertiaMinRatio: number;
        rollInertiaOutDuration: number;
        rollInertiaInDuration: number;
        rollInertiaMinRatio: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleInputData;

    }

    class VehicleInputTweakData extends VUShared.DataContainer {

        /**
         * Creates a new VehicleInputTweakData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleInputTweakData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VehicleInputTweakData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleInputTweakData type.
         */
        static typeInfo: VUShared.TypeInformation;

        inputTweakType: FB.VehicleInputTweakType;
        minSpeed: number;
        maxSpeed: number;
        minSpeedScale: number;
        maxSpeedScale: number;

    }

    export enum VehicleInputTweakType {
        CombinedTimedSpeedTweakType = 0,
        CombinedSpeedTweakType = 1,
        SpeedTweakType = 2,
        ScaledSpeedTweakType = 3,
    }
    class VehicleLockableInfoData {

        /**
         * Creates a new VehicleLockableInfoData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleLockableInfoData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleLockableInfoData type.
         */
        static typeInfo: VUShared.TypeInformation;

        heatSignature: number;
        radarSignature: number;
        lowAltitudeHeight: number;
        lowAltitudeHeatSignature: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleLockableInfoData;

    }

    export enum VehicleMode {
        VmIdle = 0,
        VmEntering = 1,
        VmEntered = 2,
        VmStarting = 3,
        VmStarted = 4,
        VmStopping = 5,
        VmLeaving = 6,
    }
    class VehicleParachuteBinding {

        /**
         * Creates a new VehicleParachuteBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleParachuteBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleParachuteBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        enabled: FB.AntRef;
        vehicleType: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleParachuteBinding;

    }

    class VehicleParachuteComponentData extends FB.ComponentData {

        /**
         * Creates a new VehicleParachuteComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleParachuteComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to VehicleParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to VehicleParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleParachuteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleParachuteComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.VehicleParachuteBinding;
        undeployTime: number;
        timeInvisibleAfterSpawn: number;
        vehicleType: number;
        dropParachuteOnUndeploy: boolean;

    }

    class VehicleParachuteData extends VUShared.DataContainer {

        /**
         * Creates a new VehicleParachuteData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleParachuteData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VehicleParachuteData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleParachuteData type.
         */
        static typeInfo: VUShared.TypeInformation;

        terminalVelocity: number;
        freefallGravityMultiplier: number;
        dragCoefficient: number;
        maxRollVelocity: number;
        maxPitchVelocity: number;
        maxYawVelocity: number;
        deployTime: number;
        undeployGroundHeight: number;
        angularDescentDamping: number;
        angularDeployDamping: number;
        deployPhysicsStart: number;
        deployInitialDragStart: number;
        initialDragStartVelocityScale: number;
        initialDragAngularVelocityPitch: number;
        initialDragRandomAngularVelocityRollMax: number;
        rampLength: number;

    }

    class VehicleProjectileEntityData extends FB.ProjectileEntityData {

        /**
         * Creates a new VehicleProjectileEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleProjectileEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ProjectileEntityData to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ProjectileEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleProjectileEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleProjectileEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicle: FB.VehicleBlueprint | undefined;
        enterDelay: number;
        noVehicleCollisionTime: number;
        alignWithGroundRayLength: number;
        autoEnter: boolean;
        alignWithGround: boolean;
        checkGroundWhenSpawned: boolean;
        deployInsideNeutralCombatAreaOnly: boolean;

    }

    class VehicleSoundData extends VUShared.DataContainer {

        /**
         * Creates a new VehicleSoundData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleSoundData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VehicleSoundData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleSoundData type.
         */
        static typeInfo: VUShared.TypeInformation;

        bulletImpact: FB.SoundAsset | undefined;

    }

    class VehicleSpawnReferenceObjectData extends FB.SpawnReferenceObjectData {

        /**
         * Creates a new VehicleSpawnReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleSpawnReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpawnReferenceObjectData to VehicleSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpawnReferenceObjectData);
        /**
         * Casts an instance of type ReferenceObjectData to VehicleSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to VehicleSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleSpawnReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleSpawnReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        airDropCarrierTransform: VUShared.LinearTransform;
        timeUntilAbandoned: number;
        timeUntilAbandonedIsDestroyed: number;
        enterRestriction: FB.EntryEnterRestriction;
        botBailWhenHealthBelow: number;
        botBailOutDelay: number;
        wreckDuration: number;
        respawnRange: number;
        activeStanceEntryIndex: number;
        activeStance: number;
        keepAliveRadius: number;
        vehicleIsNearDistance: number;
        setTeamOnSpawn: boolean;
        applyDamageToAbandonedVehicles: boolean;
        enableAvailableSeatOutput: boolean;
        disregardSpawnAllowedSetting: boolean;
        affectedByImpulse: boolean;

    }

    class VehicleSpawnStateEntityData extends FB.EntityData {

        /**
         * Creates a new VehicleSpawnStateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleSpawnStateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to VehicleSpawnStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VehicleSpawnStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleSpawnStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleSpawnStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleSpawnStateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialVelocity: VUShared.Vec3;
        startupDelayModifier: number;
        initialThrottle: number;
        engineIndex: number;
        initialRpmModifier: number;
        heightOffset: number;
        radius: number;

    }

    class VehicleState extends FB.MetricState {

        /**
         * Creates a new VehicleState frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleState frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MetricState to VehicleState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricState);
        /**
         * Casts an instance of type MetricEvent to VehicleState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MetricEvent);
        /**
         * Casts an instance of type DataContainer to VehicleState. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleState type.
         */
        static typeInfo: VUShared.TypeInformation;

        vehicleName: string;

    }

    class VehicleStateTriggerEntityData extends FB.TriggerEntityData {

        /**
         * Creates a new VehicleStateTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleStateTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type TriggerEntityData to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TriggerEntityData);
        /**
         * Casts an instance of type GameEntityData to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VehicleStateTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleStateTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lockAmount: number;
        bulletCount: number;
        healthToSet: number;
        seatSpecificIndexForHuman: number;
        seatSpecificIndexForAi: number;
        destructionRadius: number;
        healthToCheck: number;
        allowHumanToEnterAllSeats: boolean;
        allowAiToEnterAllSeats: boolean;
        banAiFromSpecificSeat: boolean;
        triggerCriticalOnHealthSet: boolean;
        checkHealthGreaterOrEqual: boolean;
        restrictHumanToSpecificSeat: boolean;
        shouldDestroyVehicles: boolean;
        shouldDestroyBangers: boolean;

    }

    export enum VehicleStateType {
        VehicleStateType_Normal = 0,
        VehicleStateType_LowHealth = 1,
        VehicleStateType_CriticalState = 2,
        VehicleStateType_LAST_ITEM = 3,
    }
    class VehicleTrackerRenderTargetData {

        /**
         * Creates a new VehicleTrackerRenderTargetData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleTrackerRenderTargetData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VehicleTrackerRenderTargetData type.
         */
        static typeInfo: VUShared.TypeInformation;

        positionOffset: VUShared.Vec2;
        renderTargetIndex: number;
        renderTargetApectRatio: number;
        scaleSize: number;
        useRenderTarget: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VehicleTrackerRenderTargetData;

    }

    class VehicleVisualCustomizationAsset extends FB.Asset {

        /**
         * Creates a new VehicleVisualCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleVisualCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VehicleVisualCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VehicleVisualCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleVisualCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        textureUnlockPartCollections: FB.ShaderTextureUnlockPartCollection[];
        textUnlockParts: FB.TextUnlockPartData[];

    }

    class VehicleWaterEffectData extends VUShared.DataContainer {

        /**
         * Creates a new VehicleWaterEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleWaterEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VehicleWaterEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleWaterEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        position: VUShared.Vec3;
        effect: FB.EffectBlueprint | undefined;

    }

    class VehicleWaypointData extends FB.WaypointData {

        /**
         * Creates a new VehicleWaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VehicleWaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WaypointData to VehicleWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WaypointData);
        /**
         * Casts an instance of type DataContainer to VehicleWaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VehicleWaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        speed: number;
        speedOverrideMovingTowards: number;
        angleoffset: number;
        stopHereRadius: number;
        stoppingDeceleration: number;
        minSlowdownSpeed: number;
        stopHere: boolean;

    }

    class VeniceCombatAreaCamera extends VUShared.DataContainer {

        /**
         * Creates a new VeniceCombatAreaCamera frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceCombatAreaCamera frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VeniceCombatAreaCamera. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceCombatAreaCamera type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VeniceExplosionEntityData extends FB.ExplosionEntityData {

        /**
         * Creates a new VeniceExplosionEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceExplosionEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ExplosionEntityData to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ExplosionEntityData);
        /**
         * Casts an instance of type GameEntityData to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VeniceExplosionEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceExplosionEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        unspottableTime: number;
        unspotsOnExplode: boolean;
        spotsOnExplode: boolean;
        isCausingSuppression: boolean;

    }

    class VeniceFPSCameraData extends FB.FPSCameraData {

        /**
         * Creates a new VeniceFPSCameraData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceFPSCameraData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type FPSCameraData to VeniceFPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.FPSCameraData);
        /**
         * Casts an instance of type TargetCameraData to VeniceFPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.TargetCameraData);
        /**
         * Casts an instance of type CameraData to VeniceFPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CameraData);
        /**
         * Casts an instance of type GameObjectData to VeniceFPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VeniceFPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VeniceFPSCameraData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceFPSCameraData type.
         */
        static typeInfo: VUShared.TypeInformation;

        suppressionBlurAmountMultiplier: number;
        suppressionBlurSizeMultiplier: number;

    }

    class VeniceGameplayLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new VeniceGameplayLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceGameplayLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to VeniceGameplayLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to VeniceGameplayLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceGameplayLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        allowParachuteFromMobileSpawnpoint: boolean;

    }

    class VeniceHudConfigAsset extends VUShared.DataContainer {

        /**
         * Creates a new VeniceHudConfigAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceHudConfigAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VeniceHudConfigAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceHudConfigAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        ammoPickupSound: FB.SoundWaveAsset | undefined;
        weaponPickupSound: FB.SoundWaveAsset | undefined;
        newObjectiveSound: FB.SoundWaveAsset | undefined;
        objectiveCompletedSound: FB.SoundWaveAsset | undefined;
        objectiveUpdatedSound: FB.SoundWaveAsset | undefined;
        mpVictorySoundMec: FB.SoundWaveAsset | undefined;
        mpVictorySoundUs: FB.SoundWaveAsset | undefined;
        mpVictorySoundRu: FB.SoundWaveAsset | undefined;
        mpDefeatSoundMec: FB.SoundWaveAsset | undefined;
        mpDefeatSoundUs: FB.SoundWaveAsset | undefined;
        mpDefeatSoundRu: FB.SoundWaveAsset | undefined;
        artilleryAiming: FB.SoundWaveAsset | undefined;
        artilleryAimingOOA: FB.SoundWaveAsset | undefined;
        mortarStrikeLocking: FB.SoundWaveAsset | undefined;
        laserDesignatorLocked: FB.SoundWaveAsset | undefined;
        laserDesignatorLocking: FB.SoundWaveAsset | undefined;
        nametags: FB.UINametag[];
        spawnScreenWeapons: FB.SpawnScreenWeaponData[];
        maxOrderIconDistance: number;
        innerNametagRadius: number;
        outerNametagRadius: number;
        criticalHealthThreshold: number;
        taggedVehicleCrosshair: FB.UITaggedVehicleCrosshair;
        minimap: FB.UIMinimapConfig;
        showSpawnPointsOnMinimap: boolean;
        nametagHealthVisibleForAll: boolean;

    }

    class VeniceMapMarkerHudData extends VUShared.DataContainer {

        /**
         * Creates a new VeniceMapMarkerHudData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceMapMarkerHudData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VeniceMapMarkerHudData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceMapMarkerHudData type.
         */
        static typeInfo: VUShared.TypeInformation;

        icon: FB.UIHudIcon;

    }

    class VeniceMatchmakingLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new VeniceMatchmakingLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceMatchmakingLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to VeniceMatchmakingLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to VeniceMatchmakingLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceMatchmakingLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        mod: string;
        licenses: string[];

    }

    class VeniceMissionObjectiveHudData extends FB.MissionObjectiveHudData {

        /**
         * Creates a new VeniceMissionObjectiveHudData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceMissionObjectiveHudData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type MissionObjectiveHudData to VeniceMissionObjectiveHudData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.MissionObjectiveHudData);
        /**
         * Casts an instance of type DataContainer to VeniceMissionObjectiveHudData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceMissionObjectiveHudData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum VeniceNetworkUnlockGainedType {
        VeniceNetworkUnlockGainedType_Bucket = 0,
        VeniceNetworkUnlockGainedType_Rank = 1,
        VeniceNetworkUnlockGainedType_Weapon = 2,
        VeniceNetworkUnlockGainedType_Award = 3,
    }
    class VeniceOnlineConfiguration extends FB.OnlineConfiguration {

        /**
         * Creates a new VeniceOnlineConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceOnlineConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type OnlineConfiguration to VeniceOnlineConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.OnlineConfiguration);
        /**
         * Casts an instance of type Asset to VeniceOnlineConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceOnlineConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceOnlineConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        platforms: FB.OnlinePlatformConfiguration[];
        entitlementQueries: FB.EntitlementQuery[];
        useFallback: boolean;

    }

    class VeniceOnlineSettings extends FB.SystemSettings {

        /**
         * Creates a new VeniceOnlineSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceOnlineSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to VeniceOnlineSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to VeniceOnlineSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceOnlineSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        webFeedMaxFetchAttempts: number;
        platforms: FB.OnlinePlatformConfiguration[];
        serviceNameOverride: string;
        clientGameConfigurationOverride: string;
        blazeLogLevel: number;
        dirtySockLogLevel: number;
        battlelogReportURL: string;
        entitlementQueries: FB.EntitlementQuery[];
        webFeedUrlPrefix: string;
        snowrollerOrphanTimeout: number;
        queueCapacityOverride: number;
        webFeedCountUrlPrefix: string;
        matchFeedMaxFetchAttempts: number;
        dogTagUploadPolicy: FB.DTagUploadPolicy;
        webFeedUnreadCountFetchPeriod: number;
        matchImagesUrlPrefix: string;
        webFeedMaxItems: number;
        webFeedMinimumMillisecondsBetweenRequests: number;
        webFeedMillisecondsBetweenNewRequestAttempt: number;
        matchFeedMinimumMillisecondsBetweenRequests: number;
        matchFeedMinimumMillisecondsBetweenMatchRequests: number;
        pingPeriod: number;
        matchFeedMinimumMillisecondsBetweenNewRequestAttempt: number;
        matchFeedDetailsUrlPrefix: string;
        matchFeedListUrlPrefix: string;
        matchFeedMinimumMillisecondsBetweenMatchReloads: number;
        enableSnowroller: boolean;
        enableQoS: boolean;
        punkBusterActivateClient: boolean;
        punkBusterActivateServer: boolean;
        battlelogReport: boolean;
        useFallback: boolean;

    }

    class VeniceRichPresenceLevelDescriptionComponent extends FB.LevelDescriptionComponent {

        /**
         * Creates a new VeniceRichPresenceLevelDescriptionComponent frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceRichPresenceLevelDescriptionComponent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type LevelDescriptionComponent to VeniceRichPresenceLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.LevelDescriptionComponent);
        /**
         * Casts an instance of type DataContainer to VeniceRichPresenceLevelDescriptionComponent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceRichPresenceLevelDescriptionComponent type.
         */
        static typeInfo: VUShared.TypeInformation;

        presenceMode: FB.RichPresencePresenceString | undefined;
        contextValues: FB.RichPresenceContextSetting[];

    }

    class VeniceSoldierCustomizationAsset extends FB.SoldierCustomizationAsset {

        /**
         * Creates a new VeniceSoldierCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceSoldierCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoldierCustomizationAsset to VeniceSoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoldierCustomizationAsset);
        /**
         * Casts an instance of type CharacterCustomizationAsset to VeniceSoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.CharacterCustomizationAsset);
        /**
         * Casts an instance of type Asset to VeniceSoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceSoldierCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceSoldierCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VeniceSoldierHealthModuleData extends FB.SoldierHealthModuleData {

        /**
         * Creates a new VeniceSoldierHealthModuleData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceSoldierHealthModuleData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoldierHealthModuleData to VeniceSoldierHealthModuleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoldierHealthModuleData);
        /**
         * Casts an instance of type DataContainer to VeniceSoldierHealthModuleData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceSoldierHealthModuleData type.
         */
        static typeInfo: VUShared.TypeInformation;

        timeForCorpse: number;
        postReviveResponseTime: number;
        interactiveManDownThreshold: number;
        interactiveManDownPoseConstraints: FB.PoseConstraintsData;
        manDownStateTime: number;
        manDownStateHealthPoints: number;
        immortalTimeAfterSpawn: number;
        abortSpawnImmortalityInputs: FB.EntryInputActionEnum[];
        postReviveHealth: number;
        criticalFakeImmortalTime: number;
        regenerationDelay: number;
        regenerationRate: number;
        binding: FB.SoldierHealthModuleBinding;
        sprintDisabledWhenDamagedTime: number;
        sprintDisabledDamageThreshold: number;
        manDownRotate: FB.RotateToHitData;
        interactiveManDown: boolean;

    }

    class VeniceSoldierWeaponCustomizationAsset extends FB.SoldierWeaponCustomizationAsset {

        /**
         * Creates a new VeniceSoldierWeaponCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceSoldierWeaponCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SoldierWeaponCustomizationAsset to VeniceSoldierWeaponCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SoldierWeaponCustomizationAsset);
        /**
         * Casts an instance of type Asset to VeniceSoldierWeaponCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceSoldierWeaponCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceSoldierWeaponCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VeniceUICombatAreaAsset extends FB.UICombatAreaAsset {

        /**
         * Creates a new VeniceUICombatAreaAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceUICombatAreaAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UICombatAreaAsset to VeniceUICombatAreaAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UICombatAreaAsset);
        /**
         * Casts an instance of type Asset to VeniceUICombatAreaAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceUICombatAreaAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceUICombatAreaAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        distanceField: FB.UIDistanceFieldAsset | undefined;
        surroundingDistanceField: FB.UIDistanceFieldAsset | undefined;

    }

    class VeniceUIConfiguration extends FB.Asset {

        /**
         * Creates a new VeniceUIConfiguration frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceUIConfiguration frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VeniceUIConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceUIConfiguration. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceUIConfiguration type.
         */
        static typeInfo: VUShared.TypeInformation;

        metaDataAssetPath: string;

    }

    class VeniceUISettings extends FB.SystemSettings {

        /**
         * Creates a new VeniceUISettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceUISettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to VeniceUISettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to VeniceUISettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceUISettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        metaDataAssetPath: string;
        getStatsInOnlineFlow: boolean;

    }

    class VeniceUnlockUserData extends FB.UnlockUserDataBase {

        /**
         * Creates a new VeniceUnlockUserData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceUnlockUserData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UnlockUserDataBase to VeniceUnlockUserData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UnlockUserDataBase);
        /**
         * Casts an instance of type Asset to VeniceUnlockUserData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceUnlockUserData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceUnlockUserData type.
         */
        static typeInfo: VUShared.TypeInformation;

        checkSquad: boolean;

    }

    class VeniceVehicleCustomizationAsset extends FB.VehicleCustomizationAsset {

        /**
         * Creates a new VeniceVehicleCustomizationAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VeniceVehicleCustomizationAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VehicleCustomizationAsset to VeniceVehicleCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VehicleCustomizationAsset);
        /**
         * Casts an instance of type Asset to VeniceVehicleCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VeniceVehicleCustomizationAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VeniceVehicleCustomizationAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        category: FB.VehicleCategory;
        nameSid: string;

    }

    class VersionData extends FB.Asset {

        /**
         * Creates a new VersionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VersionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VersionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VersionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VersionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        disclaimer: string;
        version: number;
        dateTime: string;
        branchId: string;
        gameName: string;

    }

    export enum VertexElementClassification {
        VertexElementClassification_PerVertex = 0,
        VertexElementClassification_PerInstance = 1,
        VertexElementClassification_Index = 2,
    }
    export enum VertexElementFormat {
        VertexElementFormat_None = 0,
        VertexElementFormat_Float = 1,
        VertexElementFormat_Float2 = 2,
        VertexElementFormat_Float3 = 3,
        VertexElementFormat_Float4 = 4,
        VertexElementFormat_Half = 5,
        VertexElementFormat_Half2 = 6,
        VertexElementFormat_Half3 = 7,
        VertexElementFormat_Half4 = 8,
        VertexElementFormat_Byte4 = 10,
        VertexElementFormat_Byte4N = 11,
        VertexElementFormat_UByte4 = 12,
        VertexElementFormat_UByte4N = 13,
        VertexElementFormat_Short = 14,
        VertexElementFormat_Short2 = 15,
        VertexElementFormat_Short3 = 16,
        VertexElementFormat_Short4 = 17,
        VertexElementFormat_ShortN = 18,
        VertexElementFormat_Short2N = 19,
        VertexElementFormat_Short3N = 20,
        VertexElementFormat_Short4N = 21,
        VertexElementFormat_UShort2 = 22,
        VertexElementFormat_UShort4 = 23,
        VertexElementFormat_UShort2N = 24,
        VertexElementFormat_UShort4N = 25,
        VertexElementFormat_Int = 26,
        VertexElementFormat_Int2 = 27,
        VertexElementFormat_Int4 = 28,
        VertexElementFormat_IntN = 29,
        VertexElementFormat_Int2N = 30,
        VertexElementFormat_Int4N = 31,
        VertexElementFormat_UInt = 32,
        VertexElementFormat_UInt2 = 33,
        VertexElementFormat_UInt4 = 34,
        VertexElementFormat_UIntN = 35,
        VertexElementFormat_UInt2N = 36,
        VertexElementFormat_UInt4N = 37,
        VertexElementFormat_Comp3_10_10_10 = 38,
        VertexElementFormat_Comp3N_10_10_10 = 39,
        VertexElementFormat_UComp3_10_10_10 = 40,
        VertexElementFormat_UComp3N_10_10_10 = 41,
        VertexElementFormat_Comp3_11_11_10 = 42,
        VertexElementFormat_Comp3N_11_11_10 = 43,
        VertexElementFormat_UComp3_11_11_10 = 44,
        VertexElementFormat_UComp3N_11_11_10 = 45,
        VertexElementFormat_Comp4_10_10_10_2 = 46,
        VertexElementFormat_Comp4N_10_10_10_2 = 47,
        VertexElementFormat_UComp4_10_10_10_2 = 48,
        VertexElementFormat_UComp4N_10_10_10_2 = 49,
        VertexElementFormat_UByteN = 50,
        VertexElementFormat_Int3 = 51,
        VertexElementFormat_UInt3 = 52,
    }
    export enum VertexElementUsage {
        VertexElementUsage_Unknown = 0,
        VertexElementUsage_Pos = 1,
        VertexElementUsage_BoneIndices = 2,
        VertexElementUsage_BoneIndices2 = 3,
        VertexElementUsage_BoneWeights = 4,
        VertexElementUsage_BoneWeights2 = 5,
        VertexElementUsage_Normal = 6,
        VertexElementUsage_Tangent = 7,
        VertexElementUsage_Binormal = 8,
        VertexElementUsage_BinormalSign = 9,
        VertexElementUsage_WorldTrans1 = 10,
        VertexElementUsage_WorldTrans2 = 11,
        VertexElementUsage_WorldTrans3 = 12,
        VertexElementUsage_InstanceId = 13,
        VertexElementUsage_InstanceUserData0 = 14,
        VertexElementUsage_InstanceUserData1 = 15,
        VertexElementUsage_XenonIndex = 16,
        VertexElementUsage_XenonBarycentric = 17,
        VertexElementUsage_XenonQuadID = 18,
        VertexElementUsage_Index = 19,
        VertexElementUsage_ViewIndex = 20,
        VertexElementUsage_Color0 = 30,
        VertexElementUsage_Color1 = 31,
        VertexElementUsage_TexCoord0 = 33,
        VertexElementUsage_TexCoord1 = 34,
        VertexElementUsage_TexCoord2 = 35,
        VertexElementUsage_TexCoord3 = 36,
        VertexElementUsage_TexCoord4 = 37,
        VertexElementUsage_TexCoord5 = 38,
        VertexElementUsage_TexCoord6 = 39,
        VertexElementUsage_TexCoord7 = 40,
        VertexElementUsage_RadiosityTexCoord = 41,
        VertexElementUsage_VisInfo = 42,
        VertexElementUsage_SpriteSize = 43,
        VertexElementUsage_PackedTexCoord0 = 44,
        VertexElementUsage_PackedTexCoord1 = 45,
        VertexElementUsage_PackedTexCoord2 = 46,
        VertexElementUsage_PackedTexCoord3 = 47,
        VertexElementUsage_ClipDistance0 = 48,
        VertexElementUsage_ClipDistance1 = 49,
        VertexElementUsage_SubMaterialIndex = 50,
        VertexElementUsage_BranchInfo = 60,
        VertexElementUsage_PosAndScale = 61,
        VertexElementUsage_Rotation = 62,
        VertexElementUsage_SpriteSizeAndUv = 63,
        VertexElementUsage_FadePos = 90,
        VertexElementUsage_SpawnTime = 91,
        VertexElementUsage_PosAndSoftMul = 150,
        VertexElementUsage_Alpha = 151,
        VertexElementUsage_Misc0 = 152,
        VertexElementUsage_Misc1 = 153,
        VertexElementUsage_LeftAndRotation = 154,
        VertexElementUsage_UpAndNormalBlend = 155,
        VertexElementUsage_SH_R = 156,
        VertexElementUsage_SH_G = 157,
        VertexElementUsage_SH_B = 158,
        VertexElementUsage_PosAndRejectCulling = 159,
        VertexElementUsage_Shadow = 160,
        VertexElementUsage_PatchUv = 180,
        VertexElementUsage_Height = 181,
        VertexElementUsage_MaskUVs0 = 182,
        VertexElementUsage_MaskUVs1 = 183,
        VertexElementUsage_MaskUVs2 = 184,
        VertexElementUsage_MaskUVs3 = 185,
        VertexElementUsage_UserMasks = 186,
        VertexElementUsage_HeightfieldUv = 187,
        VertexElementUsage_MaskUv = 188,
        VertexElementUsage_GlobalColorUv = 189,
        VertexElementUsage_HeightfieldPixelSizeAndAspect = 190,
        VertexElementUsage_WorldPositionXz = 191,
        VertexElementUsage_TerrainTextureNodeUv = 192,
        VertexElementUsage_ParentTerrainTextureNodeUv = 193,
        VertexElementUsage_Uv01 = 210,
        VertexElementUsage_WorldPos = 211,
        VertexElementUsage_EyeVector = 212,
        VertexElementUsage_LightParams1 = 220,
        VertexElementUsage_LightParams2 = 221,
        VertexElementUsage_LightSubParams = 222,
        VertexElementUsage_LightSideVector = 223,
        VertexElementUsage_LightInnerAndOuterAngle = 224,
        VertexElementUsage_LightDir = 225,
        VertexElementUsage_LightMatrix1 = 226,
        VertexElementUsage_LightMatrix2 = 227,
        VertexElementUsage_LightMatrix3 = 228,
        VertexElementUsage_LightMatrix4 = 229,
        VertexElementUsage_Custom = 230,
    }
    export enum VertexNormalSpace {
        VnsObject = 0,
        VnsInstance = 1,
        VnsWorld = 2,
    }
    class ViewFxData extends VUShared.DataContainer {

        /**
         * Creates a new ViewFxData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ViewFxData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ViewFxData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ViewFxData type.
         */
        static typeInfo: VUShared.TypeInformation;

        poissonRadialBlur: FB.PoissonRadialBlurData;
        colorTint: FB.ColorTintData;
        blurAdd: number;
        colorTintEnable: boolean;
        poissonRadialBlurEnable: boolean;

    }

    class VignetteComponentData extends FB.ComponentData {

        /**
         * Creates a new VignetteComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VignetteComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to VignetteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to VignetteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VignetteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VignetteComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VignetteComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        scale: VUShared.Vec2;
        color: VUShared.Vec3;
        realm: FB.Realm;
        exponent: number;
        opacity: number;
        enable: boolean;

    }

    export enum VirtualGameState {
        VirtualGameState_Inactive = 0,
        VirtualGameState_Active = 1,
        VirtualGameState_Expired = 2,
        VirtualGameState_Recreate = 3,
        VirtualGameState_Updated = 4,
    }
    class VirtualRasterQuadtreeData extends FB.RasterQuadtreeData {

        /**
         * Creates a new VirtualRasterQuadtreeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VirtualRasterQuadtreeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type RasterQuadtreeData to VirtualRasterQuadtreeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.RasterQuadtreeData);
        /**
         * Casts an instance of type Asset to VirtualRasterQuadtreeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VirtualRasterQuadtreeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VirtualRasterQuadtreeData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VisionBoxSettings {

        /**
         * Creates a new VisionBoxSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisionBoxSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VisionBoxSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        decreaseXz: number;
        lowerTop: number;
        raiseBottom: number;
        raiseBottomHuman: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VisionBoxSettings;

    }

    class VisualEnvironmentBlueprint extends FB.ObjectBlueprint {

        /**
         * Creates a new VisualEnvironmentBlueprint frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualEnvironmentBlueprint frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ObjectBlueprint to VisualEnvironmentBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ObjectBlueprint);
        /**
         * Casts an instance of type Blueprint to VisualEnvironmentBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to VisualEnvironmentBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to VisualEnvironmentBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to VisualEnvironmentBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VisualEnvironmentBlueprint. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualEnvironmentBlueprint type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VisualEnvironmentEffectEntityData extends FB.EffectEntityData {

        /**
         * Creates a new VisualEnvironmentEffectEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualEnvironmentEffectEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EffectEntityData to VisualEnvironmentEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EffectEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VisualEnvironmentEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VisualEnvironmentEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VisualEnvironmentEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VisualEnvironmentEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VisualEnvironmentEffectEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualEnvironmentEffectEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lifetimeCurve: VUShared.Vec4;
        cullDistanceCurve: VUShared.Vec4;
        cullAngleCurve: VUShared.Vec4;
        lifetime: number;
        visualEnvironment: FB.VisualEnvironmentBlueprint | undefined;
        sampleOnStartOnly: boolean;

    }

    class VisualEnvironmentEntityData extends FB.GameEntityData {

        /**
         * Creates a new VisualEnvironmentEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualEnvironmentEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to VisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to VisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to VisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VisualEnvironmentEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualEnvironmentEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        visibility: number;
        priority: number;

    }

    class VisualEnvironmentReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new VisualEnvironmentReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualEnvironmentReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to VisualEnvironmentReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to VisualEnvironmentReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VisualEnvironmentReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VisualEnvironmentReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualEnvironmentReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        priority: number;
        overrideVisibility: boolean;

    }

    class VisualEnvironmentSettings extends VUShared.DataContainer {

        /**
         * Creates a new VisualEnvironmentSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualEnvironmentSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VisualEnvironmentSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualEnvironmentSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        sunRotationX: number;
        sunRotationY: number;
        drawStats: boolean;

    }

    class VisualTerrainEntityData extends FB.EntityData {

        /**
         * Creates a new VisualTerrainEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualTerrainEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to VisualTerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VisualTerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VisualTerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VisualTerrainEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualTerrainEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        terrain: FB.TerrainData | undefined;
        settings: FB.VisualTerrainSettings | undefined;

    }

    class VisualTerrainSettings extends VUShared.DataContainer {

        /**
         * Creates a new VisualTerrainSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualTerrainSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VisualTerrainSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualTerrainSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        debugOverlayBrushCoverageMin: VUShared.Vec2;
        renderMode: FB.TerrainRenderMode;
        meshScatteringInstanceCullJobCount: number;
        patchErrorFov: number;
        triangleSizeMin: number;
        lodScale: number;
        lodCenterExtrapolationDistanceMax: number;
        lodCenterExtrapolationTime: number;
        meshScatteringDensityScaleFactor: number;
        dxTessellatedTriWidth: number;
        dxTessellationPatchShrink: number;
        dxTessellationPatchFacesPerSide: number;
        zPassDistance: number;
        debugOverlayGridSize: number;
        textureAtlasSampleCountXFactor: number;
        textureAtlasSampleCountYFactor: number;
        textureSamplesPerMeterMax: number;
        textureDetailFalloffFactor: number;
        textureDetailFalloffDistance: number;
        textureDetailFalloffCurve: number;
        textureInvisibleDetailReductionFactor: number;
        textureOccludedDetailReductionFactor: number;
        textureRenderJobCount: number;
        meshScatteringDistanceScaleFactor: number;
        debugOverlayIsolineSpacing: number;
        textureRenderJobsLaunchedPerFrameCountMax: number;
        textureTileSamplesPerSide: number;
        textureTileBorderWidth: number;
        textureLevelOffset: number;
        textureClodFrameCount: number;
        meshScatteringDensityMarginFactor: number;
        textureClodCutoffPriority: number;
        meshScatteringWindSpeed: number;
        textureCompressJobCount: number;
        meshScatteringInstancesPerCellMax: number;
        textureCompressionQuality: number;
        textureDetailSlopeBoost: number;
        textureGenerationMipBias: number;
        debugOverlayBrushSize: number;
        meshScatteringBuildChannelCount: number;
        meshScatteringTreeNodePoolCapacity: number;
        meshScatteringInvisibleCellFovFactor: number;
        meshScatteringInstanceCullListCount: number;
        meshScatteringPregenerationDistanceRatio: number;
        tessellationFacesPerSideMin: number;
        maxNonVisibleTextureUpdateCount: number;
        textureQuadsPerTileLevel: number;
        waterDepthMetersPerSample: number;
        dynamicMaskDecalWidthScale: number;
        drawQuadtreeZoomIndex: number;
        meshScatteringClodFrameCount: number;
        meshScatteringBuildChannelsLaunchedPerFrameCountMax: number;
        slotReuseWaitCount: number;
        meshScatteringCellPoolCapacity: number;
        meshScatteringCullRecordCount: number;
        patchSlotCount: number;
        buildJobCount: number;
        occluderLodBoostLevelCount: number;
        decalZPassDrawDistance: number;
        decalOffsetY: number;
        decal3dFarDrawDistanceScaleFactor: number;
        occludedMinDistance: number;
        patchFacesPerSide: number;
        drawOnlyDecalZPassEnable: boolean;
        drawDecal3dEnable: boolean;
        drawTextureTileBoxesEnable: boolean;
        drawEnable: boolean;
        drawPatchBoxesEnable: boolean;
        drawDebugTextEnable: boolean;
        drawWaterEnable: boolean;
        prioritizationSpuJobEnable: boolean;
        drawDecalZPassEnable: boolean;
        drawQuadtreesEnable: boolean;
        textureVtIndirectionJobEnable: boolean;
        vertexBufferHeightsEnable: boolean;
        drawDebugTexturesEnable: boolean;
        forceDecalReducedQuality: boolean;
        debugOverlayIsolinesEnable: boolean;
        textureClodEnable: boolean;
        debugOverlayWireframeEnable: boolean;
        debugOverlaySketchTextureEnable: boolean;
        drawDecal2dEnable: boolean;
        detailOverlayEnable: boolean;
        decalEnable: boolean;
        drawPatchesEnable: boolean;
        drawQuadtreeStatsEnable: boolean;
        destroyAll: boolean;
        drawQuadtreeAtlasTexturesEnable: boolean;
        slotDebugOutputEnable: boolean;
        updateJobsEnable: boolean;
        prioritizationOcclusionEnable: boolean;
        cullSpuJobEnable: boolean;
        prepareBuildSpuJobEnable: boolean;
        buildSpuJobEnable: boolean;
        regenerateTexturesEnable: boolean;
        dynamicMaskEnable: boolean;
        gpuTextureCompressionEnable: boolean;
        textureBlockOnStreamingEnable: boolean;
        patchErrorFovEnable: boolean;
        dxDisplacementMappingEnable: boolean;
        textureKeepPoolFullEnable: boolean;
        patchLodTransitionsEnable: boolean;
        patchMaterialSortingEnable: boolean;
        cullSampleBoundingBoxHeightEnable: boolean;
        castShadowsEnable: boolean;
        globalColormapEnable: boolean;
        occluderEnable: boolean;
        occluderJobEnable: boolean;
        occluderSpuJobEnable: boolean;
        textureLayerCullingEnable: boolean;
        occludedEnable: boolean;
        drawTextureDebugDepthComplexity: boolean;
        meshScatteringEnable: boolean;
        meshScatteringJobsEnable: boolean;
        meshScatteringCastShadowsEnable: boolean;
        drawMeshScatteringEnable: boolean;
        drawMeshScatteringCellBoxesEnable: boolean;
        drawMeshScatteringNodeBoxesEnable: boolean;
        drawMeshScatteringCulledCellBoxesEnable: boolean;
        drawMeshScatteringDebugMaskScaleTexturesEnable: boolean;
        drawMeshScatteringStatsEnable: boolean;
        drawMeshScatteringQuadtreeEnable: boolean;
        textureDrawTerrainLayersEnable: boolean;
        textureForceUpdateEnable: boolean;
        textureCompressFastAlgorithmEnable: boolean;
        meshScatteringForceUpdateEnable: boolean;
        textureCompressSpuJobsEnable: boolean;
        drawTextureDebugColors: boolean;
        forceGraphicsDriverCrash: boolean;
        meshScatteringBuildVisibleFirst: boolean;
        forcePatchRebuildEnable: boolean;
        debugOverlayBrushEnable: boolean;
        wireframeEnable: boolean;
        textureVtIndirectionSpuJobEnable: boolean;
        drawVertexYTextureEnable: boolean;
        meshScatteringInstanceCountLodEnable: boolean;
        meshScatteringCullSpuJobEnable: boolean;
        meshScatteringInstanceCullSpuJobEnable: boolean;
        meshScatteringPrioritizationSpuJobEnable: boolean;
        meshScatteringSpuJobEnable: boolean;
        enable: boolean;
        editServiceEnable: boolean;
        meshScatteringInstanceCullEnable: boolean;
        zeroViewportEnable: boolean;
        debugOverlayGridEnable: boolean;
        meshScatteringInstanceCullBoxTestEnable: boolean;
        meshScatteringInstanceFrustumCullEnable: boolean;
        meshScatteringInstanceOcclusionCullEnable: boolean;
        meshScatteringInstanceAdditionalCullEnable: boolean;
        drawMeshScatteringInstanceBoxesEnable: boolean;
        meshScatteringInstanceCullDynamicAllocEnable: boolean;
        ps3MeshScatteringInstanceCellMemoryEnable: boolean;

    }

    class VisualVectorShapeData extends FB.VectorShapeData {

        /**
         * Creates a new VisualVectorShapeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VisualVectorShapeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VectorShapeData to VisualVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to VisualVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to VisualVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VisualVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VisualVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VisualVectorShapeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        errorTolerance: number;
        shader3d: FB.SurfaceShaderBaseAsset | undefined;
        drawOrderIndex: number;
        tessellationTriangleSize: number;

    }

    export enum VoiceChannel {
        VoiceChannel_Off = 0,
        VoiceChannel_Team = 1,
        VoiceChannel_Squad = 2,
        VoiceChannel_Loopback = 3,
        VoiceChannel_Count = 4,
    }
    export enum VoiceOverArithmeticExpressionType {
        VoiceOverArithmeticExpressionType_Addition = 0,
        VoiceOverArithmeticExpressionType_Subtraction = 1,
        VoiceOverArithmeticExpressionType_Multiplication = 2,
        VoiceOverArithmeticExpressionType_Division = 3,
        VoiceOverArithmeticExpressionType_Difference = 4,
    }
    class VoiceOverArithmeticNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverArithmeticNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverArithmeticNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverArithmeticNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverArithmeticNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverArithmeticNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverArithmeticNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        a: FB.VoiceOverValueConnection | undefined;
        b: FB.VoiceOverValueConnection | undefined;
        result: FB.VoiceOverValue | undefined;
        operation: FB.VoiceOverArithmeticExpressionType;

    }

    class VoiceOverCharacterAsset extends FB.Asset {

        /**
         * Creates a new VoiceOverCharacterAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverCharacterAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VoiceOverCharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VoiceOverCharacterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverCharacterAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum VoiceOverCompareExpressionType {
        VoiceOverCompareExpressionType_Equals = 0,
        VoiceOverCompareExpressionType_Differs = 1,
        VoiceOverCompareExpressionType_Greater = 2,
        VoiceOverCompareExpressionType_Less = 3,
        VoiceOverCompareExpressionType_GreaterOrEquals = 4,
        VoiceOverCompareExpressionType_LessOrEquals = 5,
    }
    class VoiceOverCompareNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverCompareNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverCompareNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverCompareNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverCompareNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverCompareNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverCompareNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        a: FB.VoiceOverValueConnection | undefined;
        b: FB.VoiceOverValueConnection | undefined;
        falseValue: FB.VoiceOverValue | undefined;
        trueValue: FB.VoiceOverValue | undefined;
        operation: FB.VoiceOverCompareExpressionType;

    }

    class VoiceOverConstantBooleanValue extends FB.VoiceOverConstantValue {

        /**
         * Creates a new VoiceOverConstantBooleanValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantBooleanValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverConstantValue to VoiceOverConstantBooleanValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverConstantValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantBooleanValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantBooleanValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: boolean;

    }

    class VoiceOverConstantFloatValue extends FB.VoiceOverConstantValue {

        /**
         * Creates a new VoiceOverConstantFloatValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantFloatValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverConstantValue to VoiceOverConstantFloatValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverConstantValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantFloatValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantFloatValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: number;

    }

    class VoiceOverConstantGlobalValue extends FB.VoiceOverConstantValue {

        /**
         * Creates a new VoiceOverConstantGlobalValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantGlobalValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverConstantValue to VoiceOverConstantGlobalValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverConstantValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantGlobalValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantGlobalValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: FB.VoiceOverGlobalConstantValue | undefined;

    }

    class VoiceOverConstantIntegerValue extends FB.VoiceOverConstantValue {

        /**
         * Creates a new VoiceOverConstantIntegerValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantIntegerValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverConstantValue to VoiceOverConstantIntegerValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverConstantValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantIntegerValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantIntegerValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: number;

    }

    class VoiceOverConstantNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverConstantNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverConstantNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverConstantNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: FB.VoiceOverValue | undefined;
        source: FB.VoiceOverConstantValue | undefined;

    }

    class VoiceOverConstantValue extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverConstantValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantValue type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VoiceOverConstantVectorValue extends FB.VoiceOverConstantValue {

        /**
         * Creates a new VoiceOverConstantVectorValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConstantVectorValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverConstantValue to VoiceOverConstantVectorValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverConstantValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverConstantVectorValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConstantVectorValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: VUShared.Vec4;

    }

    export enum VoiceOverContainerConditionMode {
        VoiceOverContainerConditionMode_All = 0,
        VoiceOverContainerConditionMode_Any = 1,
    }
    class VoiceOverContainerNode extends FB.VoiceOverStructureNode {

        /**
         * Creates a new VoiceOverContainerNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverContainerNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverStructureNode to VoiceOverContainerNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverStructureNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverContainerNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverContainerNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverContainerNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        condition: FB.VoiceOverValueConnection[];
        interval: FB.VoiceOverIntervalNode | undefined;
        trueRelationship: FB.VoiceOverStructureNode[];
        falseRelationship: FB.VoiceOverStructureNode[];
        conditionMode: FB.VoiceOverContainerConditionMode;
        probability: number;

    }

    class VoiceOverConversationGroupEntityData extends FB.EntityData {

        /**
         * Creates a new VoiceOverConversationGroupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConversationGroupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to VoiceOverConversationGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VoiceOverConversationGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VoiceOverConversationGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VoiceOverConversationGroupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConversationGroupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        queueGroup: FB.VoiceOverConversationQueueGroup | undefined;

    }

    export enum VoiceOverConversationInterruptMode {
        VoiceOverConversationInterruptMode_Disallow = 0,
        VoiceOverConversationInterruptMode_Allow = 1,
        VoiceOverConversationInterruptMode_AllowSame = 2,
    }
    class VoiceOverConversationNode extends FB.VoiceOverStructureNode {

        /**
         * Creates a new VoiceOverConversationNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConversationNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverStructureNode to VoiceOverConversationNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverStructureNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverConversationNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverConversationNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConversationNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        groups: FB.VoiceOverDialogGroup[];
        condition: FB.VoiceOverValueConnection[];
        interval: FB.VoiceOverIntervalNode | undefined;
        finishedRelationship: FB.VoiceOverStructureNode[];
        blockedRelationship: FB.VoiceOverStructureNode[];
        conditionMode: FB.VoiceOverContainerConditionMode;
        probability: number;
        pronunciation: FB.VoiceOverPronunciation | undefined;
        interruptMode: FB.VoiceOverConversationInterruptMode;
        priority: number;
        queueMode: FB.VoiceOverConversationQueueMode;
        relevancy: number;
        trackCount: number;
        lastSequenceIndex: number;

    }

    class VoiceOverConversationQueueGroup extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverConversationQueueGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverConversationQueueGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverConversationQueueGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverConversationQueueGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        polyphonyMode: FB.VoiceOverConversationQueueGroupPolyphony;
        polyphony: number;

    }

    export enum VoiceOverConversationQueueGroupPolyphony {
        VoiceOverConversationQueueGroupPolyphony_Sources = 0,
        VoiceOverConversationQueueGroupPolyphony_Conversations = 1,
    }
    export enum VoiceOverConversationQueueMode {
        VoiceOverConversationQueueMode_Always = 0,
        VoiceOverConversationQueueMode_Never = 1,
        VoiceOverConversationQueueMode_SamePriority = 2,
    }
    class VoiceOverDialogClip extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverDialogClip frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDialogClip frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverDialogClip. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverDialogClip type.
         */
        static typeInfo: VUShared.TypeInformation;

        offset: number;
        takes: FB.VoiceOverDialogTake[];
        offsetReferences: FB.VoiceOverDialogClip[];
        events: FB.VoiceOverDialogClipEvents | undefined;
        sequenceIndex: number;

    }

    class VoiceOverDialogClipEvents extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverDialogClipEvents frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDialogClipEvents frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverDialogClipEvents. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverDialogClipEvents type.
         */
        static typeInfo: VUShared.TypeInformation;

        startedNameHash: number;
        finishedNameHash: number;

    }

    class VoiceOverDialogGroup extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverDialogGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDialogGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverDialogGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverDialogGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundAsset | undefined;
        tracks: FB.VoiceOverDialogTrack[];

    }

    class VoiceOverDialogTake {

        /**
         * Creates a new VoiceOverDialogTake frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDialogTake frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VoiceOverDialogTake type.
         */
        static typeInfo: VUShared.TypeInformation;

        wave: FB.SoundWaveAsset | undefined;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VoiceOverDialogTake;

    }

    export enum VoiceOverDialogTakeBehavior {
        VoiceOverDialogTakeBehavior_Start = 0,
        VoiceOverDialogTakeBehavior_Clip = 1,
        VoiceOverDialogTakeBehavior_Continuous = 2,
    }
    class VoiceOverDialogTakeMapping {

        /**
         * Creates a new VoiceOverDialogTakeMapping frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDialogTakeMapping frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VoiceOverDialogTakeMapping type.
         */
        static typeInfo: VUShared.TypeInformation;

        takeControlMin: number;
        takeControlMax: number;
        takeIndex: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VoiceOverDialogTakeMapping;

    }

    class VoiceOverDialogTrack extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverDialogTrack frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDialogTrack frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverDialogTrack. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverDialogTrack type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: FB.VoiceOverValueConnection | undefined;
        takeControl: FB.VoiceOverValueConnection | undefined;
        takeIndexMapping: FB.VoiceOverDialogTakeMapping[];
        takeSwitching: FB.VoiceOverDialogTakeBehavior;
        clips: FB.VoiceOverDialogClip[];
        samplerNode: FB.AudioGraphNodeData | undefined;
        output: FB.AudioGraphNodeData | undefined;
        queueGroup: FB.VoiceOverConversationQueueGroup | undefined;
        parentTrackIndex: number;
        takeSwitchingOnResume: boolean;

    }

    class VoiceOverDistanceNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverDistanceNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverDistanceNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverDistanceNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverDistanceNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverDistanceNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverDistanceNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        a: FB.VoiceOverValueConnection | undefined;
        b: FB.VoiceOverValueConnection | undefined;
        threshold: FB.VoiceOverValueConnection | undefined;
        distance: FB.VoiceOverValue | undefined;
        falseValue: FB.VoiceOverValue | undefined;
        trueValue: FB.VoiceOverValue | undefined;
        operation: FB.VoiceOverCompareExpressionType;

    }

    class VoiceOverEvent extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverEvent frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverEvent frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverEvent. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverEvent type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        parameters: FB.VoiceOverNamedValue[];
        owner: FB.Asset | undefined;

    }

    class VoiceOverEventEntityData extends FB.EntityData {

        /**
         * Creates a new VoiceOverEventEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverEventEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to VoiceOverEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to VoiceOverEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VoiceOverEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VoiceOverEventEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverEventEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        eventPlayer: FB.VoiceOverNamedValue | undefined;
        voEvent: FB.VoiceOverEvent | undefined;
        finishedDelay: number;
        extraEventPlayer: FB.VoiceOverNamedValue | undefined;
        triggerDelay: number;
        runOnce: boolean;

    }

    class VoiceOverEventNode extends FB.VoiceOverStructureNode {

        /**
         * Creates a new VoiceOverEventNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverEventNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverStructureNode to VoiceOverEventNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverStructureNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverEventNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverEventNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverEventNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        interval: FB.VoiceOverIntervalNode | undefined;
        relationship: FB.VoiceOverStructureNode[];
        redirects: FB.VoiceOverValueRedirect[];
        event: FB.VoiceOverEvent | undefined;

    }

    class VoiceOverExpressionNode extends FB.VoiceOverNode {

        /**
         * Creates a new VoiceOverExpressionNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverExpressionNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverExpressionNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverExpressionNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverExpressionNode type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VoiceOverGlobalConstantValue extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverGlobalConstantValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverGlobalConstantValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverGlobalConstantValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverGlobalConstantValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        source: FB.VoiceOverConstantValue | undefined;

    }

    class VoiceOverGlobalNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverGlobalNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverGlobalNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverGlobalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverGlobalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverGlobalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverGlobalNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: FB.VoiceOverValue | undefined;
        field: FB.VoiceOverNamedValue | undefined;
        object: FB.VoiceOverObject | undefined;

    }

    class VoiceOverGroup extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverGroup frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverGroup frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverGroup. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverGroup type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        priority: number;

    }

    class VoiceOverInfoNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverInfoNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverInfoNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverInfoNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverInfoNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverInfoNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverInfoNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        object: FB.VoiceOverValueConnection | undefined;
        value: FB.VoiceOverValue | undefined;
        field: FB.VoiceOverNamedValue | undefined;
        expectedType: FB.VoiceOverObject | undefined;

    }

    class VoiceOverInterval extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverInterval frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverInterval frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverInterval. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverInterval type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class VoiceOverIntervalNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverIntervalNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverIntervalNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverIntervalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverIntervalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverIntervalNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverIntervalNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        threshold: FB.VoiceOverValueConnection | undefined;
        time: FB.VoiceOverValue | undefined;
        falseValue: FB.VoiceOverValue | undefined;
        trueValue: FB.VoiceOverValue | undefined;
        interval: FB.VoiceOverInterval | undefined;

    }

    class VoiceOverLabel extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverLabel frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverLabel frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverLabel. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverLabel type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    export enum VoiceOverLabelCompareMode {
        VoiceOverLabelCompareMode_Any = 0,
        VoiceOverLabelCompareMode_All = 1,
        VoiceOverLabelCompareMode_One = 2,
    }
    class VoiceOverLabelNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverLabelNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverLabelNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverLabelNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverLabelNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverLabelNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverLabelNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        sources: FB.VoiceOverLabelSource[];
        falseValue: FB.VoiceOverValue | undefined;
        trueValue: FB.VoiceOverValue | undefined;
        wantedLabels: FB.VoiceOverLabel[];
        unwantedLabels: FB.VoiceOverLabel[];
        sourceMode: FB.VoiceOverLabelSourceMode;
        wantedCompareMode: FB.VoiceOverLabelCompareMode;
        unwantedCompareMode: FB.VoiceOverLabelCompareMode;

    }

    class VoiceOverLabelSource extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverLabelSource frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverLabelSource frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverLabelSource. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverLabelSource type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: FB.VoiceOverValueConnection | undefined;

    }

    export enum VoiceOverLabelSourceMode {
        VoiceOverLabelSourceMode_Combined = 0,
        VoiceOverLabelSourceMode_Shared = 1,
    }
    class VoiceOverLanguageRoot extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverLanguageRoot frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverLanguageRoot frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverLanguageRoot. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverLanguageRoot type.
         */
        static typeInfo: VUShared.TypeInformation;

        language: FB.AudioLanguage | undefined;
        path: string;

    }

    class VoiceOverLogicAsset extends FB.Asset {

        /**
         * Creates a new VoiceOverLogicAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverLogicAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VoiceOverLogicAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VoiceOverLogicAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverLogicAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        events: FB.VoiceOverEvent[];
        groups: FB.VoiceOverGroup[];
        flows: FB.VoiceOverLogicFlow[];
        system: FB.VoiceOverSystemAsset | undefined;

    }

    class VoiceOverLogicFlow extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverLogicFlow frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverLogicFlow frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverLogicFlow. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverLogicFlow type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        group: FB.VoiceOverGroup | undefined;
        locals: FB.VoiceOverValue[];
        roots: FB.VoiceOverEventNode[];

    }

    export enum VoiceOverLogicFlowMode {
        VoiceOverLogicFlowMode_All = 0,
        VoiceOverLogicFlowMode_One = 1,
    }
    class VoiceOverManuscriptAsset extends FB.Asset {

        /**
         * Creates a new VoiceOverManuscriptAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverManuscriptAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VoiceOverManuscriptAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VoiceOverManuscriptAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverManuscriptAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        masterLanguage: FB.AudioLanguage | undefined;
        languages: FB.VoiceOverLanguageRoot[];
        nameTranslation: FB.VoiceOverWaveNameTranslation;
        sheetName: string;
        stringIdColumn: string;
        fileNameColumn: string;
        pathColumn: string;
        waveAssetStatusColumn: string;
        characterColumn: string;
        voiceColumn: string;
        stringIdPrefix: string;
        languageColumns: FB.VoiceOverManuscriptLanguageColumns[];
        firstContentRow: number;
        outputPath: string;
        streamPool: FB.StreamPoolAsset | undefined;
        keepPath: boolean;
        stringIdUpperCase: boolean;
        allowDelete: boolean;

    }

    class VoiceOverManuscriptLanguageColumns {

        /**
         * Creates a new VoiceOverManuscriptLanguageColumns frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverManuscriptLanguageColumns frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the VoiceOverManuscriptLanguageColumns type.
         */
        static typeInfo: VUShared.TypeInformation;

        language: FB.AudioLanguage | undefined;
        textColumn: string;
        subtitleOffsetColumn: string;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.VoiceOverManuscriptLanguageColumns;

    }

    class VoiceOverNamedValue extends FB.VoiceOverValue {

        /**
         * Creates a new VoiceOverNamedValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverNamedValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverValue to VoiceOverNamedValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverNamedValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverNamedValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;

    }

    class VoiceOverNode extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverNode type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VoiceOverObject extends FB.VoiceOverNamedValue {

        /**
         * Creates a new VoiceOverObject frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverObject frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverNamedValue to VoiceOverObject. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNamedValue);
        /**
         * Casts an instance of type VoiceOverValue to VoiceOverObject. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverValue);
        /**
         * Casts an instance of type DataContainer to VoiceOverObject. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverObject type.
         */
        static typeInfo: VUShared.TypeInformation;

        properties: FB.VoiceOverNamedValue[];

    }

    class VoiceOverProbabilityNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverProbabilityNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverProbabilityNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverProbabilityNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverProbabilityNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverProbabilityNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverProbabilityNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        falseValue: FB.VoiceOverValue | undefined;
        trueValue: FB.VoiceOverValue | undefined;
        probability: number;

    }

    class VoiceOverPronunciation extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverPronunciation frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverPronunciation frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverPronunciation. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverPronunciation type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        primaryLanguage: FB.AudioLanguage | undefined;
        secondaryLanguage: FB.AudioLanguage | undefined;
        secondaryFallback: FB.VoiceOverPronunciationFallback;

    }

    export enum VoiceOverPronunciationFallback {
        VoiceOverPronunciationFallback_None = 0,
        VoiceOverPronunciationFallback_Master = 1,
    }
    class VoiceOverRelationshipInput extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverRelationshipInput frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverRelationshipInput frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverRelationshipInput. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverRelationshipInput type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class VoiceOverStructureConnection extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverStructureConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverStructureConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverStructureConnection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverStructureConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        targetNode: FB.VoiceOverStructureNode | undefined;
        targetInput: FB.VoiceOverRelationshipInput | undefined;

    }

    class VoiceOverStructureNode extends FB.VoiceOverNode {

        /**
         * Creates a new VoiceOverStructureNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverStructureNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverStructureNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverStructureNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverStructureNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        flowMode: FB.VoiceOverLogicFlowMode;

    }

    class VoiceOverSystemAsset extends FB.Asset {

        /**
         * Creates a new VoiceOverSystemAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverSystemAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to VoiceOverSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to VoiceOverSystemAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverSystemAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

        intervals: FB.VoiceOverInterval[];
        labels: FB.VoiceOverLabel[];
        types: FB.VoiceOverObject[];
        objects: FB.VoiceOverObject[];
        constants: FB.VoiceOverGlobalConstantValue[];
        masterLanguage: FB.AudioLanguage | undefined;
        defaultPronunciation: FB.VoiceOverPronunciation | undefined;
        pronunciations: FB.VoiceOverPronunciation[];
        queueGroups: FB.VoiceOverConversationQueueGroup[];
        defaultPositionedQueueGroup: FB.VoiceOverConversationQueueGroup | undefined;
        defaultUnpositionedQueueGroup: FB.VoiceOverConversationQueueGroup | undefined;

    }

    class VoiceOverTriggerNode extends FB.VoiceOverStructureNode {

        /**
         * Creates a new VoiceOverTriggerNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverTriggerNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverStructureNode to VoiceOverTriggerNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverStructureNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverTriggerNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverTriggerNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverTriggerNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        parameters: FB.VoiceOverTriggerParameter[];
        delay: number;
        event: FB.VoiceOverEvent | undefined;

    }

    class VoiceOverTriggerParameter extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverTriggerParameter frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverTriggerParameter frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverTriggerParameter. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverTriggerParameter type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: FB.VoiceOverValueConnection | undefined;
        eventParameter: FB.VoiceOverNamedValue | undefined;

    }

    class VoiceOverValue extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverValue. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        valueType: FB.VoiceOverValueType;

    }

    class VoiceOverValueConnection extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverValueConnection frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverValueConnection frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverValueConnection. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverValueConnection type.
         */
        static typeInfo: VUShared.TypeInformation;

        targetNode: FB.VoiceOverExpressionNode | undefined;
        targetValue: FB.VoiceOverValue | undefined;

    }

    class VoiceOverValueRedirect extends VUShared.DataContainer {

        /**
         * Creates a new VoiceOverValueRedirect frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverValueRedirect frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to VoiceOverValueRedirect. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverValueRedirect type.
         */
        static typeInfo: VUShared.TypeInformation;

        source: FB.VoiceOverValue | undefined;
        target: FB.VoiceOverValue | undefined;

    }

    export enum VoiceOverValueType {
        VoiceOverValueType_Boolean = 0,
        VoiceOverValueType_Integer = 1,
        VoiceOverValueType_Float = 2,
        VoiceOverValueType_Vector = 3,
        VoiceOverValueType_Object = 4,
        VoiceOverValueTypeCount = 5,
    }
    class VoiceOverVariableNode extends FB.VoiceOverExpressionNode {

        /**
         * Creates a new VoiceOverVariableNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new VoiceOverVariableNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VoiceOverExpressionNode to VoiceOverVariableNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverExpressionNode);
        /**
         * Casts an instance of type VoiceOverNode to VoiceOverVariableNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VoiceOverNode);
        /**
         * Casts an instance of type DataContainer to VoiceOverVariableNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VoiceOverVariableNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        value: FB.VoiceOverValue | undefined;
        source: FB.VoiceOverNamedValue | undefined;

    }

    export enum VoiceOverWaveNameTranslation {
        VoiceOverWaveNameTranslation_FullName = 0,
        VoiceOverWaveNameTranslation_PathOnly = 1,
        VoiceOverWaveNameTranslation_NameOnly = 2,
    }
    class VolumeVectorShapeData extends FB.VectorShapeData {

        /**
         * Creates a new VolumeVectorShapeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new VolumeVectorShapeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VectorShapeData to VolumeVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to VolumeVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to VolumeVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to VolumeVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to VolumeVectorShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the VolumeVectorShapeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        height: number;

    }

    export enum VotingType {
        VotingMap = 0,
        VotingGameMode = 1,
        VotingFriendlyFire = 2,
    }
    export enum WarningPlayerType {
        WPTInflictor = 0,
        WPTVictim = 1,
    }
    class WarningSystemComponentData extends FB.ComponentData {

        /**
         * Creates a new WarningSystemComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WarningSystemComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to WarningSystemComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WarningSystemComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WarningSystemComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WarningSystemComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WarningSystemComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimWarnSoundEffect: FB.SoundAsset | undefined;
        missileWarnSoundEffect: FB.SoundAsset | undefined;
        lowHealthWarnSoundEffect: FB.SoundAsset | undefined;
        lockingWarnSoundEffect: FB.SoundAsset | undefined;
        lockedWarnSoundEffect: FB.SoundAsset | undefined;
        playerType: FB.WarningPlayerType;

    }

    export enum WarnTarget {
        wtWarnSoldierAndVehicle = 0,
        wtWarnSoldier = 1,
        wtWarnVehicle = 2,
        wtWarnNone = 3,
    }
    class WarpAnimationBinding {

        /**
         * Creates a new WarpAnimationBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new WarpAnimationBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WarpAnimationBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        connectJointGroup: FB.AntRef;
        connectJointWeight: FB.AntRef;
        enableAlign: FB.AntRef;
        disableCulling: FB.AntRef;
        translationYWarpTolerance: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WarpAnimationBinding;

    }

    class WarpAnimationComponentData extends FB.ComponentData {

        /**
         * Creates a new WarpAnimationComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WarpAnimationComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to WarpAnimationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WarpAnimationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WarpAnimationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WarpAnimationComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WarpAnimationComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        connectTransform: VUShared.LinearTransform;
        cannedAnimBinding: FB.CannedAnimationBinding;
        animationEntitySpacePriority: number;
        warpBinding: FB.WarpAnimationBinding;
        boneToAlign: FB.GameplayBones;
        requireAnimationWeight: boolean;
        forceAnimationTransform: boolean;
        externalConnectTransform: boolean;

    }

    class WarpAnimationEntityData extends FB.EntityData {

        /**
         * Creates a new WarpAnimationEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WarpAnimationEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to WarpAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WarpAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WarpAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WarpAnimationEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WarpAnimationEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        connectTransform: VUShared.LinearTransform;
        animationEntitySpacePriority: number;
        warpBinding: FB.WarpAnimationBinding;
        boneToAlign: FB.GameplayBones;
        forceAnimationTransform: boolean;
        requireAnimationWeight: boolean;
        externalConnectTransform: boolean;

    }

    class WaterAsset extends FB.Asset {

        /**
         * Creates a new WaterAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaterAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to WaterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WaterAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaterAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WaterData extends FB.Asset {

        /**
         * Creates a new WaterData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaterData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type Asset to WaterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WaterData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaterData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WaterEntityData extends FB.GamePhysicsEntityData {

        /**
         * Creates a new WaterEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaterEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GamePhysicsEntityData to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WaterEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaterEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        asset: FB.WaterAsset | undefined;

    }

    export enum WaveCodec {
        WaveCodec_EaLayer3 = 0,
        WaveCodec_EaXma = 1,
        WaveCodec_Xas = 2,
        WaveCodec_EaSpeex = 3,
        WaveCodec_Pcm = 4,
        WaveCodec_Count = 5,
    }
    export enum WavePriority {
        WpNone = 0,
        WpLow = 1,
        WpNormal = 2,
        WpHigh = 3,
        WpPermanent = 4,
    }
    class WaveSwitcherNodeData extends FB.AudioGraphNodeData {

        /**
         * Creates a new WaveSwitcherNodeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaveSwitcherNodeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type AudioGraphNodeData to WaveSwitcherNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.AudioGraphNodeData);
        /**
         * Casts an instance of type DataContainer to WaveSwitcherNodeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaveSwitcherNodeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        index: FB.AudioGraphNodePort;
        advance: FB.AudioGraphNodePort;
        wave: FB.AudioGraphNodePort;
        indexChanged: FB.AudioGraphNodePort;
        waves: FB.SoundWaveAsset[];
        defaultIndex: number;
        isRandom: boolean;
        randomStartIndex: boolean;

    }

    class WaypointComponentData extends FB.ComponentData {

        /**
         * Creates a new WaypointComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaypointComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to WaypointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WaypointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WaypointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WaypointComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaypointComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        looping: boolean;

    }

    class WaypointData extends VUShared.DataContainer {

        /**
         * Creates a new WaypointData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaypointData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WaypointData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaypointData type.
         */
        static typeInfo: VUShared.TypeInformation;

        schematicsNameHash: number;
        waypointId: number;
        useClientsPosition: boolean;

    }

    class WaypointsShapeData extends FB.VectorShapeData {

        /**
         * Creates a new WaypointsShapeData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaypointsShapeData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type VectorShapeData to WaypointsShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.VectorShapeData);
        /**
         * Casts an instance of type BaseShapeData to WaypointsShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.BaseShapeData);
        /**
         * Casts an instance of type GameObjectData to WaypointsShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WaypointsShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WaypointsShapeData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaypointsShapeData type.
         */
        static typeInfo: VUShared.TypeInformation;

        waypoints: FB.WaypointData[];

    }

    export enum WaypointsSnappingSettings {
        UseShapeSettings = 0,
        SnapToTerrain = 1,
        NoSnap = 2,
    }
    class WaypointTriggerEntityData extends FB.EntityData {

        /**
         * Creates a new WaypointTriggerEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WaypointTriggerEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to WaypointTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WaypointTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WaypointTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WaypointTriggerEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WaypointTriggerEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;

    }

    export enum WaypointVaultType {
        WaypointVaultType_VaultOverHigh = 0,
        WaypointVaultType_VaultOntoLow = 1,
        WaypointVaultType_VaultDownLow = 2,
        WaypointVaultType_VaultDownHigh = 3,
        WaypointVaultType_ClimbUpHigh = 4,
        WaypointVaultType_ClimbOverHigh = 5,
        WaypointVaultType_JumpAcross = 6,
        WaypointVaultType_Count = 7,
    }
    class WeaponAimingSimulationModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponAimingSimulationModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponAimingSimulationModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponAimingSimulationModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponAimingSimulationModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponAimingSimulationModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        aimingController: FB.SoldierAimingSimulationData | undefined;

    }

    class WeaponAnimatedFireTypeModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponAnimatedFireTypeModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponAnimatedFireTypeModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponAnimatedFireTypeModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponAnimatedFireTypeModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponAnimatedFireTypeModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        animatedFireType: FB.AnimatedFireEnum;

    }

    class WeaponAnimationConfigurationModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponAnimationConfigurationModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponAnimationConfigurationModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponAnimationConfigurationModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponAnimationConfigurationModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponAnimationConfigurationModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        zoomInOutMeshTransitionFactors: number[];
        animationConfiguration: FB.AnimationConfigurationData;
        animatedFireType: FB.AnimatedFireEnum;

    }

    export enum WeaponAnimBaseSetEnum {
        wabsRif = 0,
        wabsPstl = 1,
        wabsHgr = 2,
        wabsAT = 3,
        wabsShg = 4,
        wabsLMG = 5,
        wabsBag = 6,
        wabsSnp = 7,
        wabsCount = 8,
        wabsNone = 9,
    }
    export enum WeaponAnimType {
        WeaponAnimType_NoAddon = 0,
        WeaponAnimType_Bipod = 1,
        WeaponAnimType_Foregrip = 2,
        WeaponAnimType_40mm_GL = 3,
        WeaponAnimType_40mm_GL_Fire = 4,
        WeaponAnimType_Underslung_Shotgun = 5,
        WeaponAnimType_Underslung_Shotgun_Fire = 6,
        WeaponAnimType_Straight_Pull_Bolt = 7,
        WeaponAnimType_Extended_Mag = 8,
    }
    class WeaponAnimTypeModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponAnimTypeModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponAnimTypeModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponAnimTypeModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponAnimTypeModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponAnimTypeModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponAnimType: FB.WeaponAnimType;

    }

    export enum WeaponClassEnum {
        wc12gauge = 0,
        wc338Magnum = 1,
        wc357Magnum = 2,
        wc44Magnum = 3,
        wc45cal = 4,
        wc46x30mm = 5,
        wc50cal = 6,
        wc545x45mmWP = 7,
        wc556x45mmNATO = 8,
        wc57x28mm = 9,
        wc58x42mm = 10,
        wc762x39mmWP = 11,
        wc762x51mmNATO = 12,
        wc762x54mmR = 13,
        wc9x19mm = 14,
        wc9x39mm = 15,
        wcAssault = 16,
        wcShotgun = 17,
        wcSmg = 18,
        wcLmg = 19,
        wcSniper = 20,
        wcUgl = 21,
        wcHgr = 22,
        wcAt = 23,
        wcATMine = 24,
        wcC4 = 25,
        wcAutoInjector = 26,
        wcKnife = 27,
        wcLaserDesignator = 28,
        wcLaserPainter = 29,
        wcMedKit = 30,
        wcMortarStrike = 31,
        wcPowerTool = 32,
        wcTracerDart = 33,
        wcRadioBeacon = 34,
        wcEodBot = 35,
        wcReconMav = 36,
        wcUGS = 37,
        wcCount = 38,
        wcNone = 39,
    }
    export enum WeaponClassification {
        WCNone = 0,
        WCPrimary = 1,
        WCSecondary = 2,
    }
    class WeaponClassModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponClassModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponClassModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponClassModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponClassModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponClassModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponClass: FB.WeaponClassEnum;

    }

    class WeaponComponentData extends FB.PartComponentData {

        /**
         * Creates a new WeaponComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to WeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to WeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        projectileSpawnOffset: VUShared.Vec3;
        impulseStrength: number;
        weaponMesh: FB.MeshAsset | undefined;
        weaponFiring: FB.WeaponFiringData | undefined;
        damageGiverName: string;
        aiData: FB.GameAIWeaponData | undefined;
        customWeaponType: FB.WeaponData | undefined;
        classification: FB.WeaponClassification;
        explosionDamageMultiplier: number;
        reloadTimeMultiplier: number;
        damageMultiplier: number;
        weaponItemHash: number;
        overheatDropPerSecondMultiplier: number;
        lockTimeMultiplier: number;
        lockingAcceptanceAngleMultiplier: number;
        sequentialFiring: boolean;

    }

    class WeaponData extends FB.ToolData {

        /**
         * Creates a new WeaponData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ToolData to WeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ToolData);
        /**
         * Casts an instance of type DataContainer to WeaponData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponData type.
         */
        static typeInfo: VUShared.TypeInformation;

        showLaserPaintedVehicles: boolean;

    }

    class WeaponDeployTimeModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponDeployTimeModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponDeployTimeModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponDeployTimeModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponDeployTimeModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponDeployTimeModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        deployTime: number;
        disableZoomOnDeployTime: number;
        altDeployTime: number;
        altDeployId: number;

    }

    class WeaponEntityData extends FB.GameEntityData {

        /**
         * Creates a new WeaponEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameEntityData to WeaponEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to WeaponEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to WeaponEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WeaponEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponStates: FB.WeaponStateData[];
        weaponClass: FB.WeaponClassEnum;
        aiData: FB.GameAIWeaponData | undefined;
        weaponFiring: FB.WeaponFiringData | undefined;
        customWeaponType: FB.WeaponData | undefined;

    }

    class WeaponFiringData extends FB.GameDataContainer {

        /**
         * Creates a new WeaponFiringData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponFiringData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainer to WeaponFiringData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponFiringData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponFiringData type.
         */
        static typeInfo: VUShared.TypeInformation;

        primaryFire: FB.FiringFunctionData | undefined;
        deployTime: number;
        reactivateCooldownTime: number;
        disableZoomOnDeployTime: number;
        altDeployTime: number;
        altDeployId: number;
        weaponSway: FB.WeaponSwayData | undefined;
        supportDelayProne: number;
        supportDelayStand: number;
        rumble: FB.RumbleFiringData;
        inflictSelfDamage: boolean;
        useAutoAiming: boolean;
        showEnemyNametagOnAim: boolean;
        reloadWholeMags: boolean;
        disableReloadWhileSprinting: boolean;
        abortReloadOnSprint: boolean;

    }

    class WeaponFiringDataAsset extends FB.GameDataContainerAsset {

        /**
         * Creates a new WeaponFiringDataAsset frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponFiringDataAsset frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type GameDataContainerAsset to WeaponFiringDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainerAsset);
        /**
         * Casts an instance of type Asset to WeaponFiringDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WeaponFiringDataAsset. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponFiringDataAsset type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WeaponFiringDataModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponFiringDataModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponFiringDataModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponFiringDataModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponFiringDataModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponFiringDataModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponFiring: FB.WeaponFiringData | undefined;

    }

    class WeaponFiringEffectsModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponFiringEffectsModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponFiringEffectsModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponFiringEffectsModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponFiringEffectsModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponFiringEffectsModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        fireEffects1p: FB.FireEffectData[];
        fireEffects3p: FB.FireEffectData[];

    }

    export enum WeaponFiringEvent {
        WeaponFiringEvent_Push = 0,
        WeaponFiringEvent_Pop = 1,
        WeaponFiringEvent_PrimaryStartedFiringCallback = 2,
        WeaponFiringEvent_PrimaryFireCallback = 3,
        WeaponFiringEvent_PrimaryFireReleaseCallback = 4,
        WeaponFiringEvent_PrimaryFireShotSpawnedCallback = 5,
        WeaponFiringEvent_PrimaryFireAutomaticBeginCallback = 6,
        WeaponFiringEvent_PrimaryFireAutomaticEndCallback = 7,
        WeaponFiringEvent_PrimaryStoppedFiringCallback = 8,
        WeaponFiringEvent_ReloadPrimaryCallback = 9,
        WeaponFiringEvent_ReloadPrimaryEndCallback = 10,
        WeaponFiringEvent_BoltActionCallback = 11,
        WeaponFiringEvent_BoltActionEndCallback = 12,
        WeaponFiringEvent_DetonationSwitchCallback = 13,
        WeaponFiringEvent_HoldAndReleaseReleaseCallback = 14,
        WeaponFiringEvent_UpdateRequired = 15,
    }
    class WeaponInputRouterComponentData extends FB.ComponentData {

        /**
         * Creates a new WeaponInputRouterComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponInputRouterComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to WeaponInputRouterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WeaponInputRouterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponInputRouterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponInputRouterComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponInputRouterComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxFireRate: number;
        rotationCount: number;

    }

    class WeaponLagBinding {

        /**
         * Creates a new WeaponLagBinding frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponLagBinding frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponLagBinding type.
         */
        static typeInfo: VUShared.TypeInformation;

        entityPitch: FB.AntRef;
        entityYaw: FB.AntRef;
        pitchResult: FB.AntRef;
        yawResult: FB.AntRef;
        rollResult: FB.AntRef;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponLagBinding;

    }

    class WeaponLagEffectForceData {

        /**
         * Creates a new WeaponLagEffectForceData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponLagEffectForceData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponLagEffectForceData type.
         */
        static typeInfo: VUShared.TypeInformation;

        offsetForce: VUShared.Vec3;
        rotationForce: VUShared.Vec3;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponLagEffectForceData;

    }

    class WeaponLagEffectSpringData {

        /**
         * Creates a new WeaponLagEffectSpringData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponLagEffectSpringData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponLagEffectSpringData type.
         */
        static typeInfo: VUShared.TypeInformation;

        constant: number;
        damping: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponLagEffectSpringData;

    }

    class WeaponLagEffectSpringVector {

        /**
         * Creates a new WeaponLagEffectSpringVector frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponLagEffectSpringVector frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponLagEffectSpringVector type.
         */
        static typeInfo: VUShared.TypeInformation;

        springX: FB.WeaponLagEffectSpringData;
        springY: FB.WeaponLagEffectSpringData;
        springZ: FB.WeaponLagEffectSpringData;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponLagEffectSpringVector;

    }

    class WeaponLagEntityData extends FB.EntityData {

        /**
         * Creates a new WeaponLagEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponLagEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to WeaponLagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WeaponLagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponLagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponLagEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponLagEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        binding: FB.WeaponLagBinding;

    }

    class WeaponLagSpringEffectData extends VUShared.DataContainer {

        /**
         * Creates a new WeaponLagSpringEffectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponLagSpringEffectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponLagSpringEffectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponLagSpringEffectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        offsetSprings: FB.WeaponLagEffectSpringVector;
        rotationSprings: FB.WeaponLagEffectSpringVector;
        jumpForces: FB.WeaponLagEffectForceData;
        landForces: FB.WeaponLagEffectForceData;
        poseUpForces: FB.WeaponLagEffectForceData;
        poseDownForces: FB.WeaponLagEffectForceData;
        zoomForceModifier: number;

    }

    class WeaponMagazineModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponMagazineModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponMagazineModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponMagazineModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponMagazineModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponMagazineModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        magazineCapacity: number;
        numberOfMagazines: number;

    }

    class WeaponMiscModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponMiscModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponMiscModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponMiscModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponMiscModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponMiscModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        enableBreathControl: boolean;
        canBeInSupportedShooting: boolean;
        unZoomOnBoltAction: boolean;
        holdBoltActionUntilZoomRelease: boolean;
        isSilenced: boolean;

    }

    class WeaponMiscModifierSettings {

        /**
         * Creates a new WeaponMiscModifierSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponMiscModifierSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponMiscModifierSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        enableBreathControl: boolean;
        canBeInSupportedShooting: boolean;
        unZoomOnBoltAction: boolean;
        holdBoltActionUntilZoomRelease: boolean;
        isSilenced: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponMiscModifierSettings;

    }

    class WeaponModifier {

        /**
         * Creates a new WeaponModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        dummyToMakeFrostEDcompile: number;
        weaponMiscModifierSettings: FB.WeaponMiscModifierSettings | undefined;
        weaponFiringDataModifier: FB.WeaponFiringDataModifier | undefined;
        weaponFiringEffectsModifier: FB.WeaponFiringEffectsModifier | undefined;
        weaponSoundModifier: FB.WeaponSoundModifier | undefined;
        weaponShotModifier: FB.WeaponShotModifier | undefined;
        weaponProjectileModifier: FB.WeaponProjectileModifier | undefined;
        weaponAimingSimulationModifier: FB.WeaponAimingSimulationModifier | undefined;
        weaponAnimationConfigurationModifier: FB.WeaponAnimationConfigurationModifier | undefined;
        weaponAnimTypeModifier: FB.WeaponAnimTypeModifier | undefined;
        weaponMagazineModifier: FB.WeaponMagazineModifier | undefined;
        weaponZoomModifier: FB.WeaponZoomModifier | undefined;
        readonly unlocks: FB.UnlockAssetBase[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponModifier;

    }

    class WeaponModifierBase extends VUShared.DataContainer {

        /**
         * Creates a new WeaponModifierBase frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponModifierBase frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponModifierBase. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponModifierBase type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WeaponModifierData {

        /**
         * Creates a new WeaponModifierData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponModifierData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponModifierData type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockAsset: FB.UnlockAssetBase | undefined;
        modifiers: FB.WeaponModifierBase[];

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponModifierData;

    }

    class WeaponOffsetData extends VUShared.DataContainer {

        /**
         * Creates a new WeaponOffsetData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponOffsetData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponOffsetData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponOffsetData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weaponOffsetX: number;
        weaponOffsetY: number;
        weaponOffsetZ: number;
        weaponZoomedOffsetX: number;
        weaponZoomedOffsetY: number;
        weaponZoomedOffsetZ: number;

    }

    class WeaponOverrideData extends VUShared.DataContainer {

        /**
         * Creates a new WeaponOverrideData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponOverrideData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponOverrideData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponOverrideData type.
         */
        static typeInfo: VUShared.TypeInformation;

        data: VUShared.DataContainer | undefined;
        values: FB.WeaponOverrideValue[];

    }

    class WeaponOverrideValue {

        /**
         * Creates a new WeaponOverrideValue frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponOverrideValue frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponOverrideValue type.
         */
        static typeInfo: VUShared.TypeInformation;

        valueType: FB.WeaponOverrideValueType;
        value: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponOverrideValue;

    }

    export enum WeaponOverrideValueType {
        OverrideValue_BulletEntity_DistributeDamageOverTime = 0,
        OverrideValue_BulletEntity_StartDamage = 1,
        OverrideValue_BulletEntity_EndDamage = 2,
        OverrideValue_BulletEntity_DamageFalloffStartDistance = 3,
        OverrideValue_BulletEntity_DamageFalloffEndDistance = 4,
    }
    class WeaponPickupData {

        /**
         * Creates a new WeaponPickupData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponPickupData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponPickupData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weapon: FB.SoldierWeaponBlueprint | undefined;
        weaponSlot: number;
        altWeaponSlot: number;
        linkedToWeaponSlot: number;
        minAmmo: number;
        maxAmmo: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponPickupData;

    }

    class WeaponPickupEntityData extends FB.PickupEntityData {

        /**
         * Creates a new WeaponPickupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponPickupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PickupEntityData to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PickupEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponPickupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weapons: FB.WeaponPickupData[];
        useForPersistence: boolean;

    }

    class WeaponProjectileModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponProjectileModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponProjectileModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponProjectileModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponProjectileModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponProjectileModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        projectileData: FB.ProjectileEntityData | undefined;

    }

    class WeaponRegularSocketObjectData extends FB.WeaponSocketObjectData {

        /**
         * Creates a new WeaponRegularSocketObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponRegularSocketObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponSocketObjectData to WeaponRegularSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponSocketObjectData);
        /**
         * Casts an instance of type SocketObjectDataBase to WeaponRegularSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectDataBase);
        /**
         * Casts an instance of type DataContainer to WeaponRegularSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponRegularSocketObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        transform: VUShared.LinearTransform;
        mesh3pTransforms: VUShared.LinearTransform[];

    }

    class WeaponShotModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponShotModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponShotModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponShotModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponShotModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponShotModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        initialSpeed: VUShared.Vec3;
        numberOfBulletsPerShell: number;

    }

    class WeaponSkinnedSocketObjectData extends FB.WeaponSocketObjectData {

        /**
         * Creates a new WeaponSkinnedSocketObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSkinnedSocketObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponSocketObjectData to WeaponSkinnedSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponSocketObjectData);
        /**
         * Casts an instance of type SocketObjectDataBase to WeaponSkinnedSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectDataBase);
        /**
         * Casts an instance of type DataContainer to WeaponSkinnedSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponSkinnedSocketObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum WeaponSlot {
        WeaponSlot_0 = 0,
        WeaponSlot_1 = 1,
        WeaponSlot_2 = 2,
        WeaponSlot_3 = 3,
        WeaponSlot_4 = 4,
        WeaponSlot_5 = 5,
        WeaponSlot_6 = 6,
        WeaponSlot_7 = 7,
        WeaponSlot_8 = 8,
        WeaponSlot_9 = 9,
        WeaponSlot_NumSlots = 10,
        WeaponSlot_NotDefined = 11,
    }
    class WeaponSocketObjectData extends FB.SocketObjectDataBase {

        /**
         * Creates a new WeaponSocketObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSocketObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SocketObjectDataBase to WeaponSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SocketObjectDataBase);
        /**
         * Casts an instance of type DataContainer to WeaponSocketObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponSocketObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

        referencedAssetHashes: number[];
        asset1p: FB.Asset | undefined;
        asset1pzoom: FB.Asset | undefined;
        asset3p: FB.Asset | undefined;

    }

    class WeaponSoundModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponSoundModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSoundModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponSoundModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponSoundModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponSoundModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        sound: FB.SoundAsset | undefined;

    }

    class WeaponSpeedData extends VUShared.DataContainer {

        /**
         * Creates a new WeaponSpeedData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSpeedData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponSpeedData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponSpeedData type.
         */
        static typeInfo: VUShared.TypeInformation;

        zoomOutSpeed: number;
        zoomInSpeed: number;
        unDeploySpeed: number;
        deploySpeed: number;

    }

    class WeaponStateData {

        /**
         * Creates a new WeaponStateData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponStateData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponStateData type.
         */
        static typeInfo: VUShared.TypeInformation;

        referencedAssetHashes: number[];
        boneFakePhysics: FB.BoneFakePhysicsData[];
        mesh1p: FB.SkinnedMeshAsset | undefined;
        meshZoom1p: FB.SkinnedMeshAsset | undefined;
        mesh3p: FB.SkinnedMeshAsset | undefined;
        weapon: FB.AntRef;
        zoomMeshTransitionFactor: number;
        zoomScaleFactor: number;
        zoomInOutMeshTransitionFactors: number[];
        zoomedScopeFilter: FB.ScopeFilterData | undefined;
        nonZoomedScopeFilter: FB.ScopeFilterData | undefined;
        keepAimingTime: number;
        animationConfiguration: FB.AnimationConfigurationData;
        animatedFireType: FB.AnimatedFireEnum;
        animatedAimingType: FB.AnimatedAimingEnum;
        mesh3pTransforms: VUShared.LinearTransform[];
        mesh3pRigidMeshSocketObjectTransforms: FB.RigidMeshSocketTransform[];
        hideProjectileAfterFireTime: number;
        projectileBoneName: string;
        isOneHanded: boolean;
        playDeployAfterFire: boolean;
        skipFireAnimation: boolean;
        skipDeployAnimation: boolean;
        skipReloadAnimation: boolean;
        alwaysAimHead: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponStateData;

    }

    class WeaponStateEntityData extends FB.EntityData {

        /**
         * Creates a new WeaponStateEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponStateEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to WeaponStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WeaponStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponStateEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponStateEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        weaponSlot: number;

    }

    class WeaponSuppressionData extends VUShared.DataContainer {

        /**
         * Creates a new WeaponSuppressionData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSuppressionData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponSuppressionData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponSuppressionData type.
         */
        static typeInfo: VUShared.TypeInformation;

        maxMultiplier: number;
        minMultiplier: number;
        minDistance: number;
        maxDistance: number;

    }

    class WeaponSwayData extends VUShared.DataContainer {

        /**
         * Creates a new WeaponSwayData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSwayData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WeaponSwayData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponSwayData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    export enum WeaponSwitchingEnum {
        wsSlot0 = 0,
        wsSlot1 = 1,
        wsSlot2 = 2,
        wsSlot3 = 3,
        wsSlot4 = 4,
        wsSlot5 = 5,
        wsSlot6 = 6,
        wsSlot7 = 7,
        wsMeleeWeapon = 7,
        wsSlot8 = 8,
        wsSlot9 = 9,
        wsMaxSlots = 10,
        wsLastPrimary = 11,
        wsOtherPrimary = 12,
        wsNotUsed = 13,
    }
    class WeaponSwitchingMapData {

        /**
         * Creates a new WeaponSwitchingMapData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponSwitchingMapData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponSwitchingMapData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fromWeapon: FB.WeaponSwitchingEnum;
        action: FB.EntryInputActionEnum;
        toWeapon: FB.WeaponSwitchingEnum[];
        fireAndSwitchBackToPrev: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponSwitchingMapData;

    }

    class WeaponUnlockPickupData {

        /**
         * Creates a new WeaponUnlockPickupData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponUnlockPickupData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WeaponUnlockPickupData type.
         */
        static typeInfo: VUShared.TypeInformation;

        unlockWeaponAndSlot: FB.UnlockWeaponAndSlot;
        altWeaponSlot: number;
        linkedToWeaponSlot: number;
        minAmmo: number;
        maxAmmo: number;
        defaultToFullAmmo: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WeaponUnlockPickupData;

    }

    class WeaponUnlockPickupEntityData extends FB.PickupEntityData {

        /**
         * Creates a new WeaponUnlockPickupEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponUnlockPickupEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PickupEntityData to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PickupEntityData);
        /**
         * Casts an instance of type GamePhysicsEntityData to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GamePhysicsEntityData);
        /**
         * Casts an instance of type GameEntityData to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameEntityData);
        /**
         * Casts an instance of type SpatialEntityData to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialEntityData);
        /**
         * Casts an instance of type EntityData to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WeaponUnlockPickupEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponUnlockPickupEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        weapons: FB.WeaponUnlockPickupData[];
        useForPersistence: boolean;
        randomlySelectOneWeapon: boolean;

    }

    export enum WeaponUnlocks {
        WeaponUnlocks_MaxAmount = 7,
    }
    class WeaponZoomModifier extends FB.WeaponModifierBase {

        /**
         * Creates a new WeaponZoomModifier frostbite instance.
         */
        constructor();
        /**
         * Creates a new WeaponZoomModifier frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type WeaponModifierBase to WeaponZoomModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.WeaponModifierBase);
        /**
         * Casts an instance of type DataContainer to WeaponZoomModifier. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WeaponZoomModifier type.
         */
        static typeInfo: VUShared.TypeInformation;

        zoomRenderFov: number;

    }

    class WebPresenceBackendData extends FB.PresenceBackendData {

        /**
         * Creates a new WebPresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WebPresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceBackendData to WebPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceBackendData);
        /**
         * Casts an instance of type Asset to WebPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WebPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WebPresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WheelComponentData extends FB.PartComponentData {

        /**
         * Creates a new WheelComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WheelComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to WheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to WheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WheelComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WheelComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        config: FB.WheelConfigData | undefined;
        physicsType: FB.WheelPhysicsType;
        effectClampVelocity: number;

    }

    class WheelConfigData extends VUShared.DataContainer {

        /**
         * Creates a new WheelConfigData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WheelConfigData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WheelConfigData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WheelConfigData type.
         */
        static typeInfo: VUShared.TypeInformation;

        offset: VUShared.Vec3;
        inertia: VUShared.Vec3;
        rotationBody: FB.RotationBodyData | undefined;
        sphereCollision: FB.SphereCollisionData;
        spring: FB.SpringData;
        mass: number;
        radius: number;
        width: number;
        rollingResistanceInternalBaseFactor: number;
        rollingResistanceBaseFactor: number;
        rollingResistanceVelocityFactor: number;
        engineBrakeVelocityFactor: number;
        engineBrakeMinFactor: number;
        engineBrakeMaxFactor: number;
        transmissionLoss: VUShared.Vec2[];
        diffGearRatio: number;
        lowSpeedSteeringSensitivity: number;
        midSpeedSteeringSensitivity: number;
        highSpeedSteeringSensitivity: number;
        sensitivityRangeScale: number;
        lowSpeedSteeringSensitivityLimit: number;
        midSpeedSteeringSensitivityLimit: number;
        highSpeedSteeringSensitivityLimit: number;
        trackedTurnSpeedLimit: number;
        trackedForwardSpeedLimit: number;
        steerInertia: FB.Curve2D | undefined;
        steeringSensitivity: FB.SensitivityAtVelocity[];
        slopeGripMinAngle: number;
        slopeGripMaxAngle: number;
        slopeGripExponent: number;
        offGroundGravityModifier: number;
        sideSlipAngleMaxSlipCondition: number;
        angularVelocityMinSlipCondition: number;
        wheelVelocityXMinSlipCondition: number;
        wheelSlipRatioMaxSlipCondition: number;
        longitudinalFrictionForceMaxFactor: number;
        lateralFrictionForceMaxFactor: number;
        longitudeFrictionScale: FB.FrictionScaleAtVelocity[];
        lattitudeFrictionScale: FB.FrictionScaleAtVelocity[];
        wheelFrictionLattitudeBrakeScale: number;
        maxSlipRatio: number;
        resistance: number;
        fxTorqueRadiusMultiplier: number;
        frictionMomentVelocityMin: number;
        frictionMomentVelocityMax: number;
        frictionMomentMultiplier: number;
        frictionMomentMaxFactor: number;
        brakeFactor: number;
        brakeForce: number;
        handBrakeFactor: number;
        handBrakeForce: number;
        lateralPosK: number;
        lateralNegK: number;
        longitudinalPosK: number;
        longitudinalNegK: number;
        alignMomScale: number;
        wheelBaseLateral: number;
        wheelBaseLongitudinal: number;
        drivingType: number;
        steeringType: number;
        frictionMethod: number;
        ackermanDeviceType: number;
        collisionYawDampeningDuration: number;
        collisionYawDampening: number;
        constantSpringForceFrictionScale: number;
        rotationDirectionIndex: number;
        steeringAngleIndex: number;
        pacejkaConfigIndex: number;
        engineIndex: number;
        collisionMaterialPair: FB.MaterialContainerPair | undefined;
        alwaysGrip: boolean;
        useRollingResistanceBaseFactor: boolean;
        useEngineBrake: boolean;
        isAllowedToSpin: boolean;
        hasSteeringInverted: boolean;
        useFrictionMoment: boolean;
        useLowSpeedAutoBrake: boolean;
        adjustWheelRotation: boolean;
        useRollingResistanceVelocityFactor: boolean;

    }

    export enum WheelPhysicsType {
        wptNormal = 0,
        wptFollow = 1,
        wptStatic = 2,
    }
    class WidgetEventQueryPair {

        /**
         * Creates a new WidgetEventQueryPair frostbite instance.
         */
        constructor();
        /**
         * Creates a new WidgetEventQueryPair frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the WidgetEventQueryPair type.
         */
        static typeInfo: VUShared.TypeInformation;

        name: string;
        query: FB.UIWidgetEventID;
        instanceName: string;
        isOutput: boolean;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.WidgetEventQueryPair;

    }

    export enum WidgetHorisontalAlignment {
        WHA_Left = 0,
        WHA_Center = 1,
        WHA_Right = 2,
    }
    class WidgetNode extends FB.UINodeData {

        /**
         * Creates a new WidgetNode frostbite instance.
         */
        constructor();
        /**
         * Creates a new WidgetNode frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type UINodeData to WidgetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.UINodeData);
        /**
         * Casts an instance of type DataContainer to WidgetNode. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WidgetNode type.
         */
        static typeInfo: VUShared.TypeInformation;

        widgetAsset: FB.UIWidgetAsset | undefined;
        focusIndex: number;
        zDepthLevel: number;
        verticalAlign: FB.WidgetVerticalAlignment;
        horisontalAlign: FB.WidgetHorisontalAlignment;
        dataBinding: FB.UIDataBinding | undefined;
        widgetProperties: FB.UIWidgetProperty[];
        instanceName: string;
        inputs: FB.UINodePort[];
        outputs: FB.UINodePort[];
        alwaysInFocus: boolean;

    }

    export enum WidgetVerticalAlignment {
        WVA_Top = 0,
        WVA_Center = 1,
        WVA_Bottom = 2,
    }
    class WindComponentData extends FB.ComponentData {

        /**
         * Creates a new WindComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WindComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ComponentData to WindComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WindComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WindComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WindComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WindComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        windDirection: number;
        windStrength: number;

    }

    class WindowSettings extends FB.SystemSettings {

        /**
         * Creates a new WindowSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new WindowSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SystemSettings to WindowSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SystemSettings);
        /**
         * Casts an instance of type DataContainer to WindowSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WindowSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        posX: number;
        posY: number;
        width: number;
        height: number;
        bordersEnable: boolean;
        autoSize: boolean;
        fullscreenAutoSize: boolean;
        fullscreenWhenJoiningServer: boolean;
        enableEscape: boolean;
        enableInputOnActivate: boolean;
        hibernateOnClose: boolean;
        hidden: boolean;
        minimized: boolean;

    }

    class WingComponentData extends FB.PartComponentData {

        /**
         * Creates a new WingComponentData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WingComponentData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PartComponentData to WingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PartComponentData);
        /**
         * Casts an instance of type ComponentData to WingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ComponentData);
        /**
         * Casts an instance of type GameObjectData to WingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WingComponentData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WingComponentData type.
         */
        static typeInfo: VUShared.TypeInformation;

        config: FB.WingPhysicsData | undefined;

    }

    class WingPhysicsData extends VUShared.DataContainer {

        /**
         * Creates a new WingPhysicsData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WingPhysicsData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WingPhysicsData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WingPhysicsData type.
         */
        static typeInfo: VUShared.TypeInformation;

        lift: number;
        flapLift: number;
        liftCoefficient: FB.Curve2D | undefined;
        drag: number;
        flapDrag: number;
        dragCoefficient: FB.Curve2D | undefined;
        angularVelocityLiftModifier: number;
        dragRotationModifier: number;
        baseAngleOfAttack: number;
        inputForFlap: number;
        flapTurnSpeed: number;
        visualFlapTurnSpeed: number;
        visualFlapAngleLimit: number;
        maxFlapAngleScaleFactor: FB.Curve2D | undefined;
        landingFlapLift: number;
        landingFlapLogic: FB.LandingFlapData | undefined;

    }

    class WorldData extends FB.SubWorldData {

        /**
         * Creates a new WorldData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubWorldData to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubWorldData);
        /**
         * Casts an instance of type SpatialPrefabBlueprint to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialPrefabBlueprint);
        /**
         * Casts an instance of type PrefabBlueprint to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PrefabBlueprint);
        /**
         * Casts an instance of type Blueprint to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WorldData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldData type.
         */
        static typeInfo: VUShared.TypeInformation;

        runtimeMaterialGrid: FB.MaterialGridData | undefined;

    }

    class WorldObjectListData extends VUShared.DataContainer {

        /**
         * Creates a new WorldObjectListData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldObjectListData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WorldObjectListData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldObjectListData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WorldPartData extends FB.SpatialPrefabBlueprint {

        /**
         * Creates a new WorldPartData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldPartData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SpatialPrefabBlueprint to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SpatialPrefabBlueprint);
        /**
         * Casts an instance of type PrefabBlueprint to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PrefabBlueprint);
        /**
         * Casts an instance of type Blueprint to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Blueprint);
        /**
         * Casts an instance of type EntityBusData to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityBusData);
        /**
         * Casts an instance of type DataBusData to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.DataBusData);
        /**
         * Casts an instance of type Asset to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WorldPartData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldPartData type.
         */
        static typeInfo: VUShared.TypeInformation;

        hackToSolveRealTimeTweakingIssue: VUShared.Guid;
        useDeferredEntityCreation: boolean;
        enabled: boolean;

    }

    class WorldPartInclusion extends FB.SubWorldInclusion {

        /**
         * Creates a new WorldPartInclusion frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldPartInclusion frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubWorldInclusion to WorldPartInclusion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubWorldInclusion);
        /**
         * Casts an instance of type Asset to WorldPartInclusion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to WorldPartInclusion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldPartInclusion type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WorldPartInclusionCriterion extends FB.SubWorldInclusionCriterion {

        /**
         * Creates a new WorldPartInclusionCriterion frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldPartInclusionCriterion frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubWorldInclusionCriterion to WorldPartInclusionCriterion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubWorldInclusionCriterion);
        /**
         * Casts an instance of type DataContainer to WorldPartInclusionCriterion. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldPartInclusionCriterion type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WorldPartInclusionSetting extends FB.SubWorldInclusionSetting {

        /**
         * Creates a new WorldPartInclusionSetting frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldPartInclusionSetting frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubWorldInclusionSetting to WorldPartInclusionSetting. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubWorldInclusionSetting);
        /**
         * Casts an instance of type DataContainer to WorldPartInclusionSetting. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldPartInclusionSetting type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WorldPartInclusionSettings extends FB.SubWorldInclusionSettings {

        /**
         * Creates a new WorldPartInclusionSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldPartInclusionSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type SubWorldInclusionSettings to WorldPartInclusionSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.SubWorldInclusionSettings);
        /**
         * Casts an instance of type DataContainer to WorldPartInclusionSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldPartInclusionSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WorldPartReferenceObjectData extends FB.ReferenceObjectData {

        /**
         * Creates a new WorldPartReferenceObjectData frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldPartReferenceObjectData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type ReferenceObjectData to WorldPartReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.ReferenceObjectData);
        /**
         * Casts an instance of type GameObjectData to WorldPartReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to WorldPartReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to WorldPartReferenceObjectData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldPartReferenceObjectData type.
         */
        static typeInfo: VUShared.TypeInformation;

    }

    class WorldRenderSettings extends VUShared.DataContainer {

        /**
         * Creates a new WorldRenderSettings frostbite instance.
         */
        constructor();
        /**
         * Creates a new WorldRenderSettings frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to WorldRenderSettings. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the WorldRenderSettings type.
         */
        static typeInfo: VUShared.TypeInformation;

        dynamicEnvmapDefaultPosition: VUShared.Vec3;
        subSurfaceColor: VUShared.Vec3;
        viewportScale: number;
        shadowMinScreenArea: number;
        shadowViewportScale: number;
        fxaaQuality: number;
        cullScreenAreaScale: number;
        planarReflectionCullFOV: number;
        genericEntityMaxVisibleEntityCount: number;
        shadowmapSizeZScale: number;
        shadowmapResolution: number;
        shadowmapQuality: number;
        shadowmapPoissonFilterScale: number;
        shadowmapSliceCount: number;
        shadowmapSliceSchemeWeight: number;
        shadowmapFirstSliceScale: number;
        shadowmapViewDistance: number;
        planarReflectionWidth: number;
        shadowmapExtrusionLength: number;
        shadowmapMinScreenArea: number;
        tempPlanarReflectionY: number;
        subSurfaceRolloffKeyLight: number;
        fxaaForceVendor: number;
        planarReflectionHeight: number;
        lightIntensityScale: number;
        lightLodSpecularFadeAreaEnd: number;
        shadowmapMinFov: number;
        lightLodSpecularFadeAreaStart: number;
        lightLodRadiusFactor: number;
        lightForceIntensity: number;
        lightLodFadeArea: number;
        lightLodMinArea: number;
        drawDebugDynamicEnvmapMipLevel: number;
        maxDecalVolumeCount: number;
        motionBlurScale: number;
        motionBlurMax: number;
        motionBlurNoiseScale: number;
        motionBlurQuality: number;
        maxSpotLightShadowCount: number;
        dynamicEnvmapFilterMode: FB.MipmapFilterMode;
        motionBlurMaxSampleCount: number;
        motionBlurFrameAverageCount: number;
        motionBlurMaxFrameTime: number;
        forceMotionBlurDepthCutoff: number;
        forceMotionBlurCutoffGradientScale: number;
        multisampleCount: number;
        multisampleThreshold: number;
        maxPointLightCount: number;
        reflectionEnvmapSize: number;
        spotLightNearPlane: number;
        spotLightShadowmapPoissonFilterScale: number;
        onlyShadowmapSlice: number;
        viewMode: FB.WorldViewMode;
        spotLightShadowmapResolution: number;
        spotLightShadomapLevel: FB.QualityLevel;
        spotLightShadowmapQuality: number;
        onlyLightTileY: number;
        onlyLightTileX: number;
        xenonHdrColorScale: number;
        xenonHdrColorScaleFactor: number;
        ps3LightTileJobMaxFbTileCount: number;
        onlyLightTileIndex: number;
        ps3LightTileJobCount: number;
        ps3LightTileJobPriority: number;
        xenonLightTileMaxLineLightCount: number;
        xenonLightTileMaxSpotLightCount: number;
        xenonLightTileConstantBufferSize: number;
        xenonLightTileMaxPointLightCount: number;
        maxDestructionVolumeCount: number;
        dynamicEnvmapFilterWidth: number;
        lightTileMinArea: number;
        dynamicEnvmapResolution: number;
        gBufferLayout: FB.ShaderGBufferLayout;
        drawDebugSkyEnvmapMipLevel: number;
        decalVolumeScale: number;
        lightOverdrawMaxLayerCount: number;
        lightRadiusScale: number;
        lightAttenuationThreshold: number;
        ps3LightTileMethod: number;
        ps3LightTileJobYieldGranularity: number;
        outdoorLightTileBatchCount: number;
        xenonDrawDebugLightTileGridMode: number;
        lightStencilMinArea: number;
        maxSpotLightCount: number;
        skyEnvmapFilterMode: FB.MipmapFilterMode;
        skyEnvmapFilterWidth: number;
        gBufferTestCount: number;
        skyEnvmapResolution: number;
        skyEnvmapSidesPerFrameCount: number;
        subSurfaceRolloffLocalLight: number;
        onlyTileIndex: number;
        occluderMeshZPrepassEnable: boolean;
        occluderMeshZPrepassDebugEnable: boolean;
        wireframeEnable: boolean;
        halfResEnable: boolean;
        halfResLensFlaresEnable: boolean;
        zPassEnable: boolean;
        foregroundEnable: boolean;
        tiledHalfResCompositeEnable: boolean;
        foregroundZPassEnable: boolean;
        drawDebugVelocityBuffer: boolean;
        foregroundDepthClearEnable: boolean;
        foregroundAsMainEnable: boolean;
        customEnvmapEnable: boolean;
        skyEnvmapEnable: boolean;
        drawDebugVisibleEntityTypes: boolean;
        drawDebugHalfResEnvironment: boolean;
        drawSolidBoundingBoxes: boolean;
        bilateralHalfResCompositeEnable: boolean;
        foregroundTransparentEnable: boolean;
        tiledHalfResStencilOccludersEnable: boolean;
        skyEnvmapUpdateEnable: boolean;
        skyEnvmapForceUpdateEnable: boolean;
        skyEnvmapUse8BitTexture: boolean;
        dynamicEnvmapEnable: boolean;
        screenEffectEnable: boolean;
        drawDebugZBufferEnable: boolean;
        motionBlurStencilPassEnable: boolean;
        finalPostEnable: boolean;
        drawDebugQuarterShadowmaps: boolean;
        drawDebugSkyEnvmap: boolean;
        dxShadowmap16BitEnable: boolean;
        drawDebugTransShadowmap: boolean;
        drawDebugSpotLightShadowmaps: boolean;
        drawShadowFrustums: boolean;
        drawDebugShadowmaps: boolean;
        skyEnable: boolean;
        drawBoundingSpheres: boolean;
        drawFrustums: boolean;
        staticEnvmapEnable: boolean;
        skyFogEnable: boolean;
        drawLineBoundingBoxes: boolean;
        drawDebugDestructionVolumes: boolean;
        lensFlaresEnable: boolean;
        drawDebugLensFlareOccluders: boolean;
        drawDebugLensFlares: boolean;
        lensFlareOcclusionEnable: boolean;
        drawDebugWorldOcclusions: boolean;
        cloudShadowEnable: boolean;
        overrideDynamicAO: boolean;
        drawDebugDynamicAO: boolean;
        emissiveEnable: boolean;
        unlitEnable: boolean;
        skyEnvmapMipmapGenEnable: boolean;
        drawLightSources: boolean;
        gBufferClearEnable: boolean;
        dxGBufferLight16BitEnable: boolean;
        dxGBufferNormal16BitEnable: boolean;
        gBufferAlphaTestSimpleEnable: boolean;
        specularLightingEnable: boolean;
        skinLightingEnable: boolean;
        translucencyLightingEnable: boolean;
        dynamicEnvmapLightingEnable: boolean;
        outdoorLightEnable: boolean;
        pointLightsEnable: boolean;
        lineLightsEnable: boolean;
        coneLightsEnable: boolean;
        spotLightsEnable: boolean;
        lightProbesEnable: boolean;
        lightStencilMethodEnable: boolean;
        lightVolumeMethodEnable: boolean;
        lightVolumeDepthTestEnable: boolean;
        outputGammaCorrectionEnable: boolean;
        drawDebugMultisampleClassify: boolean;
        outdoorKeyLightEnable: boolean;
        outdoorSkyLightEnable: boolean;
        outdoorLightSpecularEnable: boolean;
        outdoorLightTilingEnable: boolean;
        outdoorLightTileRenderEnable: boolean;
        outdoorLightTileBlendEnable: boolean;
        outdoorLightTileSimpleShaderEnable: boolean;
        ps3TiledHalfTargetEnable: boolean;
        xenonOutdoorLightTilingEnable: boolean;
        xenonPointLightsTilingEnable: boolean;
        xenonSpotLightsTilingEnable: boolean;
        xenonLineLightsTilingEnable: boolean;
        xenonAsyncLightJobsEnable: boolean;
        xenonLightTileDownsampleSpecularCheckEnable: boolean;
        xenonLightTileCpuPointLightCullingEnable: boolean;
        ps3TiledSSAOTargetsEnable: boolean;
        ps3SCullEnable: boolean;
        ps3ColorCompressionEnable: boolean;
        enable: boolean;
        ps3TilingEnable: boolean;
        ps3DepthBoundsLightCullingEnable: boolean;
        ps3ZCullEnable: boolean;
        consoleRenderTargetPoolSharingEnable: boolean;
        xenonFloatDepthBufferEnable: boolean;
        ps3LightTileJobYieldEnable: boolean;
        ps3HdrClearEnable: boolean;
        xenonFastHdrEnable: boolean;
        shadowmapViewDistanceScaleEnable: boolean;
        ps3RenderTargetPoolGBufferOffsetEnable: boolean;
        hdrEnable: boolean;
        spotLightShadowmapEnable: boolean;
        simpleShadowmapsEnable: boolean;
        drawTransparent: boolean;
        drawTransparentDecal: boolean;
        shadowmapFixedDepthEnable: boolean;
        drawDebugDynamicEnvmap: boolean;
        motionBlurGeometryPassEnable: boolean;
        dxLinearDepth32BitFormatEnable: boolean;
        dynamicEnvmapMipmapGenEnable: boolean;
        motionBlurEnable: boolean;
        coloredShadowmapSlicesEnable: boolean;
        dxDeferredCsPathEnable: boolean;
        drawDebugGBuffer: boolean;
        drawDebugLightSources: boolean;
        drawDebugLightShadowSources: boolean;
        drawDebugLightStats: boolean;
        drawDebugLightTiles: boolean;
        drawDebugLightTileVolumes: boolean;
        drawDebugLightTileFbGrid: boolean;
        drawDebugLightTileGrid: boolean;
        drawDebugLightTileSources: boolean;
        applyShadowmapsEnable: boolean;
        generateShadowmapsEnable: boolean;
        dxSpotLightShadowmap16BitEnable: boolean;
        ps3Shadowmap16BitEnable: boolean;
        ps3SpotLightShadowmap16BitEnable: boolean;
        genericEntityRendererEnable: boolean;
        setupJobEnable: boolean;
        shadowmapAccumBilinearEnable: boolean;
        lightWidthEnable: boolean;
        lightIntensityNormalizationEnable: boolean;
        lightCullEnable: boolean;
        lightDepthCullEnable: boolean;
        lightNormalCullEnable: boolean;
        lightConeCullEnable: boolean;
        lightTileOverlayEnable: boolean;
        ps3ShadowmapTilingEnable: boolean;
        lightAttenuationThresholdEnable: boolean;
        skyVisibilityEnvmapScalingEnable: boolean;
        zBufferShadowTestEnable: boolean;
        shadowmapsEnable: boolean;
        shadowmapAccumEnable: boolean;
        shadowmapCullVolumeEnable: boolean;
        opaqueSortBySolutionEnable: boolean;
        mainOpaqueZPassEnable: boolean;
        drawDebugDecalVolumes: boolean;
        planarReflectionEnable: boolean;
        transparencyShadowmapsEnable: boolean;
        dynamicCullDrawOccludedBoxesEnable: boolean;
        planarReflectionBlur: boolean;
        drawDebugPlanarReflectionCullFrustum: boolean;
        freezePlanarReflectionCullFrustum: boolean;
        planarReflectionDebugCullMode: boolean;
        shadowmapFixedMovementEnable: boolean;
        decalVolumeEnable: boolean;
        drawDebugPlanarReflection: boolean;
        fxaaEnable: boolean;
        dynamicCullSpuJobEnable: boolean;
        dynamicCullZBufferTestEnable: boolean;
        viewFxEnable: boolean;

    }

    export enum WorldViewMode {
        WorldViewMode_Default = 0,
        WorldViewMode_RawLinear = 1,
        WorldViewMode_RawLinearAlpha = 2,
        WorldViewMode_Diffuse = 3,
        WorldViewMode_Specular = 4,
        WorldViewMode_Emissive = 5,
        WorldViewMode_Normal = 6,
        WorldViewMode_Smoothness = 7,
        WorldViewMode_Material = 8,
        WorldViewMode_Light = 9,
        WorldViewMode_LightDiffuse = 10,
        WorldViewMode_LightSpecular = 11,
        WorldViewMode_LightIndirect = 12,
        WorldViewMode_LightTranslucency = 13,
        WorldViewMode_LightOverdraw = 14,
        WorldViewMode_SkyVisibility = 15,
        WorldViewMode_SkyVisibilityRaw = 16,
        WorldViewMode_Overdraw = 17,
        WorldViewMode_DynamicAO = 18,
        WorldViewMode_Occluders = 19,
        WorldViewMode_RadiosityLightMaps = 20,
        WorldViewMode_RadiosityDiffuseColor = 21,
        WorldViewMode_RadiosityTargetUV = 22,
        WorldViewMode_VelocityVector = 23,
        WorldViewMode_DistortionVector = 24,
    }
    class XenonPresenceBackendData extends FB.PresenceBackendData {

        /**
         * Creates a new XenonPresenceBackendData frostbite instance.
         */
        constructor();
        /**
         * Creates a new XenonPresenceBackendData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type PresenceBackendData to XenonPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.PresenceBackendData);
        /**
         * Casts an instance of type Asset to XenonPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.Asset);
        /**
         * Casts an instance of type DataContainer to XenonPresenceBackendData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the XenonPresenceBackendData type.
         */
        static typeInfo: VUShared.TypeInformation;

        titleId: number;

    }

    export enum XenonShaderBranchType {
        XsbtDefault = 0,
        XsbtPredicate = 1,
        XsbtPredicateBlock = 2,
        XsbtBranch = 3,
    }
    export enum XenonTessellationMode {
        XenonTessellationMode_Discrete = 0,
        XenonTessellationMode_Continuous = 1,
        XenonTessellationMode_PerEdge = 2,
    }
    class XorEntityData extends FB.EntityData {

        /**
         * Creates a new XorEntityData frostbite instance.
         */
        constructor();
        /**
         * Creates a new XorEntityData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type EntityData to XorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.EntityData);
        /**
         * Casts an instance of type GameObjectData to XorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameObjectData);
        /**
         * Casts an instance of type GameDataContainer to XorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: FB.GameDataContainer);
        /**
         * Casts an instance of type DataContainer to XorEntityData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the XorEntityData type.
         */
        static typeInfo: VUShared.TypeInformation;

        realm: FB.Realm;
        in1: boolean;
        in2: boolean;

    }

    export enum ZoomLevelActivateEventType {
        ZoomLevelActivateEventType_Disable = 0,
        ZoomLevelActivateEventType_Enable = 1,
        ZoomLevelActivateEventType_ToggleOnLightSwitch = 2,
    }
    class ZoomLevelData extends VUShared.DataContainer {

        /**
         * Creates a new ZoomLevelData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ZoomLevelData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);
        /**
         * Casts an instance of type DataContainer to ZoomLevelData. Will throw an error when trying to cast from an unsupported type.
         */
        constructor(other: VUShared.DataContainer);

        /**
         * The type information for the ZoomLevelData type.
         */
        static typeInfo: VUShared.TypeInformation;

        fieldOfView: number;
        dispersionMultiplier: number;
        lookSpeedMultiplier: number;
        sprintLookSpeedMultiplier: number;
        moveSpeedMultiplier: number;
        swayPitchMultiplier: number;
        swayYawMultiplier: number;
        supportedSwayPitchMultiplier: number;
        supportedSwayYawMultiplier: number;
        timePitchMultiplier: number;
        timeYawMultiplier: number;
        recoilMultiplier: number;
        fadeToBlackDuration: number;
        recoilFovMultiplier: number;
        cameraImpulseMultiplier: number;
        onActivateEventType: FB.ZoomLevelActivateEventType;
        startFadeToBlackAtTime: number;
        fadeFromBlackDuration: number;
        startFadeFromBlackAtTime: number;
        screenExposureAreaScale: number;
        fadeToBlackInZoomTransition: boolean;
        useFovSpecialisation: boolean;
        allowFieldOfViewScaling: boolean;

    }

    class ZoomLevelLockData {

        /**
         * Creates a new ZoomLevelLockData frostbite instance.
         */
        constructor();
        /**
         * Creates a new ZoomLevelLockData frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ZoomLevelLockData type.
         */
        static typeInfo: VUShared.TypeInformation;

        outlineTaggedDistance: number;
        lockType: FB.LockType;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ZoomLevelLockData;

    }

    class ZoomLevelSpecificTransitionTime {

        /**
         * Creates a new ZoomLevelSpecificTransitionTime frostbite instance.
         */
        constructor();
        /**
         * Creates a new ZoomLevelSpecificTransitionTime frostbite instance and assigns it the provided Guid.
         */
        constructor(guid: VUShared.Guid);

        /**
         * The type information for the ZoomLevelSpecificTransitionTime type.
         */
        static typeInfo: VUShared.TypeInformation;

        fromZoomLevel: number;
        toZoomLevel: number;
        zoomTransitionTime: number;
        fovTransitionTime: number;

        /**
         * Creates a shallow-copy clone of this structure, which is essentially the equivalent of creating a new structure of the same type and assigning the values of this structure to all of its properties. Any properties that contain structure types (eg. Vec3) will be cloned when assigning, while properties that contain instance types (eg. DataContainer) will be referencing the same instance.
         */
        Clone(): FB.ZoomLevelSpecificTransitionTime;

    }


} // end declare namespace FB

// external utils

declare class TSUtils {
    static RetrieveEBXInstance<T>(name: string):  VUShared.DataContainer | undefined;
}
